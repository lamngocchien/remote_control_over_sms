
AVRGCC3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00800060  000026e0  00002774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000020d  0080014e  0080014e  00002862  2**0
                  ALLOC
  3 .stab         00003b04  00000000  00000000  00002864  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ceb  00000000  00000000  00006368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00007053  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000531  00000000  00000000  000070f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000211a  00000000  00000000  00007624  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000935  00000000  00000000  0000973e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000024f1  00000000  00000000  0000a073  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003a0  00000000  00000000  0000c564  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000076e  00000000  00000000  0000c904  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001108  00000000  00000000  0000d072  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000178  00000000  00000000  0000e17a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000100  00000000  00000000  0000e2f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__vector_1>
       8:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__vector_2>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_13>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	11 e0       	ldi	r17, 0x01	; 1
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e0 ee       	ldi	r30, 0xE0	; 224
      ea:	f6 e2       	ldi	r31, 0x26	; 38
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	ae 34       	cpi	r26, 0x4E	; 78
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	13 e0       	ldi	r17, 0x03	; 3
      fa:	ae e4       	ldi	r26, 0x4E	; 78
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	ab 35       	cpi	r26, 0x5B	; 91
     104:	b1 07       	cpc	r27, r17
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <main>
     10c:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <uart_char_tx>:
/*--------------------------------------Cac Ham Con-----------------------------------------------*/ 
/*------------------------------------------------------------------------------------------------*/ 

//Chuong trinh truyen du lieu qua UART
void uart_char_tx(unsigned char chr)
{
     114:	1f 93       	push	r17
     116:	18 2f       	mov	r17, r24
	if(chr == '\n')
     118:	8a 30       	cpi	r24, 0x0A	; 10
     11a:	19 f4       	brne	.+6      	; 0x122 <uart_char_tx+0xe>
		uart_char_tx('\r');
     11c:	8d e0       	ldi	r24, 0x0D	; 13
     11e:	0e 94 8a 00 	call	0x114	; 0x114 <uart_char_tx>
	while(bit_is_clear(UCSRA,UDRE)) {};
     122:	5d 9b       	sbis	0x0b, 5	; 11
     124:	fe cf       	rjmp	.-4      	; 0x122 <uart_char_tx+0xe>
	UDR = chr;
     126:	1c b9       	out	0x0c, r17	; 12
}
     128:	1f 91       	pop	r17
     12a:	08 95       	ret

0000012c <Read2Nib>:
#define DDR_DATA	DDRD
*/

char Read2Nib(){
	char HNib, LNib;
	DATA_O |=0xF0;
     12c:	8b b3       	in	r24, 0x1b	; 27
     12e:	80 6f       	ori	r24, 0xF0	; 240
     130:	8b bb       	out	0x1b, r24	; 27

    DDR_DATA &=0x0F;
     132:	8a b3       	in	r24, 0x1a	; 26
     134:	8f 70       	andi	r24, 0x0F	; 15
     136:	8a bb       	out	0x1a, r24	; 26
	sbi(CTRL,EN); //enable
     138:	db 9a       	sbi	0x1b, 3	; 27
	sbi(CTRL,EN); // dong nay chi co tac dung delay vi chan EN da o muc cao roi
     13a:	db 9a       	sbi	0x1b, 3	; 27
	

	HNib=DATA_I & 0xF0;
     13c:	89 b3       	in	r24, 0x19	; 25
	cbi(CTRL,EN); //disable
     13e:	db 98       	cbi	0x1b, 3	; 27

	sbi(CTRL,EN); //enable
     140:	db 9a       	sbi	0x1b, 3	; 27
	sbi(CTRL,EN); //dong nay chi co tac dung delay vi chan EN da o muc cao roi	
     142:	db 9a       	sbi	0x1b, 3	; 27
	LNib = DATA_I & 0xF0;
     144:	99 b3       	in	r25, 0x19	; 25
	cbi(CTRL,EN); //disable
     146:	db 98       	cbi	0x1b, 3	; 27
	LNib>>=4;
     148:	92 95       	swap	r25
     14a:	9f 70       	andi	r25, 0x0F	; 15
    DDR_DATA &=0x0F;
	sbi(CTRL,EN); //enable
	sbi(CTRL,EN); // dong nay chi co tac dung delay vi chan EN da o muc cao roi
	

	HNib=DATA_I & 0xF0;
     14c:	80 7f       	andi	r24, 0xF0	; 240
	sbi(CTRL,EN); //dong nay chi co tac dung delay vi chan EN da o muc cao roi	
	LNib = DATA_I & 0xF0;
	cbi(CTRL,EN); //disable
	LNib>>=4;
	return (HNib|LNib);
}
     14e:	89 2b       	or	r24, r25
     150:	08 95       	ret

00000152 <Write2Nib>:

void Write2Nib(uint8_t chr){

	uint8_t HNib, LNib, temp_data;	
	temp_data=DATA_O & 0x0F;
     152:	9b b3       	in	r25, 0x1b	; 27
     154:	9f 70       	andi	r25, 0x0F	; 15

	HNib=chr & 0xF0;
     156:	28 2f       	mov	r18, r24
     158:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(chr<<4) & 0xF0;		
		
	DATA_O =(HNib |temp_data);	
     15a:	29 2b       	or	r18, r25
     15c:	2b bb       	out	0x1b, r18	; 27
	sbi(CTRL,EN); //enable
     15e:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable	
     160:	db 98       	cbi	0x1b, 3	; 27

	uint8_t HNib, LNib, temp_data;	
	temp_data=DATA_O & 0x0F;

	HNib=chr & 0xF0;
	LNib=(chr<<4) & 0xF0;		
     162:	82 95       	swap	r24
     164:	80 7f       	andi	r24, 0xF0	; 240
		
	DATA_O =(HNib |temp_data);	
	sbi(CTRL,EN); //enable
	cbi(CTRL,EN); //disable	
	
	DATA_O =(LNib|temp_data);		
     166:	98 2b       	or	r25, r24
     168:	9b bb       	out	0x1b, r25	; 27
	sbi(CTRL,EN); //enable
     16a:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable
     16c:	db 98       	cbi	0x1b, 3	; 27
}
     16e:	08 95       	ret

00000170 <Write8Bit>:

void Write8Bit(uint8_t chr){
	DATA_O=chr;   //out 8 bits to DATA Line
     170:	8b bb       	out	0x1b, r24	; 27
	sbi(CTRL,EN); //enable
     172:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable
     174:	db 98       	cbi	0x1b, 3	; 27
}
     176:	08 95       	ret

00000178 <wait_LCD>:

void wait_LCD(){	
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	df 93       	push	r29
     17e:	cf 93       	push	r28
     180:	0f 92       	push	r0
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
			temp_val=Read2Nib();
			if (bit_is_clear(temp_val,7)) break;
     186:	8e 01       	movw	r16, r28
     188:	0f 5f       	subi	r16, 0xFF	; 255
     18a:	1f 4f       	sbci	r17, 0xFF	; 255
		cbi(CTRL,RW); //ready for next step	
		DDR_DATA=0xFF;//Ready to Out
	#else
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
     18c:	d9 98       	cbi	0x1b, 1	; 27
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
     18e:	da 9a       	sbi	0x1b, 2	; 27
			temp_val=Read2Nib();
     190:	0e 94 96 00 	call	0x12c	; 0x12c <Read2Nib>
     194:	89 83       	std	Y+1, r24	; 0x01
			if (bit_is_clear(temp_val,7)) break;
     196:	f8 01       	movw	r30, r16
     198:	80 81       	ld	r24, Z
     19a:	88 23       	and	r24, r24
     19c:	bc f3       	brlt	.-18     	; 0x18c <wait_LCD+0x14>
		}
		cbi(CTRL,RW); //ready for next step	
     19e:	da 98       	cbi	0x1b, 2	; 27
		DDR_DATA=0xFF;//Ready to Out		
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	8a bb       	out	0x1a, r24	; 26
	#endif
	
	//_delay_ms(1);
	
}
     1a4:	0f 90       	pop	r0
     1a6:	cf 91       	pop	r28
     1a8:	df 91       	pop	r29
     1aa:	1f 91       	pop	r17
     1ac:	0f 91       	pop	r16
     1ae:	08 95       	ret

000001b0 <putChar_LCD>:
		
	#endif	
}

void putChar_LCD(uint8_t chr){
	sbi(CTRL,RS); //this is a normal DATA	
     1b0:	d9 9a       	sbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(chr);
		wait_LCD();	
	#else
		Write2Nib(chr);
     1b2:	0e 94 a9 00 	call	0x152	; 0x152 <Write2Nib>
		wait_LCD();	
     1b6:	0e 94 bc 00 	call	0x178	; 0x178 <wait_LCD>
	#endif		
}
     1ba:	08 95       	ret

000001bc <init_LCD>:
	
}


void init_LCD(){
	DDR_CTRL=0xFF;
     1bc:	8f ef       	ldi	r24, 0xFF	; 255
     1be:	8a bb       	out	0x1a, r24	; 26
	DDR_DATA=0xFF;
     1c0:	8a bb       	out	0x1a, r24	; 26
//Function set------------------------------------------------------------------------------
	cbi(CTRL,RS);   // the following data is COMMAND
     1c2:	d9 98       	cbi	0x1b, 1	; 27
	cbi(CTRL, RW); // AVR->LCD
     1c4:	da 98       	cbi	0x1b, 2	; 27
	cbi(CTRL, EN);
     1c6:	db 98       	cbi	0x1b, 3	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x38);
		wait_LCD();
	#else
		sbi(CTRL,EN); //enable
     1c8:	db 9a       	sbi	0x1b, 3	; 27
		sbi(DATA_O, 5); 
     1ca:	dd 9a       	sbi	0x1b, 5	; 27
		cbi(CTRL,EN); //disable
     1cc:	db 98       	cbi	0x1b, 3	; 27
		wait_LCD();		
     1ce:	0e 94 bc 00 	call	0x178	; 0x178 <wait_LCD>
		Write2Nib(0x28);//
     1d2:	88 e2       	ldi	r24, 0x28	; 40
     1d4:	0e 94 a9 00 	call	0x152	; 0x152 <Write2Nib>
		wait_LCD();	
     1d8:	0e 94 bc 00 	call	0x178	; 0x178 <wait_LCD>
	#endif
//Display control-------------------------------------------------------------------------	
	cbi(CTRL,RS); // the following data is COMMAND 
     1dc:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x0E);
		wait_LCD();
	#else
		Write2Nib(0x0E);
     1de:	8e e0       	ldi	r24, 0x0E	; 14
     1e0:	0e 94 a9 00 	call	0x152	; 0x152 <Write2Nib>
		wait_LCD();			
     1e4:	0e 94 bc 00 	call	0x178	; 0x178 <wait_LCD>
	#endif
//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND 
     1e8:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT
		Write8Bit(0x06);
		wait_LCD();
	#else
		Write2Nib(0x06);
     1ea:	86 e0       	ldi	r24, 0x06	; 6
     1ec:	0e 94 a9 00 	call	0x152	; 0x152 <Write2Nib>
		wait_LCD();
     1f0:	0e 94 bc 00 	call	0x178	; 0x178 <wait_LCD>
	#endif
}
     1f4:	08 95       	ret

000001f6 <home_LCD>:

void home_LCD(){
	cbi(CTRL,RS); // the following data is COMMAND 
     1f6:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x02);
		wait_LCD();	
	#else
		Write2Nib(0x02);
     1f8:	82 e0       	ldi	r24, 0x02	; 2
     1fa:	0e 94 a9 00 	call	0x152	; 0x152 <Write2Nib>
		wait_LCD();
     1fe:	0e 94 bc 00 	call	0x178	; 0x178 <wait_LCD>
	#endif	
}
     202:	08 95       	ret

00000204 <move_LCD>:
void move_LCD(uint8_t y,uint8_t x){
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; //
	cbi(CTRL,RS); // the following data is COMMAND
     204:	d9 98       	cbi	0x1b, 1	; 27
		wait_LCD();
	#endif	
}
void move_LCD(uint8_t y,uint8_t x){
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; //
     206:	82 95       	swap	r24
     208:	88 0f       	add	r24, r24
     20a:	88 0f       	add	r24, r24
     20c:	80 7c       	andi	r24, 0xC0	; 192
     20e:	86 0f       	add	r24, r22
	cbi(CTRL,RS); // the following data is COMMAND
	#ifdef LCD8BIT	
		Write8Bit(Ad);
		wait_LCD();
	#else
		Write2Nib(Ad);
     210:	81 5c       	subi	r24, 0xC1	; 193
     212:	0e 94 a9 00 	call	0x152	; 0x152 <Write2Nib>
		wait_LCD();
     216:	0e 94 bc 00 	call	0x178	; 0x178 <wait_LCD>
	#endif	
}
     21a:	08 95       	ret

0000021c <clr_LCD>:

void clr_LCD(){
	cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
     21c:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x01);
		wait_LCD();	
	#else
		Write2Nib(0x01);
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	0e 94 a9 00 	call	0x152	; 0x152 <Write2Nib>
		wait_LCD();	
     224:	0e 94 bc 00 	call	0x178	; 0x178 <wait_LCD>
		
	#endif	
}
     228:	08 95       	ret

0000022a <print_LCD>:
		Write2Nib(chr);
		wait_LCD();	
	#endif		
}

void print_LCD(char* str){
     22a:	1f 93       	push	r17
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	ec 01       	movw	r28, r24
	 unsigned char i;
	 for (i=0; str[i]!=0; i++) putChar_LCD(str[i]);	 
     232:	88 81       	ld	r24, Y
     234:	88 23       	and	r24, r24
     236:	51 f0       	breq	.+20     	; 0x24c <print_LCD+0x22>
     238:	10 e0       	ldi	r17, 0x00	; 0
     23a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
     23e:	1f 5f       	subi	r17, 0xFF	; 255
     240:	fe 01       	movw	r30, r28
     242:	e1 0f       	add	r30, r17
     244:	f1 1d       	adc	r31, r1
     246:	80 81       	ld	r24, Z
     248:	88 23       	and	r24, r24
     24a:	b9 f7       	brne	.-18     	; 0x23a <print_LCD+0x10>
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	1f 91       	pop	r17
     252:	08 95       	ret

00000254 <TWI_Init>:
#define TWI_Clear_TWINT	(1<<TWINT)|(1<<TWEN)		    //0x84 : xoa TWIN de bat dau doc, doc xong thi NOT ACK
#define TWI_Read_ACK	(1<<TWINT)|(1<<TWEN)|(1<<TWEA)	//0xC4 : xoa TWIN de bat dau doc, sau khi doc set ACK

//Khoi dong TWI
void TWI_Init(void){
	TWSR=0x00; //Prescaler=1
     254:	11 b8       	out	0x01, r1	; 1
	TWBR=_100K;
     256:	80 e2       	ldi	r24, 0x20	; 32
     258:	80 b9       	out	0x00, r24	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);
     25a:	84 e8       	ldi	r24, 0x84	; 132
     25c:	86 bf       	out	0x36, r24	; 54
}
     25e:	08 95       	ret

00000260 <TWI_DS1307_wadr>:

///chon dia chi thanh ghi can thao tac, dummy write
//Addr: dia thi thanh ghi can ghi
uint8_t TWI_DS1307_wadr(uint8_t Addr){ 
		
	TWCR=TWI_START;						 //goi START condition
     260:	94 ea       	ldi	r25, 0xA4	; 164
     262:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
     264:	06 b6       	in	r0, 0x36	; 54
     266:	07 fe       	sbrs	r0, 7
     268:	fd cf       	rjmp	.-6      	; 0x264 <TWI_DS1307_wadr+0x4>
	if((TWSR&0xF8) !=0x08) return TWSR; //neu goi Start co loi thi thoat
     26a:	91 b1       	in	r25, 0x01	; 1
     26c:	98 7f       	andi	r25, 0xF8	; 248
     26e:	98 30       	cpi	r25, 0x08	; 8
     270:	11 f0       	breq	.+4      	; 0x276 <TWI_DS1307_wadr+0x16>
     272:	81 b1       	in	r24, 0x01	; 1
     274:	08 95       	ret
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 		 //dia chi DS va bit W 	
     276:	90 ed       	ldi	r25, 0xD0	; 208
     278:	93 b9       	out	0x03, r25	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT, bat dau goi SLA
     27a:	94 e8       	ldi	r25, 0x84	; 132
     27c:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
     27e:	06 b6       	in	r0, 0x36	; 54
     280:	07 fe       	sbrs	r0, 7
     282:	fd cf       	rjmp	.-6      	; 0x27e <TWI_DS1307_wadr+0x1e>
	if((TWSR&0xF8) !=0x18) return TWSR; //device address send error, escape anyway
     284:	91 b1       	in	r25, 0x01	; 1
     286:	98 7f       	andi	r25, 0xF8	; 248
     288:	98 31       	cpi	r25, 0x18	; 24
     28a:	11 f0       	breq	.+4      	; 0x290 <TWI_DS1307_wadr+0x30>
     28c:	81 b1       	in	r24, 0x01	; 1
     28e:	08 95       	ret
		
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
     290:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 				 //start send address by cleaning TWINT
     292:	84 e8       	ldi	r24, 0x84	; 132
     294:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
     296:	06 b6       	in	r0, 0x36	; 54
     298:	07 fe       	sbrs	r0, 7
     29a:	fd cf       	rjmp	.-6      	; 0x296 <TWI_DS1307_wadr+0x36>
	if((TWSR&0xF8) !=0x28) return TWSR; //neu du lieu goi ko thanh cong thi thoat
     29c:	81 b1       	in	r24, 0x01	; 1
     29e:	88 7f       	andi	r24, 0xF8	; 248
     2a0:	88 32       	cpi	r24, 0x28	; 40
     2a2:	11 f0       	breq	.+4      	; 0x2a8 <TWI_DS1307_wadr+0x48>
     2a4:	81 b1       	in	r24, 0x01	; 1
     2a6:	08 95       	ret
	
	TWCR=TWI_STOP;					     //STOP condition
     2a8:	84 e9       	ldi	r24, 0x94	; 148
     2aa:	86 bf       	out	0x36, r24	; 54
	return 0;
     2ac:	80 e0       	ldi	r24, 0x00	; 0
}
     2ae:	08 95       	ret

000002b0 <TWI_DS1307_wblock>:
//Addr: dia thi thanh ghi can ghi
//Data[]: mang du lieu
//len: so luong byte can ghi
uint8_t TWI_DS1307_wblock(uint8_t Addr, uint8_t Data[], uint8_t len){
		
	TWCR=TWI_START; 					 //goi START condition
     2b0:	94 ea       	ldi	r25, 0xA4	; 164
     2b2:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
     2b4:	06 b6       	in	r0, 0x36	; 54
     2b6:	07 fe       	sbrs	r0, 7
     2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <TWI_DS1307_wblock+0x4>
	if((TWSR&0xF8) !=0x08) return TWSR; //neu goi Start co loi thi thoat
     2ba:	91 b1       	in	r25, 0x01	; 1
     2bc:	98 7f       	andi	r25, 0xF8	; 248
     2be:	98 30       	cpi	r25, 0x08	; 8
     2c0:	11 f0       	breq	.+4      	; 0x2c6 <TWI_DS1307_wblock+0x16>
     2c2:	81 b1       	in	r24, 0x01	; 1
     2c4:	08 95       	ret
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 		 //dia chi DS va bit W 	
     2c6:	90 ed       	ldi	r25, 0xD0	; 208
     2c8:	93 b9       	out	0x03, r25	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
     2ca:	94 e8       	ldi	r25, 0x84	; 132
     2cc:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
     2ce:	06 b6       	in	r0, 0x36	; 54
     2d0:	07 fe       	sbrs	r0, 7
     2d2:	fd cf       	rjmp	.-6      	; 0x2ce <TWI_DS1307_wblock+0x1e>
	if((TWSR&0xF8) !=0x18) return TWSR; //neu co loi truyen SLA, thoat
     2d4:	91 b1       	in	r25, 0x01	; 1
     2d6:	98 7f       	andi	r25, 0xF8	; 248
     2d8:	98 31       	cpi	r25, 0x18	; 24
     2da:	11 f0       	breq	.+4      	; 0x2e0 <TWI_DS1307_wblock+0x30>
     2dc:	81 b1       	in	r24, 0x01	; 1
     2de:	08 95       	ret
	
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
     2e0:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
     2e2:	84 e8       	ldi	r24, 0x84	; 132
     2e4:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
     2e6:	06 b6       	in	r0, 0x36	; 54
     2e8:	07 fe       	sbrs	r0, 7
     2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <TWI_DS1307_wblock+0x36>
	if((TWSR&0xF8) !=0x28) return TWSR; 
     2ec:	81 b1       	in	r24, 0x01	; 1
     2ee:	88 7f       	andi	r24, 0xF8	; 248
     2f0:	88 32       	cpi	r24, 0x28	; 40
     2f2:	19 f4       	brne	.+6      	; 0x2fa <TWI_DS1307_wblock+0x4a>

	for (uint8_t i=0; i <len; i++){
     2f4:	44 23       	and	r20, r20
     2f6:	19 f4       	brne	.+6      	; 0x2fe <TWI_DS1307_wblock+0x4e>
     2f8:	16 c0       	rjmp	.+44     	; 0x326 <TWI_DS1307_wblock+0x76>
	if((TWSR&0xF8) !=0x18) return TWSR; //neu co loi truyen SLA, thoat
	
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x28) return TWSR; 
     2fa:	81 b1       	in	r24, 0x01	; 1
     2fc:	08 95       	ret
     2fe:	26 2f       	mov	r18, r22

	for (uint8_t i=0; i <len; i++){
     300:	e6 2f       	mov	r30, r22
     302:	f7 2f       	mov	r31, r23
		TWDR=Data[i]; 						 //chuan bi xuat du lieu
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
     304:	94 e8       	ldi	r25, 0x84	; 132
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x28) return TWSR; 

	for (uint8_t i=0; i <len; i++){
		TWDR=Data[i]; 						 //chuan bi xuat du lieu
     306:	81 91       	ld	r24, Z+
     308:	83 b9       	out	0x03, r24	; 3
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
     30a:	96 bf       	out	0x36, r25	; 54
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
     30c:	06 b6       	in	r0, 0x36	; 54
     30e:	07 fe       	sbrs	r0, 7
     310:	fd cf       	rjmp	.-6      	; 0x30c <TWI_DS1307_wblock+0x5c>
		if((TWSR&0xF8) !=0x28) return TWSR; //neu status ko phai la 0x28 thi return
     312:	81 b1       	in	r24, 0x01	; 1
     314:	88 7f       	andi	r24, 0xF8	; 248
     316:	88 32       	cpi	r24, 0x28	; 40
     318:	11 f0       	breq	.+4      	; 0x31e <TWI_DS1307_wblock+0x6e>
     31a:	81 b1       	in	r24, 0x01	; 1
     31c:	08 95       	ret
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x28) return TWSR; 

	for (uint8_t i=0; i <len; i++){
     31e:	8e 2f       	mov	r24, r30
     320:	82 1b       	sub	r24, r18
     322:	84 17       	cp	r24, r20
     324:	80 f3       	brcs	.-32     	; 0x306 <TWI_DS1307_wblock+0x56>
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
		if((TWSR&0xF8) !=0x28) return TWSR; //neu status ko phai la 0x28 thi return
	}
	
	TWCR=TWI_STOP;							 //STOP condition
     326:	84 e9       	ldi	r24, 0x94	; 148
     328:	86 bf       	out	0x36, r24	; 54
	return 0;
     32a:	80 e0       	ldi	r24, 0x00	; 0
}
     32c:	08 95       	ret

0000032e <TWI_DS1307_rblock>:

//doc 1 mang tu DS
uint8_t TWI_DS1307_rblock(uint8_t Data[], uint8_t len ){ 	
	uint8_t i;
	
	TWCR=TWI_START; // Start--------------------------------------------------------------------
     32e:	24 ea       	ldi	r18, 0xA4	; 164
     330:	26 bf       	out	0x36, r18	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x08));	 //cho TWINT bit=1 va goi START thanh cong
     332:	06 b6       	in	r0, 0x36	; 54
     334:	07 fe       	sbrs	r0, 7
     336:	fd cf       	rjmp	.-6      	; 0x332 <TWI_DS1307_rblock+0x4>
     338:	21 b1       	in	r18, 0x01	; 1
     33a:	28 7f       	andi	r18, 0xF8	; 248
     33c:	28 30       	cpi	r18, 0x08	; 8
     33e:	c9 f7       	brne	.-14     	; 0x332 <TWI_DS1307_rblock+0x4>
	
	TWDR=(DS1307_SLA<<1)+TWI_R; 							 //goi dia chi SLA +READ	
     340:	21 ed       	ldi	r18, 0xD1	; 209
     342:	23 b9       	out	0x03, r18	; 3
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
     344:	24 e8       	ldi	r18, 0x84	; 132
     346:	26 bf       	out	0x36, r18	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
     348:	06 b6       	in	r0, 0x36	; 54
     34a:	07 fe       	sbrs	r0, 7
     34c:	fd cf       	rjmp	.-6      	; 0x348 <TWI_DS1307_rblock+0x1a>
     34e:	21 b1       	in	r18, 0x01	; 1
     350:	28 7f       	andi	r18, 0xF8	; 248
     352:	20 34       	cpi	r18, 0x40	; 64
     354:	c9 f7       	brne	.-14     	; 0x348 <TWI_DS1307_rblock+0x1a>
	
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
     356:	46 2f       	mov	r20, r22
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	41 50       	subi	r20, 0x01	; 1
     35c:	50 40       	sbci	r21, 0x00	; 0
     35e:	14 16       	cp	r1, r20
     360:	15 06       	cpc	r1, r21
     362:	ac f4       	brge	.+42     	; 0x38e <TWI_DS1307_rblock+0x60>
     364:	70 e0       	ldi	r23, 0x00	; 0
       TWCR=TWI_Read_ACK; 									 //xoa TWINT,se goi ACK sau khi nhan moi byte
     366:	a4 ec       	ldi	r26, 0xC4	; 196
     368:	a6 bf       	out	0x36, r26	; 54
       while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x50));//cho TWINT bit=1 hoac nhan duoc ACK	   
     36a:	06 b6       	in	r0, 0x36	; 54
     36c:	07 fe       	sbrs	r0, 7
     36e:	fd cf       	rjmp	.-6      	; 0x36a <TWI_DS1307_rblock+0x3c>
     370:	21 b1       	in	r18, 0x01	; 1
     372:	28 7f       	andi	r18, 0xF8	; 248
     374:	20 35       	cpi	r18, 0x50	; 80
     376:	c9 f7       	brne	.-14     	; 0x36a <TWI_DS1307_rblock+0x3c>
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
     378:	23 b1       	in	r18, 0x03	; 3
     37a:	fc 01       	movw	r30, r24
     37c:	e7 0f       	add	r30, r23
     37e:	f1 1d       	adc	r31, r1
     380:	20 83       	st	Z, r18
	TWDR=(DS1307_SLA<<1)+TWI_R; 							 //goi dia chi SLA +READ	
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
	
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
     382:	7f 5f       	subi	r23, 0xFF	; 255
     384:	27 2f       	mov	r18, r23
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	24 17       	cp	r18, r20
     38a:	35 07       	cpc	r19, r21
     38c:	6c f3       	brlt	.-38     	; 0x368 <TWI_DS1307_rblock+0x3a>
       TWCR=TWI_Read_ACK; 									 //xoa TWINT,se goi ACK sau khi nhan moi byte
       while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x50));//cho TWINT bit=1 hoac nhan duoc ACK	   
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
    }
	//nhan byte cuoi
	TWCR=TWI_Clear_TWINT; 									 //xoa TWINT de nhan byte cuoi, sau do set NOT ACK
     38e:	24 e8       	ldi	r18, 0x84	; 132
     390:	26 bf       	out	0x36, r18	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x58));   //cho TWIN=1 hoac trang thai not ack	
     392:	06 b6       	in	r0, 0x36	; 54
     394:	07 fe       	sbrs	r0, 7
     396:	fd cf       	rjmp	.-6      	; 0x392 <TWI_DS1307_rblock+0x64>
     398:	21 b1       	in	r18, 0x01	; 1
     39a:	28 7f       	andi	r18, 0xF8	; 248
     39c:	28 35       	cpi	r18, 0x58	; 88
     39e:	c9 f7       	brne	.-14     	; 0x392 <TWI_DS1307_rblock+0x64>
	Data[len-1]=TWDR;
     3a0:	23 b1       	in	r18, 0x03	; 3
     3a2:	86 0f       	add	r24, r22
     3a4:	91 1d       	adc	r25, r1
     3a6:	fc 01       	movw	r30, r24
     3a8:	31 97       	sbiw	r30, 0x01	; 1
     3aa:	20 83       	st	Z, r18
	
	TWCR=TWI_STOP;											 //STOP condition
     3ac:	84 e9       	ldi	r24, 0x94	; 148
     3ae:	86 bf       	out	0x36, r24	; 54
	return 0;	
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	08 95       	ret

000003b4 <off_device>:

/*------------------------------------------------------------------------------------------------*/  

void off_device (uint8_t val)
{
	switch (val)
     3b4:	82 30       	cpi	r24, 0x02	; 2
     3b6:	61 f0       	breq	.+24     	; 0x3d0 <off_device+0x1c>
     3b8:	83 30       	cpi	r24, 0x03	; 3
     3ba:	18 f4       	brcc	.+6      	; 0x3c2 <off_device+0xe>
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	69 f4       	brne	.+26     	; 0x3da <off_device+0x26>
     3c0:	05 c0       	rjmp	.+10     	; 0x3cc <off_device+0x18>
     3c2:	83 30       	cpi	r24, 0x03	; 3
     3c4:	39 f0       	breq	.+14     	; 0x3d4 <off_device+0x20>
     3c6:	84 30       	cpi	r24, 0x04	; 4
     3c8:	41 f4       	brne	.+16     	; 0x3da <off_device+0x26>
     3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <off_device+0x24>
		{
			case 1:		setbit(PORTC,PORTC7); break;
     3cc:	af 9a       	sbi	0x15, 7	; 21
     3ce:	05 c0       	rjmp	.+10     	; 0x3da <off_device+0x26>
			case 2: 	setbit(PORTC,PORTC6); break;
     3d0:	ae 9a       	sbi	0x15, 6	; 21
     3d2:	03 c0       	rjmp	.+6      	; 0x3da <off_device+0x26>
			case 3: 	setbit(PORTC,PORTC5); break;
     3d4:	ad 9a       	sbi	0x15, 5	; 21
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <off_device+0x26>
			case 4: 	setbit(PORTC,PORTC4); break;
     3d8:	ac 9a       	sbi	0x15, 4	; 21
			default: break;
		}
	if(choise_device>0&&choise_device<5)	check_on_off(choise_device);
     3da:	80 91 30 01 	lds	r24, 0x0130
     3de:	98 2f       	mov	r25, r24
     3e0:	91 50       	subi	r25, 0x01	; 1
     3e2:	94 30       	cpi	r25, 0x04	; 4
     3e4:	18 f4       	brcc	.+6      	; 0x3ec <off_device+0x38>
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 21 09 	call	0x1242	; 0x1242 <check_on_off>
     3ec:	08 95       	ret

000003ee <on_device>:
}
void on_device (uint8_t val)
{
	switch (val)
     3ee:	82 30       	cpi	r24, 0x02	; 2
     3f0:	61 f0       	breq	.+24     	; 0x40a <on_device+0x1c>
     3f2:	83 30       	cpi	r24, 0x03	; 3
     3f4:	18 f4       	brcc	.+6      	; 0x3fc <on_device+0xe>
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	69 f4       	brne	.+26     	; 0x414 <on_device+0x26>
     3fa:	05 c0       	rjmp	.+10     	; 0x406 <on_device+0x18>
     3fc:	83 30       	cpi	r24, 0x03	; 3
     3fe:	39 f0       	breq	.+14     	; 0x40e <on_device+0x20>
     400:	84 30       	cpi	r24, 0x04	; 4
     402:	41 f4       	brne	.+16     	; 0x414 <on_device+0x26>
     404:	06 c0       	rjmp	.+12     	; 0x412 <on_device+0x24>
		{
			case 1:		clrbit(PORTC,PORTC7); break;
     406:	af 98       	cbi	0x15, 7	; 21
     408:	05 c0       	rjmp	.+10     	; 0x414 <on_device+0x26>
			case 2: 	clrbit(PORTC,PORTC6); break;
     40a:	ae 98       	cbi	0x15, 6	; 21
     40c:	03 c0       	rjmp	.+6      	; 0x414 <on_device+0x26>
			case 3: 	clrbit(PORTC,PORTC5); break;
     40e:	ad 98       	cbi	0x15, 5	; 21
     410:	01 c0       	rjmp	.+2      	; 0x414 <on_device+0x26>
			case 4: 	clrbit(PORTC,PORTC4); break;
     412:	ac 98       	cbi	0x15, 4	; 21
			default: break;
		}
	if(choise_device>0&&choise_device<5)	check_on_off(choise_device);
     414:	80 91 30 01 	lds	r24, 0x0130
     418:	98 2f       	mov	r25, r24
     41a:	91 50       	subi	r25, 0x01	; 1
     41c:	94 30       	cpi	r25, 0x04	; 4
     41e:	18 f4       	brcc	.+6      	; 0x426 <on_device+0x38>
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 21 09 	call	0x1242	; 0x1242 <check_on_off>
     426:	08 95       	ret

00000428 <init_arry_sms>:
}
/*------------------------------------------------------------------------------------------------*/
/*----------------------------------------SMS Last------------------------------------------------*/ 
void init_arry_sms()
{
	for(int i=0;i<160;i++)
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
		temp_sms[i]=32;
     42c:	20 e1       	ldi	r18, 0x10	; 16
     42e:	32 e0       	ldi	r19, 0x02	; 2
     430:	40 e2       	ldi	r20, 0x20	; 32
     432:	f9 01       	movw	r30, r18
     434:	e8 0f       	add	r30, r24
     436:	f9 1f       	adc	r31, r25
     438:	40 83       	st	Z, r20
}
/*------------------------------------------------------------------------------------------------*/
/*----------------------------------------SMS Last------------------------------------------------*/ 
void init_arry_sms()
{
	for(int i=0;i<160;i++)
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	80 3a       	cpi	r24, 0xA0	; 160
     43e:	91 05       	cpc	r25, r1
     440:	c1 f7       	brne	.-16     	; 0x432 <init_arry_sms+0xa>
		temp_sms[i]=32;
}
     442:	08 95       	ret

00000444 <sms_sync>:
void sms_sync()
{
	stdout=&uartstd;
     444:	80 e4       	ldi	r24, 0x40	; 64
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	90 93 58 03 	sts	0x0358, r25
     44c:	80 93 57 03 	sts	0x0357, r24
	printf("AT\r");
     450:	00 d0       	rcall	.+0      	; 0x452 <sms_sync+0xe>
     452:	80 e6       	ldi	r24, 0x60	; 96
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	ad b7       	in	r26, 0x3d	; 61
     458:	be b7       	in	r27, 0x3e	; 62
     45a:	12 96       	adiw	r26, 0x02	; 2
     45c:	9c 93       	st	X, r25
     45e:	8e 93       	st	-X, r24
     460:	11 97       	sbiw	r26, 0x01	; 1
     462:	0e 94 8f 10 	call	0x211e	; 0x211e <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     466:	8f e7       	ldi	r24, 0x7F	; 127
     468:	98 e3       	ldi	r25, 0x38	; 56
     46a:	a1 e0       	ldi	r26, 0x01	; 1
     46c:	81 50       	subi	r24, 0x01	; 1
     46e:	90 40       	sbci	r25, 0x00	; 0
     470:	a0 40       	sbci	r26, 0x00	; 0
     472:	e1 f7       	brne	.-8      	; 0x46c <sms_sync+0x28>
     474:	00 c0       	rjmp	.+0      	; 0x476 <sms_sync+0x32>
     476:	00 00       	nop
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
	_delay_ms(50);
	//printf("AT\r");
	//_delay_ms(5);
	//printf("AT\r");
	//_delay_ms(5);
}
     47c:	08 95       	ret

0000047e <send_sms>:
void send_sms()
{
	stdout=&uartstd;
     47e:	80 e4       	ldi	r24, 0x40	; 64
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	90 93 58 03 	sts	0x0358, r25
     486:	80 93 57 03 	sts	0x0357, r24
	sms_sync();
     48a:	0e 94 22 02 	call	0x444	; 0x444 <sms_sync>
	printf("AT+CMGS=\""PHONE_NUM"\"\r");
     48e:	00 d0       	rcall	.+0      	; 0x490 <send_sms+0x12>
     490:	84 e6       	ldi	r24, 0x64	; 100
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	ad b7       	in	r26, 0x3d	; 61
     496:	be b7       	in	r27, 0x3e	; 62
     498:	12 96       	adiw	r26, 0x02	; 2
     49a:	9c 93       	st	X, r25
     49c:	8e 93       	st	-X, r24
     49e:	11 97       	sbiw	r26, 0x01	; 1
     4a0:	0e 94 8f 10 	call	0x211e	; 0x211e <printf>
     4a4:	8f ef       	ldi	r24, 0xFF	; 255
     4a6:	90 e7       	ldi	r25, 0x70	; 112
     4a8:	a2 e0       	ldi	r26, 0x02	; 2
     4aa:	81 50       	subi	r24, 0x01	; 1
     4ac:	90 40       	sbci	r25, 0x00	; 0
     4ae:	a0 40       	sbci	r26, 0x00	; 0
     4b0:	e1 f7       	brne	.-8      	; 0x4aa <send_sms+0x2c>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <send_sms+0x36>
     4b4:	00 00       	nop
	_delay_ms(100);
	printf("SIM548C Ready!!!");
     4b6:	8a e7       	ldi	r24, 0x7A	; 122
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	ad b7       	in	r26, 0x3d	; 61
     4bc:	be b7       	in	r27, 0x3e	; 62
     4be:	12 96       	adiw	r26, 0x02	; 2
     4c0:	9c 93       	st	X, r25
     4c2:	8e 93       	st	-X, r24
     4c4:	11 97       	sbiw	r26, 0x01	; 1
     4c6:	0e 94 8f 10 	call	0x211e	; 0x211e <printf>
	putchar(0x1A);
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	60 91 57 03 	lds	r22, 0x0357
     4d2:	70 91 58 03 	lds	r23, 0x0358
     4d6:	8a e1       	ldi	r24, 0x1A	; 26
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 63 10 	call	0x20c6	; 0x20c6 <fputc>
     4de:	ef e1       	ldi	r30, 0x1F	; 31
     4e0:	fe e4       	ldi	r31, 0x4E	; 78
     4e2:	31 97       	sbiw	r30, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <send_sms+0x64>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <send_sms+0x6a>
     4e8:	00 00       	nop
	_delay_ms(10);	
}
     4ea:	08 95       	ret

000004ec <send_alarm_sms>:

void send_alarm_sms()
{
	stdout=&uartstd;
     4ec:	80 e4       	ldi	r24, 0x40	; 64
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	90 93 58 03 	sts	0x0358, r25
     4f4:	80 93 57 03 	sts	0x0357, r24
	sms_sync();
     4f8:	0e 94 22 02 	call	0x444	; 0x444 <sms_sync>
	printf("AT+CMGS=\""PHONE_NUM"\"\r");
     4fc:	00 d0       	rcall	.+0      	; 0x4fe <send_alarm_sms+0x12>
     4fe:	84 e6       	ldi	r24, 0x64	; 100
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	ad b7       	in	r26, 0x3d	; 61
     504:	be b7       	in	r27, 0x3e	; 62
     506:	12 96       	adiw	r26, 0x02	; 2
     508:	9c 93       	st	X, r25
     50a:	8e 93       	st	-X, r24
     50c:	11 97       	sbiw	r26, 0x01	; 1
     50e:	0e 94 8f 10 	call	0x211e	; 0x211e <printf>
     512:	8f ef       	ldi	r24, 0xFF	; 255
     514:	90 e7       	ldi	r25, 0x70	; 112
     516:	a2 e0       	ldi	r26, 0x02	; 2
     518:	81 50       	subi	r24, 0x01	; 1
     51a:	90 40       	sbci	r25, 0x00	; 0
     51c:	a0 40       	sbci	r26, 0x00	; 0
     51e:	e1 f7       	brne	.-8      	; 0x518 <send_alarm_sms+0x2c>
     520:	00 c0       	rjmp	.+0      	; 0x522 <send_alarm_sms+0x36>
     522:	00 00       	nop
	_delay_ms(100);
	printf("CANH BAO NHIET DO QUA CAO");
     524:	8b e8       	ldi	r24, 0x8B	; 139
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	ad b7       	in	r26, 0x3d	; 61
     52a:	be b7       	in	r27, 0x3e	; 62
     52c:	12 96       	adiw	r26, 0x02	; 2
     52e:	9c 93       	st	X, r25
     530:	8e 93       	st	-X, r24
     532:	11 97       	sbiw	r26, 0x01	; 1
     534:	0e 94 8f 10 	call	0x211e	; 0x211e <printf>
	putchar(0x1A);
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	60 91 57 03 	lds	r22, 0x0357
     540:	70 91 58 03 	lds	r23, 0x0358
     544:	8a e1       	ldi	r24, 0x1A	; 26
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 63 10 	call	0x20c6	; 0x20c6 <fputc>
     54c:	ef e1       	ldi	r30, 0x1F	; 31
     54e:	fe e4       	ldi	r31, 0x4E	; 78
     550:	31 97       	sbiw	r30, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <send_alarm_sms+0x64>
     554:	00 c0       	rjmp	.+0      	; 0x556 <send_alarm_sms+0x6a>
     556:	00 00       	nop
	_delay_ms(10);
	hanche_sms=5;
     558:	85 e0       	ldi	r24, 0x05	; 5
     55a:	80 93 59 01 	sts	0x0159, r24
}
     55e:	08 95       	ret

00000560 <sms_recv>:

void sms_recv()
{
	sms_sync();
     560:	0e 94 22 02 	call	0x444	; 0x444 <sms_sync>
	printf("AT+CMGR=1\r");
     564:	00 d0       	rcall	.+0      	; 0x566 <sms_recv+0x6>
     566:	85 ea       	ldi	r24, 0xA5	; 165
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	ad b7       	in	r26, 0x3d	; 61
     56c:	be b7       	in	r27, 0x3e	; 62
     56e:	12 96       	adiw	r26, 0x02	; 2
     570:	9c 93       	st	X, r25
     572:	8e 93       	st	-X, r24
     574:	11 97       	sbiw	r26, 0x01	; 1
     576:	0e 94 8f 10 	call	0x211e	; 0x211e <printf>
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	90 e7       	ldi	r25, 0x70	; 112
     57e:	a2 e0       	ldi	r26, 0x02	; 2
     580:	81 50       	subi	r24, 0x01	; 1
     582:	90 40       	sbci	r25, 0x00	; 0
     584:	a0 40       	sbci	r26, 0x00	; 0
     586:	e1 f7       	brne	.-8      	; 0x580 <sms_recv+0x20>
     588:	00 c0       	rjmp	.+0      	; 0x58a <sms_recv+0x2a>
     58a:	00 00       	nop
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
	_delay_ms(100);
}
     590:	08 95       	ret

00000592 <sms_del>:

void sms_del()
{
	stdout=&uartstd;
     592:	80 e4       	ldi	r24, 0x40	; 64
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	90 93 58 03 	sts	0x0358, r25
     59a:	80 93 57 03 	sts	0x0357, r24
//	sms_sync();
	printf("AT+CMGD=1\r");
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <sms_del+0xe>
     5a0:	80 eb       	ldi	r24, 0xB0	; 176
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	ed b7       	in	r30, 0x3d	; 61
     5a6:	fe b7       	in	r31, 0x3e	; 62
     5a8:	92 83       	std	Z+2, r25	; 0x02
     5aa:	81 83       	std	Z+1, r24	; 0x01
     5ac:	0e 94 8f 10 	call	0x211e	; 0x211e <printf>
     5b0:	8f e1       	ldi	r24, 0x1F	; 31
     5b2:	9e e4       	ldi	r25, 0x4E	; 78
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <sms_del+0x22>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <sms_del+0x28>
     5ba:	00 00       	nop
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
	_delay_ms(10);
}
     5c0:	08 95       	ret

000005c2 <state_sms>:

void state_sms()
{
     5c2:	cf 92       	push	r12
     5c4:	df 92       	push	r13
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	df 93       	push	r29
     5d0:	cf 93       	push	r28
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	2a 97       	sbiw	r28, 0x0a	; 10
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	de 01       	movw	r26, r28
     5e4:	17 96       	adiw	r26, 0x07	; 7
     5e6:	cc 24       	eor	r12, r12
     5e8:	dd 24       	eor	r13, r13
     5ea:	68 94       	set
     5ec:	c1 f8       	bld	r12, 1
     5ee:	cc 0e       	add	r12, r28
     5f0:	dd 1e       	adc	r13, r29
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t state_dev[5],state_set[5],time_dev[5];
	for(uint8_t i=1;i<=4;i++)
		{
		if(state_count[i]==240)
     5f6:	03 e6       	ldi	r16, 0x63	; 99
     5f8:	11 e0       	ldi	r17, 0x01	; 1
			state_set[i]=1;
     5fa:	ff 24       	eor	r15, r15
     5fc:	f3 94       	inc	r15
		else
			state_set[i]=0;	
		if(countdown_min[i]<=240)
     5fe:	6e e5       	ldi	r22, 0x5E	; 94
     600:	71 e0       	ldi	r23, 0x01	; 1
//	sms_sync();
	printf("AT+CMGD=1\r");
	_delay_ms(10);
}

void state_sms()
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	9c 01       	movw	r18, r24
{
	uint8_t state_dev[5],state_set[5],time_dev[5];
	for(uint8_t i=1;i<=4;i++)
		{
		if(state_count[i]==240)
     606:	a8 01       	movw	r20, r16
     608:	48 0f       	add	r20, r24
     60a:	59 1f       	adc	r21, r25
     60c:	fa 01       	movw	r30, r20
     60e:	40 81       	ld	r20, Z
     610:	40 3f       	cpi	r20, 0xF0	; 240
     612:	19 f4       	brne	.+6      	; 0x61a <state_sms+0x58>
			state_set[i]=1;
     614:	f6 01       	movw	r30, r12
     616:	f0 82       	st	Z, r15
     618:	02 c0       	rjmp	.+4      	; 0x61e <state_sms+0x5c>
		else
			state_set[i]=0;	
     61a:	f6 01       	movw	r30, r12
     61c:	10 82       	st	Z, r1
		if(countdown_min[i]<=240)
     61e:	ab 01       	movw	r20, r22
     620:	42 0f       	add	r20, r18
     622:	53 1f       	adc	r21, r19
     624:	fa 01       	movw	r30, r20
     626:	40 81       	ld	r20, Z
     628:	41 3f       	cpi	r20, 0xF1	; 241
     62a:	18 f4       	brcc	.+6      	; 0x632 <state_sms+0x70>
			time_dev[i]=countdown_min[i];
     62c:	20 81       	ld	r18, Z
     62e:	2c 93       	st	X, r18
     630:	01 c0       	rjmp	.+2      	; 0x634 <state_sms+0x72>
		else
			time_dev[i]=0;
     632:	1c 92       	st	X, r1
     634:	11 96       	adiw	r26, 0x01	; 1
     636:	08 94       	sec
     638:	c1 1c       	adc	r12, r1
     63a:	d1 1c       	adc	r13, r1
}

void state_sms()
{
	uint8_t state_dev[5],state_set[5],time_dev[5];
	for(uint8_t i=1;i<=4;i++)
     63c:	84 30       	cpi	r24, 0x04	; 4
     63e:	91 05       	cpc	r25, r1
     640:	01 f7       	brne	.-64     	; 0x602 <state_sms+0x40>
		if(countdown_min[i]<=240)
			time_dev[i]=countdown_min[i];
		else
			time_dev[i]=0;
		}					
	if(bit_is_clear(PORTC,PINC7))	
     642:	e5 b2       	in	r14, 0x15	; 21
		state_dev[1]=1; //ON
	else	
		state_dev[1]=0; //OFF
	if(bit_is_clear(PORTC,PINC6))	
     644:	f5 b2       	in	r15, 0x15	; 21
		state_dev[2]=1; //ON
	else	
		state_dev[2]=0; //OFF	
	if(bit_is_clear(PORTC,PINC5))	
     646:	05 b3       	in	r16, 0x15	; 21
		state_dev[3]=1; //ON
	else	
		state_dev[3]=0; //OFF	
	if(bit_is_clear(PORTC,PINC4))	
     648:	15 b3       	in	r17, 0x15	; 21
		state_dev[4]=1; //ON
	else	
		state_dev[4]=0; //OFF
	stdout=&uartstd;
     64a:	80 e4       	ldi	r24, 0x40	; 64
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	90 93 58 03 	sts	0x0358, r25
     652:	80 93 57 03 	sts	0x0357, r24
	sms_sync();
     656:	0e 94 22 02 	call	0x444	; 0x444 <sms_sync>
	printf("AT+CMGS=\""PHONE_NUM"\"\r");
     65a:	00 d0       	rcall	.+0      	; 0x65c <state_sms+0x9a>
     65c:	84 e6       	ldi	r24, 0x64	; 100
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	ad b7       	in	r26, 0x3d	; 61
     662:	be b7       	in	r27, 0x3e	; 62
     664:	12 96       	adiw	r26, 0x02	; 2
     666:	9c 93       	st	X, r25
     668:	8e 93       	st	-X, r24
     66a:	11 97       	sbiw	r26, 0x01	; 1
     66c:	0e 94 8f 10 	call	0x211e	; 0x211e <printf>
     670:	8f ef       	ldi	r24, 0xFF	; 255
     672:	90 e7       	ldi	r25, 0x70	; 112
     674:	a2 e0       	ldi	r26, 0x02	; 2
     676:	81 50       	subi	r24, 0x01	; 1
     678:	90 40       	sbci	r25, 0x00	; 0
     67a:	a0 40       	sbci	r26, 0x00	; 0
     67c:	e1 f7       	brne	.-8      	; 0x676 <state_sms+0xb4>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <state_sms+0xbe>
     680:	00 00       	nop
	_delay_ms(100);
	//Demo: TB1: 1 15 0 =>TB1 Dang Bat Hen gio Tat sau 15p
	printf("TB%d: %d %d %d\rTB%d: %d %d %d\rTB%d: %d %d %d\rTB%d: %d %d %d\r",1,state_dev[1],time_dev[1],state_set[1],2,state_dev[2],time_dev[2],state_set[2],3,state_dev[3],time_dev[3],state_set[3],4,state_dev[4],time_dev[4],state_set[4]);
     682:	ad b7       	in	r26, 0x3d	; 61
     684:	be b7       	in	r27, 0x3e	; 62
     686:	90 97       	sbiw	r26, 0x20	; 32
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	be bf       	out	0x3e, r27	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	ad bf       	out	0x3d, r26	; 61
     692:	ed b7       	in	r30, 0x3d	; 61
     694:	fe b7       	in	r31, 0x3e	; 62
     696:	31 96       	adiw	r30, 0x01	; 1
     698:	8b eb       	ldi	r24, 0xBB	; 187
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	12 96       	adiw	r26, 0x02	; 2
     69e:	9c 93       	st	X, r25
     6a0:	8e 93       	st	-X, r24
     6a2:	11 97       	sbiw	r26, 0x01	; 1
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	93 83       	std	Z+3, r25	; 0x03
     6aa:	82 83       	std	Z+2, r24	; 0x02
     6ac:	8e 2d       	mov	r24, r14
     6ae:	99 27       	eor	r25, r25
     6b0:	87 fd       	sbrc	r24, 7
     6b2:	90 95       	com	r25
     6b4:	80 95       	com	r24
     6b6:	90 95       	com	r25
     6b8:	89 2f       	mov	r24, r25
     6ba:	88 1f       	adc	r24, r24
     6bc:	88 27       	eor	r24, r24
     6be:	88 1f       	adc	r24, r24
     6c0:	84 83       	std	Z+4, r24	; 0x04
     6c2:	15 82       	std	Z+5, r1	; 0x05
     6c4:	8f 81       	ldd	r24, Y+7	; 0x07
     6c6:	86 83       	std	Z+6, r24	; 0x06
     6c8:	17 82       	std	Z+7, r1	; 0x07
     6ca:	8a 81       	ldd	r24, Y+2	; 0x02
     6cc:	80 87       	std	Z+8, r24	; 0x08
     6ce:	11 86       	std	Z+9, r1	; 0x09
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	93 87       	std	Z+11, r25	; 0x0b
     6d6:	82 87       	std	Z+10, r24	; 0x0a
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	f6 fe       	sbrs	r15, 6
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <state_sms+0x122>
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	95 87       	std	Z+13, r25	; 0x0d
     6e6:	84 87       	std	Z+12, r24	; 0x0c
     6e8:	88 85       	ldd	r24, Y+8	; 0x08
     6ea:	86 87       	std	Z+14, r24	; 0x0e
     6ec:	17 86       	std	Z+15, r1	; 0x0f
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	80 8b       	std	Z+16, r24	; 0x10
     6f2:	11 8a       	std	Z+17, r1	; 0x11
     6f4:	83 e0       	ldi	r24, 0x03	; 3
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	93 8b       	std	Z+19, r25	; 0x13
     6fa:	82 8b       	std	Z+18, r24	; 0x12
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	05 ff       	sbrs	r16, 5
     702:	02 c0       	rjmp	.+4      	; 0x708 <state_sms+0x146>
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	95 8b       	std	Z+21, r25	; 0x15
     70a:	84 8b       	std	Z+20, r24	; 0x14
     70c:	89 85       	ldd	r24, Y+9	; 0x09
     70e:	86 8b       	std	Z+22, r24	; 0x16
     710:	17 8a       	std	Z+23, r1	; 0x17
     712:	8c 81       	ldd	r24, Y+4	; 0x04
     714:	80 8f       	std	Z+24, r24	; 0x18
     716:	11 8e       	std	Z+25, r1	; 0x19
     718:	84 e0       	ldi	r24, 0x04	; 4
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	93 8f       	std	Z+27, r25	; 0x1b
     71e:	82 8f       	std	Z+26, r24	; 0x1a
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	14 ff       	sbrs	r17, 4
     726:	02 c0       	rjmp	.+4      	; 0x72c <state_sms+0x16a>
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	95 8f       	std	Z+29, r25	; 0x1d
     72e:	84 8f       	std	Z+28, r24	; 0x1c
     730:	8a 85       	ldd	r24, Y+10	; 0x0a
     732:	86 8f       	std	Z+30, r24	; 0x1e
     734:	17 8e       	std	Z+31, r1	; 0x1f
     736:	8d 81       	ldd	r24, Y+5	; 0x05
     738:	80 a3       	std	Z+32, r24	; 0x20
     73a:	11 a2       	std	Z+33, r1	; 0x21
     73c:	0e 94 8f 10 	call	0x211e	; 0x211e <printf>
	putchar(0x1A);
     740:	ed b7       	in	r30, 0x3d	; 61
     742:	fe b7       	in	r31, 0x3e	; 62
     744:	b2 96       	adiw	r30, 0x22	; 34
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	fe bf       	out	0x3e, r31	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	ed bf       	out	0x3d, r30	; 61
     750:	60 91 57 03 	lds	r22, 0x0357
     754:	70 91 58 03 	lds	r23, 0x0358
     758:	8a e1       	ldi	r24, 0x1A	; 26
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 63 10 	call	0x20c6	; 0x20c6 <fputc>
     760:	8f e1       	ldi	r24, 0x1F	; 31
     762:	9e e4       	ldi	r25, 0x4E	; 78
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <state_sms+0x1a2>
     768:	00 c0       	rjmp	.+0      	; 0x76a <state_sms+0x1a8>
     76a:	00 00       	nop
	_delay_ms(10);			
}
     76c:	2a 96       	adiw	r28, 0x0a	; 10
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	cf 91       	pop	r28
     77a:	df 91       	pop	r29
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	08 95       	ret

0000078a <ok_sms>:

void ok_sms()
{
	clrbit(PORTC,PORTC3);	
     78a:	ab 98       	cbi	0x15, 3	; 21
     78c:	8f ef       	ldi	r24, 0xFF	; 255
     78e:	90 e7       	ldi	r25, 0x70	; 112
     790:	a2 e0       	ldi	r26, 0x02	; 2
     792:	81 50       	subi	r24, 0x01	; 1
     794:	90 40       	sbci	r25, 0x00	; 0
     796:	a0 40       	sbci	r26, 0x00	; 0
     798:	e1 f7       	brne	.-8      	; 0x792 <ok_sms+0x8>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <ok_sms+0x12>
     79c:	00 00       	nop
	_delay_ms(100);
	setbit(PORTC,PORTC3);
     79e:	ab 9a       	sbi	0x15, 3	; 21
}
     7a0:	08 95       	ret

000007a2 <process_symbol_sms>:

void process_symbol_sms()
{
     7a2:	3f 92       	push	r3
     7a4:	4f 92       	push	r4
     7a6:	5f 92       	push	r5
     7a8:	6f 92       	push	r6
     7aa:	7f 92       	push	r7
     7ac:	8f 92       	push	r8
     7ae:	9f 92       	push	r9
     7b0:	af 92       	push	r10
     7b2:	bf 92       	push	r11
     7b4:	cf 92       	push	r12
     7b6:	df 92       	push	r13
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
	int cn=0;
	stdout=&lcdstd;
     7c4:	82 e3       	ldi	r24, 0x32	; 50
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	90 93 58 03 	sts	0x0358, r25
     7cc:	80 93 57 03 	sts	0x0357, r24
	char symbol;
	//clr_LCD();
	//move_LCD(1,1);
	for(int i=0;i<dem_kt-4;i++)
     7d0:	80 91 4f 01 	lds	r24, 0x014F
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	04 97       	sbiw	r24, 0x04	; 4
     7d8:	18 16       	cp	r1, r24
     7da:	19 06       	cpc	r1, r25
     7dc:	7c f5       	brge	.+94     	; 0x83c <process_symbol_sms+0x9a>
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
	setbit(PORTC,PORTC3);
}

void process_symbol_sms()
{
	int cn=0;
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	50 e0       	ldi	r21, 0x00	; 0
	char symbol;
	//clr_LCD();
	//move_LCD(1,1);
	for(int i=0;i<dem_kt-4;i++)
		{
			symbol=temp_sms[i];
     7e6:	60 e1       	ldi	r22, 0x10	; 16
     7e8:	72 e0       	ldi	r23, 0x02	; 2
			if(symbol==34) cn++;
			if((cn==8) && (symbol!=34) && (symbol>=32))
				{
					control_device[++control_counter]=symbol;
     7ea:	a8 e6       	ldi	r26, 0x68	; 104
     7ec:	b1 e0       	ldi	r27, 0x01	; 1
	char symbol;
	//clr_LCD();
	//move_LCD(1,1);
	for(int i=0;i<dem_kt-4;i++)
		{
			symbol=temp_sms[i];
     7ee:	fb 01       	movw	r30, r22
     7f0:	e8 0f       	add	r30, r24
     7f2:	f9 1f       	adc	r31, r25
     7f4:	20 81       	ld	r18, Z
			if(symbol==34) cn++;
     7f6:	22 32       	cpi	r18, 0x22	; 34
     7f8:	11 f4       	brne	.+4      	; 0x7fe <process_symbol_sms+0x5c>
     7fa:	4f 5f       	subi	r20, 0xFF	; 255
     7fc:	5f 4f       	sbci	r21, 0xFF	; 255
			if((cn==8) && (symbol!=34) && (symbol>=32))
     7fe:	48 30       	cpi	r20, 0x08	; 8
     800:	51 05       	cpc	r21, r1
     802:	99 f4       	brne	.+38     	; 0x82a <process_symbol_sms+0x88>
     804:	22 32       	cpi	r18, 0x22	; 34
     806:	89 f0       	breq	.+34     	; 0x82a <process_symbol_sms+0x88>
     808:	20 32       	cpi	r18, 0x20	; 32
     80a:	78 f0       	brcs	.+30     	; 0x82a <process_symbol_sms+0x88>
				{
					control_device[++control_counter]=symbol;
     80c:	30 91 4e 01 	lds	r19, 0x014E
     810:	3f 5f       	subi	r19, 0xFF	; 255
     812:	30 93 4e 01 	sts	0x014E, r19
     816:	fd 01       	movw	r30, r26
     818:	e3 0f       	add	r30, r19
     81a:	f1 1d       	adc	r31, r1
     81c:	20 83       	st	Z, r18
     81e:	ef e5       	ldi	r30, 0x5F	; 95
     820:	fa ee       	ldi	r31, 0xEA	; 234
     822:	31 97       	sbiw	r30, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <process_symbol_sms+0x80>
     826:	00 c0       	rjmp	.+0      	; 0x828 <process_symbol_sms+0x86>
     828:	00 00       	nop
	int cn=0;
	stdout=&lcdstd;
	char symbol;
	//clr_LCD();
	//move_LCD(1,1);
	for(int i=0;i<dem_kt-4;i++)
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	20 91 4f 01 	lds	r18, 0x014F
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	24 50       	subi	r18, 0x04	; 4
     834:	30 40       	sbci	r19, 0x00	; 0
     836:	82 17       	cp	r24, r18
     838:	93 07       	cpc	r25, r19
     83a:	cc f2       	brlt	.-78     	; 0x7ee <process_symbol_sms+0x4c>
				//	putChar_LCD(symbol);
					_delay_ms(30);
				}
		}
	// SMS check
	if(control_counter==5&&control_device[1]=='c'&&control_device[2]=='h'&&control_device[3]=='e'&&control_device[4]=='c'&&control_device[5]=='k')
     83c:	80 91 4e 01 	lds	r24, 0x014E
     840:	85 30       	cpi	r24, 0x05	; 5
     842:	c1 f4       	brne	.+48     	; 0x874 <__stack+0x15>
     844:	80 91 69 01 	lds	r24, 0x0169
     848:	83 36       	cpi	r24, 0x63	; 99
     84a:	a1 f4       	brne	.+40     	; 0x874 <__stack+0x15>
     84c:	80 91 6a 01 	lds	r24, 0x016A
     850:	88 36       	cpi	r24, 0x68	; 104
     852:	81 f4       	brne	.+32     	; 0x874 <__stack+0x15>
     854:	80 91 6b 01 	lds	r24, 0x016B
     858:	85 36       	cpi	r24, 0x65	; 101
     85a:	89 f4       	brne	.+34     	; 0x87e <__stack+0x1f>
     85c:	80 91 6c 01 	lds	r24, 0x016C
     860:	83 36       	cpi	r24, 0x63	; 99
     862:	69 f4       	brne	.+26     	; 0x87e <__stack+0x1f>
     864:	80 91 6d 01 	lds	r24, 0x016D
     868:	8b 36       	cpi	r24, 0x6B	; 107
     86a:	89 f4       	brne	.+34     	; 0x88e <__stack+0x2f>
		{
		state_sms();
     86c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <state_sms>
		ok_sms();
     870:	0e 94 c5 03 	call	0x78a	; 0x78a <ok_sms>
		}		
	// Command SMS ON/OFF
	if(control_counter>=4)
     874:	80 91 4e 01 	lds	r24, 0x014E
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	08 f4       	brcc	.+2      	; 0x87e <__stack+0x1f>
     87c:	cf c0       	rjmp	.+414    	; 0xa1c <__stack+0x1bd>
		{	
		if(control_device[2]=='n')
     87e:	80 91 6a 01 	lds	r24, 0x016A
     882:	8e 36       	cpi	r24, 0x6E	; 110
     884:	21 f4       	brne	.+8      	; 0x88e <__stack+0x2f>
			state_device=240;
     886:	80 ef       	ldi	r24, 0xF0	; 240
     888:	80 93 53 01 	sts	0x0153, r24
     88c:	06 c0       	rjmp	.+12     	; 0x89a <__stack+0x3b>
		else
			if(control_device[2]='f')
     88e:	86 e6       	ldi	r24, 0x66	; 102
     890:	80 93 6a 01 	sts	0x016A, r24
				state_device=15;
     894:	8f e0       	ldi	r24, 0x0F	; 15
     896:	80 93 53 01 	sts	0x0153, r24
		for(uint8_t i=3;i<=control_counter;i++)
     89a:	40 91 4e 01 	lds	r20, 0x014E
     89e:	43 30       	cpi	r20, 0x03	; 3
     8a0:	08 f1       	brcs	.+66     	; 0x8e4 <__stack+0x85>
     8a2:	50 91 50 01 	lds	r21, 0x0150
     8a6:	60 91 51 01 	lds	r22, 0x0151
     8aa:	23 e0       	ldi	r18, 0x03	; 3
			if(control_device[i]==42)
     8ac:	88 e6       	ldi	r24, 0x68	; 104
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	fc 01       	movw	r30, r24
     8b2:	e2 0f       	add	r30, r18
     8b4:	f1 1d       	adc	r31, r1
     8b6:	30 81       	ld	r19, Z
     8b8:	3a 32       	cpi	r19, 0x2A	; 42
     8ba:	69 f4       	brne	.+26     	; 0x8d6 <__stack+0x77>
				{
				option++;
     8bc:	5f 5f       	subi	r21, 0xFF	; 255
				if(option==1)
     8be:	51 30       	cpi	r21, 0x01	; 1
     8c0:	49 f0       	breq	.+18     	; 0x8d4 <__stack+0x75>
					opt_device=i;
				else
					if(option==2)
     8c2:	52 30       	cpi	r21, 0x02	; 2
     8c4:	41 f4       	brne	.+16     	; 0x8d6 <__stack+0x77>
     8c6:	50 93 50 01 	sts	0x0150, r21
     8ca:	60 93 51 01 	sts	0x0151, r22
						{
							opt_time=i;						
     8ce:	20 93 52 01 	sts	0x0152, r18
							break;
     8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <__stack+0x85>
		for(uint8_t i=3;i<=control_counter;i++)
			if(control_device[i]==42)
				{
				option++;
				if(option==1)
					opt_device=i;
     8d4:	62 2f       	mov	r22, r18
		if(control_device[2]=='n')
			state_device=240;
		else
			if(control_device[2]='f')
				state_device=15;
		for(uint8_t i=3;i<=control_counter;i++)
     8d6:	2f 5f       	subi	r18, 0xFF	; 255
     8d8:	42 17       	cp	r20, r18
     8da:	50 f7       	brcc	.-44     	; 0x8b0 <__stack+0x51>
     8dc:	50 93 50 01 	sts	0x0150, r21
     8e0:	60 93 51 01 	sts	0x0151, r22
						{
							opt_time=i;						
							break;
						}
				}
		if(option==2)
     8e4:	80 91 50 01 	lds	r24, 0x0150
     8e8:	82 30       	cpi	r24, 0x02	; 2
     8ea:	09 f0       	breq	.+2      	; 0x8ee <__stack+0x8f>
     8ec:	70 c0       	rjmp	.+224    	; 0x9ce <__stack+0x16f>
			{
			for(uint8_t i=control_counter;i>opt_time;i--)
     8ee:	30 90 52 01 	lds	r3, 0x0152
     8f2:	34 16       	cp	r3, r20
     8f4:	08 f0       	brcs	.+2      	; 0x8f8 <__stack+0x99>
     8f6:	4c c0       	rjmp	.+152    	; 0x990 <__stack+0x131>
     8f8:	f0 90 54 01 	lds	r15, 0x0154
     8fc:	14 2f       	mov	r17, r20
					time += (control_device[i]-48)*pow(10,control_counter-i);	
     8fe:	64 2e       	mov	r6, r20
     900:	77 24       	eor	r7, r7
     902:	0f 2e       	mov	r0, r31
     904:	f8 e6       	ldi	r31, 0x68	; 104
     906:	4f 2e       	mov	r4, r31
     908:	f1 e0       	ldi	r31, 0x01	; 1
     90a:	5f 2e       	mov	r5, r31
     90c:	f0 2d       	mov	r31, r0
     90e:	c1 2f       	mov	r28, r17
     910:	d0 e0       	ldi	r29, 0x00	; 0
     912:	b3 01       	movw	r22, r6
     914:	6c 1b       	sub	r22, r28
     916:	7d 0b       	sbc	r23, r29
     918:	88 27       	eor	r24, r24
     91a:	77 fd       	sbrc	r23, 7
     91c:	80 95       	com	r24
     91e:	98 2f       	mov	r25, r24
     920:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__floatsisf>
     924:	9b 01       	movw	r18, r22
     926:	ac 01       	movw	r20, r24
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	80 e2       	ldi	r24, 0x20	; 32
     92e:	91 e4       	ldi	r25, 0x41	; 65
     930:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <pow>
     934:	06 2f       	mov	r16, r22
     936:	e7 2e       	mov	r14, r23
     938:	98 2e       	mov	r9, r24
     93a:	89 2e       	mov	r8, r25
     93c:	6f 2d       	mov	r22, r15
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	88 27       	eor	r24, r24
     942:	77 fd       	sbrc	r23, 7
     944:	80 95       	com	r24
     946:	98 2f       	mov	r25, r24
     948:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__floatsisf>
     94c:	5b 01       	movw	r10, r22
     94e:	6c 01       	movw	r12, r24
     950:	c4 0d       	add	r28, r4
     952:	d5 1d       	adc	r29, r5
     954:	68 81       	ld	r22, Y
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	60 53       	subi	r22, 0x30	; 48
     95a:	70 40       	sbci	r23, 0x00	; 0
     95c:	88 27       	eor	r24, r24
     95e:	77 fd       	sbrc	r23, 7
     960:	80 95       	com	r24
     962:	98 2f       	mov	r25, r24
     964:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__floatsisf>
     968:	20 2f       	mov	r18, r16
     96a:	3e 2d       	mov	r19, r14
     96c:	49 2d       	mov	r20, r9
     96e:	58 2d       	mov	r21, r8
     970:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__mulsf3>
     974:	9b 01       	movw	r18, r22
     976:	ac 01       	movw	r20, r24
     978:	c6 01       	movw	r24, r12
     97a:	b5 01       	movw	r22, r10
     97c:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__addsf3>
     980:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__fixunssfsi>
     984:	f6 2e       	mov	r15, r22
							break;
						}
				}
		if(option==2)
			{
			for(uint8_t i=control_counter;i>opt_time;i--)
     986:	11 50       	subi	r17, 0x01	; 1
     988:	31 16       	cp	r3, r17
     98a:	08 f2       	brcs	.-126    	; 0x90e <__stack+0xaf>
     98c:	60 93 54 01 	sts	0x0154, r22
					time += (control_device[i]-48)*pow(10,control_counter-i);	
			for(uint8_t i=opt_device+1;i<opt_time;i++)		
     990:	10 91 51 01 	lds	r17, 0x0151
     994:	1f 5f       	subi	r17, 0xFF	; 255
     996:	80 91 52 01 	lds	r24, 0x0152
     99a:	18 17       	cp	r17, r24
     99c:	a8 f4       	brcc	.+42     	; 0x9c8 <__stack+0x169>
				set_time_count(control_device[i]-48,state_device,time);
     99e:	c8 e6       	ldi	r28, 0x68	; 104
     9a0:	d1 e0       	ldi	r29, 0x01	; 1
     9a2:	fe 01       	movw	r30, r28
     9a4:	e1 0f       	add	r30, r17
     9a6:	f1 1d       	adc	r31, r1
     9a8:	80 81       	ld	r24, Z
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	60 91 53 01 	lds	r22, 0x0153
     9b0:	40 91 54 01 	lds	r20, 0x0154
     9b4:	c0 97       	sbiw	r24, 0x30	; 48
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	0e 94 63 05 	call	0xac6	; 0xac6 <set_time_count>
				}
		if(option==2)
			{
			for(uint8_t i=control_counter;i>opt_time;i--)
					time += (control_device[i]-48)*pow(10,control_counter-i);	
			for(uint8_t i=opt_device+1;i<opt_time;i++)		
     9be:	1f 5f       	subi	r17, 0xFF	; 255
     9c0:	80 91 52 01 	lds	r24, 0x0152
     9c4:	18 17       	cp	r17, r24
     9c6:	68 f3       	brcs	.-38     	; 0x9a2 <__stack+0x143>
				set_time_count(control_device[i]-48,state_device,time);
			ok_sms();
     9c8:	0e 94 c5 03 	call	0x78a	; 0x78a <ok_sms>
     9cc:	27 c0       	rjmp	.+78     	; 0xa1c <__stack+0x1bd>
			}
		else
		if(option==1)
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	29 f5       	brne	.+74     	; 0xa1c <__stack+0x1bd>
			{
			for(uint8_t i=opt_device+1;i<=control_counter;i++)
     9d2:	10 91 51 01 	lds	r17, 0x0151
     9d6:	1f 5f       	subi	r17, 0xFF	; 255
     9d8:	80 91 4e 01 	lds	r24, 0x014E
     9dc:	81 17       	cp	r24, r17
     9de:	e0 f0       	brcs	.+56     	; 0xa18 <__stack+0x1b9>
				if(state_device==240)
					{		
					on_device(control_device[i]-48);	
     9e0:	c8 e6       	ldi	r28, 0x68	; 104
     9e2:	d1 e0       	ldi	r29, 0x01	; 1
			}
		else
		if(option==1)
			{
			for(uint8_t i=opt_device+1;i<=control_counter;i++)
				if(state_device==240)
     9e4:	80 91 53 01 	lds	r24, 0x0153
     9e8:	80 3f       	cpi	r24, 0xF0	; 240
     9ea:	41 f4       	brne	.+16     	; 0x9fc <__stack+0x19d>
					{		
					on_device(control_device[i]-48);	
     9ec:	fe 01       	movw	r30, r28
     9ee:	e1 0f       	add	r30, r17
     9f0:	f1 1d       	adc	r31, r1
     9f2:	80 81       	ld	r24, Z
     9f4:	80 53       	subi	r24, 0x30	; 48
     9f6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <on_device>
     9fa:	09 c0       	rjmp	.+18     	; 0xa0e <__stack+0x1af>
					//putChar_LCD(49);	
					}
				else
					if(state_device==15)
     9fc:	8f 30       	cpi	r24, 0x0F	; 15
     9fe:	39 f4       	brne	.+14     	; 0xa0e <__stack+0x1af>
					{		
					off_device(control_device[i]-48);	
     a00:	fe 01       	movw	r30, r28
     a02:	e1 0f       	add	r30, r17
     a04:	f1 1d       	adc	r31, r1
     a06:	80 81       	ld	r24, Z
     a08:	80 53       	subi	r24, 0x30	; 48
     a0a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <off_device>
			ok_sms();
			}
		else
		if(option==1)
			{
			for(uint8_t i=opt_device+1;i<=control_counter;i++)
     a0e:	1f 5f       	subi	r17, 0xFF	; 255
     a10:	80 91 4e 01 	lds	r24, 0x014E
     a14:	81 17       	cp	r24, r17
     a16:	30 f7       	brcc	.-52     	; 0x9e4 <__stack+0x185>
					if(state_device==15)
					{		
					off_device(control_device[i]-48);	
					//putChar_LCD(48);	
					}
			ok_sms();					
     a18:	0e 94 c5 03 	call	0x78a	; 0x78a <ok_sms>
		//putChar_LCD(49);
	//else
		//putChar_LCD(48);
	
	//Hoan lai gia tri
	control_counter=0;
     a1c:	10 92 4e 01 	sts	0x014E, r1
	dem_kt=0;
     a20:	10 92 4f 01 	sts	0x014F, r1
	option=0;
     a24:	10 92 50 01 	sts	0x0150, r1
	opt_device=0;
     a28:	10 92 51 01 	sts	0x0151, r1
	opt_time=0;
     a2c:	10 92 52 01 	sts	0x0152, r1
	state_device=0;
     a30:	10 92 53 01 	sts	0x0153, r1
	time=0;
     a34:	10 92 54 01 	sts	0x0154, r1
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	bf 90       	pop	r11
     a4a:	af 90       	pop	r10
     a4c:	9f 90       	pop	r9
     a4e:	8f 90       	pop	r8
     a50:	7f 90       	pop	r7
     a52:	6f 90       	pop	r6
     a54:	5f 90       	pop	r5
     a56:	4f 90       	pop	r4
     a58:	3f 90       	pop	r3
     a5a:	08 95       	ret

00000a5c <process_sms>:


void process_sms()
{
	//clr_LCD();
	init_arry_sms();
     a5c:	0e 94 14 02 	call	0x428	; 0x428 <init_arry_sms>
     a60:	8f e0       	ldi	r24, 0x0F	; 15
     a62:	97 e2       	ldi	r25, 0x27	; 39
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <process_sms+0x8>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <process_sms+0xe>
     a6a:	00 00       	nop
	_delay_ms(5);
	sms_recv();
     a6c:	0e 94 b0 02 	call	0x560	; 0x560 <sms_recv>
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	99 e6       	ldi	r25, 0x69	; 105
     a74:	a8 e1       	ldi	r26, 0x18	; 24
     a76:	81 50       	subi	r24, 0x01	; 1
     a78:	90 40       	sbci	r25, 0x00	; 0
     a7a:	a0 40       	sbci	r26, 0x00	; 0
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <process_sms+0x1a>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <process_sms+0x24>
     a80:	00 00       	nop
	_delay_ms(1000);
	process_symbol_sms();
     a82:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <process_symbol_sms>
     a86:	af e0       	ldi	r26, 0x0F	; 15
     a88:	b7 e2       	ldi	r27, 0x27	; 39
     a8a:	11 97       	sbiw	r26, 0x01	; 1
     a8c:	f1 f7       	brne	.-4      	; 0xa8a <process_sms+0x2e>
     a8e:	00 c0       	rjmp	.+0      	; 0xa90 <process_sms+0x34>
     a90:	00 00       	nop
	_delay_ms(5);	
	sms_del();
     a92:	0e 94 c9 02 	call	0x592	; 0x592 <sms_del>
     a96:	8f e0       	ldi	r24, 0x0F	; 15
     a98:	97 e2       	ldi	r25, 0x27	; 39
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	f1 f7       	brne	.-4      	; 0xa9a <process_sms+0x3e>
     a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <process_sms+0x44>
     aa0:	00 00       	nop
	_delay_ms(5);

	stdout=&lcdstd;
     aa2:	82 e3       	ldi	r24, 0x32	; 50
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	90 93 58 03 	sts	0x0358, r25
     aaa:	80 93 57 03 	sts	0x0357, r24
}
     aae:	08 95       	ret

00000ab0 <BCD2Dec>:

// doi BCD sang thap phan va nguoc lai
uint8_t BCD2Dec(uint8_t BCD){
	uint8_t L, H;
	L=BCD & 0x0F;
	H=(BCD>>4)*10;
     ab0:	98 2f       	mov	r25, r24
     ab2:	92 95       	swap	r25
     ab4:	9f 70       	andi	r25, 0x0F	; 15
     ab6:	99 0f       	add	r25, r25
     ab8:	29 2f       	mov	r18, r25
     aba:	22 0f       	add	r18, r18
     abc:	22 0f       	add	r18, r18
     abe:	92 0f       	add	r25, r18
/*------------------------------------------------------------------------------------------------*/

// doi BCD sang thap phan va nguoc lai
uint8_t BCD2Dec(uint8_t BCD){
	uint8_t L, H;
	L=BCD & 0x0F;
     ac0:	8f 70       	andi	r24, 0x0F	; 15
	H=(BCD>>4)*10;
	return (H+L);
}
     ac2:	89 0f       	add	r24, r25
     ac4:	08 95       	ret

00000ac6 <set_time_count>:
		}
	sei();
}

void set_time_count(uint8_t device, uint8_t state, uint8_t time)
{
     ac6:	9f 92       	push	r9
     ac8:	af 92       	push	r10
     aca:	bf 92       	push	r11
     acc:	cf 92       	push	r12
     ace:	df 92       	push	r13
     ad0:	ef 92       	push	r14
     ad2:	ff 92       	push	r15
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	df 93       	push	r29
     ada:	cf 93       	push	r28
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	2f 97       	sbiw	r28, 0x0f	; 15
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	98 2e       	mov	r9, r24
	cli();
     aee:	f8 94       	cli
	uint8_t new_eeprom[15], temp;
	countdown_min[device] = time;
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	fc 01       	movw	r30, r24
     af4:	e2 5a       	subi	r30, 0xA2	; 162
     af6:	fe 4f       	sbci	r31, 0xFE	; 254
     af8:	40 83       	st	Z, r20
	state_count[device] = state;
     afa:	fc 01       	movw	r30, r24
     afc:	ed 59       	subi	r30, 0x9D	; 157
     afe:	fe 4f       	sbci	r31, 0xFE	; 254
     b00:	60 83       	st	Z, r22
	new_eeprom[device+6]=time;
     b02:	fe 01       	movw	r30, r28
     b04:	e8 0f       	add	r30, r24
     b06:	f9 1f       	adc	r31, r25
     b08:	47 83       	std	Z+7, r20	; 0x07
	new_eeprom[device+10]=state;
     b0a:	63 87       	std	Z+11, r22	; 0x0b
	new_eeprom[2] = BCD2Dec(tData[2] & 0x3F);
     b0c:	80 91 0a 02 	lds	r24, 0x020A
     b10:	8f 73       	andi	r24, 0x3F	; 63
     b12:	0e 94 58 05 	call	0xab0	; 0xab0 <BCD2Dec>
     b16:	8b 83       	std	Y+3, r24	; 0x03
     b18:	ff 24       	eor	r15, r15
     b1a:	68 94       	set
     b1c:	f1 f8       	bld	r15, 1
     b1e:	ee 24       	eor	r14, r14
     b20:	e3 94       	inc	r14
	for(uint8_t i=1;i<=6;i++)
		if(i!=2)
			new_eeprom[i] = BCD2Dec(tData[i]);
     b22:	0f 2e       	mov	r0, r31
     b24:	f8 e0       	ldi	r31, 0x08	; 8
     b26:	cf 2e       	mov	r12, r31
     b28:	f2 e0       	ldi	r31, 0x02	; 2
     b2a:	df 2e       	mov	r13, r31
     b2c:	f0 2d       	mov	r31, r0
     b2e:	5e 01       	movw	r10, r28
     b30:	08 94       	sec
     b32:	a1 1c       	adc	r10, r1
     b34:	b1 1c       	adc	r11, r1
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <set_time_count+0x76>
	uint8_t new_eeprom[15], temp;
	countdown_min[device] = time;
	state_count[device] = state;
	new_eeprom[device+6]=time;
	new_eeprom[device+10]=state;
	new_eeprom[2] = BCD2Dec(tData[2] & 0x3F);
     b38:	e3 94       	inc	r14
     b3a:	f3 94       	inc	r15
	for(uint8_t i=1;i<=6;i++)
		if(i!=2)
     b3c:	be 2d       	mov	r27, r14
     b3e:	b2 30       	cpi	r27, 0x02	; 2
     b40:	d9 f3       	breq	.-10     	; 0xb38 <set_time_count+0x72>
			new_eeprom[i] = BCD2Dec(tData[i]);
     b42:	0e 2d       	mov	r16, r14
     b44:	10 e0       	ldi	r17, 0x00	; 0
     b46:	f6 01       	movw	r30, r12
     b48:	e0 0f       	add	r30, r16
     b4a:	f1 1f       	adc	r31, r17
     b4c:	80 81       	ld	r24, Z
     b4e:	0e 94 58 05 	call	0xab0	; 0xab0 <BCD2Dec>
     b52:	f5 01       	movw	r30, r10
     b54:	e0 0f       	add	r30, r16
     b56:	f1 1f       	adc	r31, r17
     b58:	80 83       	st	Z, r24
	countdown_min[device] = time;
	state_count[device] = state;
	new_eeprom[device+6]=time;
	new_eeprom[device+10]=state;
	new_eeprom[2] = BCD2Dec(tData[2] & 0x3F);
	for(uint8_t i=1;i<=6;i++)
     b5a:	ef 2d       	mov	r30, r15
     b5c:	e7 30       	cpi	r30, 0x07	; 7
     b5e:	60 f3       	brcs	.-40     	; 0xb38 <set_time_count+0x72>
     b60:	fe 01       	movw	r30, r28
     b62:	38 96       	adiw	r30, 0x08	; 8
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
		if(i!=2)
			new_eeprom[i] = BCD2Dec(tData[i]);
	for(uint8_t i=1;i<=4;i++)
		if(i!=device)
			if(countdown_min[i]!=0)
     b68:	4e e5       	ldi	r20, 0x5E	; 94
     b6a:	51 e0       	ldi	r21, 0x01	; 1
					new_eeprom[i+6] = countdown_min[i];
					new_eeprom[i+10] = state_count[i];						
				}
			else
				{
					new_eeprom[i+6] = 255;
     b6c:	0f ef       	ldi	r16, 0xFF	; 255
	for(uint8_t i=1;i<=4;i++)
		if(i!=device)
			if(countdown_min[i]!=0)
				{
					new_eeprom[i+6] = countdown_min[i];
					new_eeprom[i+10] = state_count[i];						
     b6e:	63 e6       	ldi	r22, 0x63	; 99
     b70:	71 e0       	ldi	r23, 0x01	; 1
	new_eeprom[2] = BCD2Dec(tData[2] & 0x3F);
	for(uint8_t i=1;i<=6;i++)
		if(i!=2)
			new_eeprom[i] = BCD2Dec(tData[i]);
	for(uint8_t i=1;i<=4;i++)
		if(i!=device)
     b72:	28 2f       	mov	r18, r24
     b74:	2f 5f       	subi	r18, 0xFF	; 255
     b76:	29 15       	cp	r18, r9
     b78:	b1 f0       	breq	.+44     	; 0xba6 <set_time_count+0xe0>
			_delay_ms(1);//Cho 1ms
		}
	sei();
}

void set_time_count(uint8_t device, uint8_t state, uint8_t time)
     b7a:	9c 01       	movw	r18, r24
     b7c:	2f 5f       	subi	r18, 0xFF	; 255
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
	for(uint8_t i=1;i<=6;i++)
		if(i!=2)
			new_eeprom[i] = BCD2Dec(tData[i]);
	for(uint8_t i=1;i<=4;i++)
		if(i!=device)
			if(countdown_min[i]!=0)
     b80:	da 01       	movw	r26, r20
     b82:	a2 0f       	add	r26, r18
     b84:	b3 1f       	adc	r27, r19
     b86:	ac 91       	ld	r26, X
     b88:	aa 23       	and	r26, r26
     b8a:	59 f0       	breq	.+22     	; 0xba2 <set_time_count+0xdc>
				{
					new_eeprom[i+6] = countdown_min[i];
     b8c:	da 01       	movw	r26, r20
     b8e:	a2 0f       	add	r26, r18
     b90:	b3 1f       	adc	r27, r19
     b92:	ac 91       	ld	r26, X
     b94:	a0 83       	st	Z, r26
					new_eeprom[i+10] = state_count[i];						
     b96:	26 0f       	add	r18, r22
     b98:	37 1f       	adc	r19, r23
     b9a:	d9 01       	movw	r26, r18
     b9c:	2c 91       	ld	r18, X
     b9e:	24 83       	std	Z+4, r18	; 0x04
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <set_time_count+0xe0>
				}
			else
				{
					new_eeprom[i+6] = 255;
     ba2:	00 83       	st	Z, r16
					new_eeprom[i+10] = 255;						
     ba4:	04 83       	std	Z+4, r16	; 0x04
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	31 96       	adiw	r30, 0x01	; 1
	new_eeprom[device+10]=state;
	new_eeprom[2] = BCD2Dec(tData[2] & 0x3F);
	for(uint8_t i=1;i<=6;i++)
		if(i!=2)
			new_eeprom[i] = BCD2Dec(tData[i]);
	for(uint8_t i=1;i<=4;i++)
     baa:	84 30       	cpi	r24, 0x04	; 4
     bac:	91 05       	cpc	r25, r1
     bae:	09 f7       	brne	.-62     	; 0xb72 <set_time_count+0xac>
     bb0:	ee 24       	eor	r14, r14
     bb2:	ff 24       	eor	r15, r15
     bb4:	68 94       	set
     bb6:	e1 f8       	bld	r14, 1
     bb8:	ec 0e       	add	r14, r28
     bba:	fd 1e       	adc	r15, r29
     bbc:	00 e0       	ldi	r16, 0x00	; 0
     bbe:	10 e0       	ldi	r17, 0x00	; 0
					new_eeprom[i+6] = 255;
					new_eeprom[i+10] = 255;						
				}
	for(uint8_t i=1;i<=14;i++)
		{
			while(!eeprom_is_ready());
     bc0:	e1 99       	sbic	0x1c, 1	; 28
     bc2:	fe cf       	rjmp	.-4      	; 0xbc0 <set_time_count+0xfa>
			_delay_ms(1);//Cho 1ms
		}
	sei();
}

void set_time_count(uint8_t device, uint8_t state, uint8_t time)
     bc4:	0f 5f       	subi	r16, 0xFF	; 255
     bc6:	1f 4f       	sbci	r17, 0xFF	; 255
					new_eeprom[i+10] = 255;						
				}
	for(uint8_t i=1;i<=14;i++)
		{
			while(!eeprom_is_ready());
			eeprom_write_byte(i,new_eeprom[i]);
     bc8:	f7 01       	movw	r30, r14
     bca:	61 91       	ld	r22, Z+
     bcc:	7f 01       	movw	r14, r30
     bce:	c8 01       	movw	r24, r16
     bd0:	0e 94 b6 12 	call	0x256c	; 0x256c <__eewr_byte_m32>
     bd4:	8f ec       	ldi	r24, 0xCF	; 207
     bd6:	97 e0       	ldi	r25, 0x07	; 7
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	f1 f7       	brne	.-4      	; 0xbd8 <set_time_count+0x112>
     bdc:	00 c0       	rjmp	.+0      	; 0xbde <set_time_count+0x118>
     bde:	00 00       	nop
			else
				{
					new_eeprom[i+6] = 255;
					new_eeprom[i+10] = 255;						
				}
	for(uint8_t i=1;i<=14;i++)
     be0:	0e 30       	cpi	r16, 0x0E	; 14
     be2:	11 05       	cpc	r17, r1
     be4:	69 f7       	brne	.-38     	; 0xbc0 <set_time_count+0xfa>
		{
			while(!eeprom_is_ready());
			eeprom_write_byte(i,new_eeprom[i]);
			_delay_ms(1);
		}		
	sei();
     be6:	78 94       	sei
}
     be8:	2f 96       	adiw	r28, 0x0f	; 15
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	bf 90       	pop	r11
     c06:	af 90       	pop	r10
     c08:	9f 90       	pop	r9
     c0a:	08 95       	ret

00000c0c <Dec2BCD>:
}

uint8_t Dec2BCD(uint8_t Dec){
	uint8_t L, H;
	L=Dec % 10;
	H=(Dec/10)<<4;
     c0c:	6a e0       	ldi	r22, 0x0A	; 10
     c0e:	0e 94 30 10 	call	0x2060	; 0x2060 <__udivmodqi4>
     c12:	82 95       	swap	r24
     c14:	80 7f       	andi	r24, 0xF0	; 240
	return (H+L);
}
     c16:	89 0f       	add	r24, r25
     c18:	08 95       	ret

00000c1a <Display>:

/*------------------------------------------------------------------------------------------------*/  
//chuong trinh con  hien thi thoi gian doc tu DS1307
void Display(void)
{ 
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
	Second 	= BCD2Dec(tData[0] & 0x7F);
     c1e:	80 91 08 02 	lds	r24, 0x0208
     c22:	8f 77       	andi	r24, 0x7F	; 127
     c24:	0e 94 58 05 	call	0xab0	; 0xab0 <BCD2Dec>
     c28:	80 93 28 01 	sts	0x0128, r24
	Minute 	= BCD2Dec(tData[1]);
     c2c:	80 91 09 02 	lds	r24, 0x0209
     c30:	0e 94 58 05 	call	0xab0	; 0xab0 <BCD2Dec>
     c34:	80 93 29 01 	sts	0x0129, r24
	if (Mode !=0) 	Hour = BCD2Dec(tData[2] & 0x1F); //mode 12h
     c38:	80 91 5a 01 	lds	r24, 0x015A
     c3c:	88 23       	and	r24, r24
     c3e:	41 f0       	breq	.+16     	; 0xc50 <Display+0x36>
     c40:	80 91 0a 02 	lds	r24, 0x020A
     c44:	8f 71       	andi	r24, 0x1F	; 31
     c46:	0e 94 58 05 	call	0xab0	; 0xab0 <BCD2Dec>
     c4a:	80 93 2a 01 	sts	0x012A, r24
     c4e:	07 c0       	rjmp	.+14     	; 0xc5e <Display+0x44>
	else 		  	Hour = BCD2Dec(tData[2] & 0x3F); //mode 24h	
     c50:	80 91 0a 02 	lds	r24, 0x020A
     c54:	8f 73       	andi	r24, 0x3F	; 63
     c56:	0e 94 58 05 	call	0xab0	; 0xab0 <BCD2Dec>
     c5a:	80 93 2a 01 	sts	0x012A, r24
	Day		= BCD2Dec(tData[3]);
     c5e:	80 91 0b 02 	lds	r24, 0x020B
     c62:	0e 94 58 05 	call	0xab0	; 0xab0 <BCD2Dec>
     c66:	80 93 2b 01 	sts	0x012B, r24
	Date   	= BCD2Dec(tData[4]);
     c6a:	80 91 0c 02 	lds	r24, 0x020C
     c6e:	0e 94 58 05 	call	0xab0	; 0xab0 <BCD2Dec>
     c72:	80 93 2c 01 	sts	0x012C, r24
	Month	= BCD2Dec(tData[5]);
     c76:	80 91 0d 02 	lds	r24, 0x020D
     c7a:	0e 94 58 05 	call	0xab0	; 0xab0 <BCD2Dec>
     c7e:	80 93 2d 01 	sts	0x012D, r24
	Year	= BCD2Dec(tData[6]);
     c82:	80 91 0e 02 	lds	r24, 0x020E
     c86:	0e 94 58 05 	call	0xab0	; 0xab0 <BCD2Dec>
     c8a:	80 93 2e 01 	sts	0x012E, r24
	
	/****************************************************************************************/
	clr_LCD();		//xoa LCD
     c8e:	0e 94 0e 01 	call	0x21c	; 0x21c <clr_LCD>
	//Xuat Hour
	sprintf(dis, "%i",Hour);
     c92:	20 91 2a 01 	lds	r18, 0x012A
     c96:	00 d0       	rcall	.+0      	; 0xc98 <Display+0x7e>
     c98:	00 d0       	rcall	.+0      	; 0xc9a <Display+0x80>
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <Display+0x82>
     c9c:	ed b7       	in	r30, 0x3d	; 61
     c9e:	fe b7       	in	r31, 0x3e	; 62
     ca0:	31 96       	adiw	r30, 0x01	; 1
     ca2:	80 e5       	ldi	r24, 0x50	; 80
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	ad b7       	in	r26, 0x3d	; 61
     ca8:	be b7       	in	r27, 0x3e	; 62
     caa:	12 96       	adiw	r26, 0x02	; 2
     cac:	9c 93       	st	X, r25
     cae:	8e 93       	st	-X, r24
     cb0:	11 97       	sbiw	r26, 0x01	; 1
     cb2:	88 ef       	ldi	r24, 0xF8	; 248
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	93 83       	std	Z+3, r25	; 0x03
     cb8:	82 83       	std	Z+2, r24	; 0x02
     cba:	24 83       	std	Z+4, r18	; 0x04
     cbc:	15 82       	std	Z+5, r1	; 0x05
     cbe:	0e 94 a4 10 	call	0x2148	; 0x2148 <sprintf>
	move_LCD(1,1);  
     cc2:	2d b7       	in	r18, 0x3d	; 61
     cc4:	3e b7       	in	r19, 0x3e	; 62
     cc6:	2a 5f       	subi	r18, 0xFA	; 250
     cc8:	3f 4f       	sbci	r19, 0xFF	; 255
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	3e bf       	out	0x3e, r19	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	2d bf       	out	0x3d, r18	; 61
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	61 e0       	ldi	r22, 0x01	; 1
     cd8:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
	if (Hour<10) putChar_LCD(' ');print_LCD(dis); 
     cdc:	80 91 2a 01 	lds	r24, 0x012A
     ce0:	8a 30       	cpi	r24, 0x0A	; 10
     ce2:	18 f4       	brcc	.+6      	; 0xcea <Display+0xd0>
     ce4:	80 e2       	ldi	r24, 0x20	; 32
     ce6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
     cea:	c0 e5       	ldi	r28, 0x50	; 80
     cec:	d3 e0       	ldi	r29, 0x03	; 3
     cee:	ce 01       	movw	r24, r28
     cf0:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
	move_LCD(1,3); putChar_LCD(':');
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	63 e0       	ldi	r22, 0x03	; 3
     cf8:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
     cfc:	8a e3       	ldi	r24, 0x3A	; 58
     cfe:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
	//Xuat Minute
	sprintf(dis, "%i",Minute); 
     d02:	20 91 29 01 	lds	r18, 0x0129
     d06:	00 d0       	rcall	.+0      	; 0xd08 <Display+0xee>
     d08:	00 d0       	rcall	.+0      	; 0xd0a <Display+0xf0>
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <Display+0xf2>
     d0c:	ed b7       	in	r30, 0x3d	; 61
     d0e:	fe b7       	in	r31, 0x3e	; 62
     d10:	31 96       	adiw	r30, 0x01	; 1
     d12:	ad b7       	in	r26, 0x3d	; 61
     d14:	be b7       	in	r27, 0x3e	; 62
     d16:	12 96       	adiw	r26, 0x02	; 2
     d18:	dc 93       	st	X, r29
     d1a:	ce 93       	st	-X, r28
     d1c:	11 97       	sbiw	r26, 0x01	; 1
     d1e:	88 ef       	ldi	r24, 0xF8	; 248
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	93 83       	std	Z+3, r25	; 0x03
     d24:	82 83       	std	Z+2, r24	; 0x02
     d26:	24 83       	std	Z+4, r18	; 0x04
     d28:	15 82       	std	Z+5, r1	; 0x05
     d2a:	0e 94 a4 10 	call	0x2148	; 0x2148 <sprintf>
	move_LCD(1,4); if (Minute<10) putChar_LCD('0');		print_LCD(dis); 
     d2e:	2d b7       	in	r18, 0x3d	; 61
     d30:	3e b7       	in	r19, 0x3e	; 62
     d32:	2a 5f       	subi	r18, 0xFA	; 250
     d34:	3f 4f       	sbci	r19, 0xFF	; 255
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	3e bf       	out	0x3e, r19	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	2d bf       	out	0x3d, r18	; 61
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	64 e0       	ldi	r22, 0x04	; 4
     d44:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
     d48:	80 91 29 01 	lds	r24, 0x0129
     d4c:	8a 30       	cpi	r24, 0x0A	; 10
     d4e:	18 f4       	brcc	.+6      	; 0xd56 <Display+0x13c>
     d50:	80 e3       	ldi	r24, 0x30	; 48
     d52:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
     d56:	c0 e5       	ldi	r28, 0x50	; 80
     d58:	d3 e0       	ldi	r29, 0x03	; 3
     d5a:	ce 01       	movw	r24, r28
     d5c:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
	move_LCD(1,6);	putChar_LCD(':');
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	66 e0       	ldi	r22, 0x06	; 6
     d64:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
     d68:	8a e3       	ldi	r24, 0x3A	; 58
     d6a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
	//Xuat Second
	sprintf(dis, "%i",Second); 
     d6e:	20 91 28 01 	lds	r18, 0x0128
     d72:	00 d0       	rcall	.+0      	; 0xd74 <Display+0x15a>
     d74:	00 d0       	rcall	.+0      	; 0xd76 <Display+0x15c>
     d76:	00 d0       	rcall	.+0      	; 0xd78 <Display+0x15e>
     d78:	ed b7       	in	r30, 0x3d	; 61
     d7a:	fe b7       	in	r31, 0x3e	; 62
     d7c:	31 96       	adiw	r30, 0x01	; 1
     d7e:	ad b7       	in	r26, 0x3d	; 61
     d80:	be b7       	in	r27, 0x3e	; 62
     d82:	12 96       	adiw	r26, 0x02	; 2
     d84:	dc 93       	st	X, r29
     d86:	ce 93       	st	-X, r28
     d88:	11 97       	sbiw	r26, 0x01	; 1
     d8a:	88 ef       	ldi	r24, 0xF8	; 248
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	93 83       	std	Z+3, r25	; 0x03
     d90:	82 83       	std	Z+2, r24	; 0x02
     d92:	24 83       	std	Z+4, r18	; 0x04
     d94:	15 82       	std	Z+5, r1	; 0x05
     d96:	0e 94 a4 10 	call	0x2148	; 0x2148 <sprintf>
	move_LCD(1,7); if (Second<10) putChar_LCD('0');		print_LCD(dis); 
     d9a:	2d b7       	in	r18, 0x3d	; 61
     d9c:	3e b7       	in	r19, 0x3e	; 62
     d9e:	2a 5f       	subi	r18, 0xFA	; 250
     da0:	3f 4f       	sbci	r19, 0xFF	; 255
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	3e bf       	out	0x3e, r19	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	2d bf       	out	0x3d, r18	; 61
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	67 e0       	ldi	r22, 0x07	; 7
     db0:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
     db4:	80 91 28 01 	lds	r24, 0x0128
     db8:	8a 30       	cpi	r24, 0x0A	; 10
     dba:	18 f4       	brcc	.+6      	; 0xdc2 <Display+0x1a8>
     dbc:	80 e3       	ldi	r24, 0x30	; 48
     dbe:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
     dc2:	80 e5       	ldi	r24, 0x50	; 80
     dc4:	93 e0       	ldi	r25, 0x03	; 3
     dc6:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
	if (Mode !=0){ //mode 12h
     dca:	80 91 5a 01 	lds	r24, 0x015A
     dce:	88 23       	and	r24, r24
     dd0:	79 f0       	breq	.+30     	; 0xdf0 <Display+0x1d6>
		move_LCD(1,1);
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
		if (bit_is_set(tData[2],5))  putChar_LCD('P'); //kiem tra bit AP, if AP=1
     dda:	80 91 0a 02 	lds	r24, 0x020A
     dde:	85 ff       	sbrs	r24, 5
     de0:	04 c0       	rjmp	.+8      	; 0xdea <Display+0x1d0>
     de2:	80 e5       	ldi	r24, 0x50	; 80
     de4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
     de8:	03 c0       	rjmp	.+6      	; 0xdf0 <Display+0x1d6>
		else putChar_LCD('A');
     dea:	81 e4       	ldi	r24, 0x41	; 65
     dec:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
	}
	/****************************************************************************************/
	if(choise_device==0||firt_dis==1)
     df0:	80 91 30 01 	lds	r24, 0x0130
     df4:	88 23       	and	r24, r24
     df6:	29 f0       	breq	.+10     	; 0xe02 <Display+0x1e8>
     df8:	80 91 31 01 	lds	r24, 0x0131
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	09 f0       	breq	.+2      	; 0xe02 <Display+0x1e8>
     e00:	d2 c0       	rjmp	.+420    	; 0xfa6 <Display+0x38c>
	{
	//In Day
		move_LCD(2,1);
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
		switch (Day)
     e0a:	80 91 2b 01 	lds	r24, 0x012B
     e0e:	84 30       	cpi	r24, 0x04	; 4
     e10:	f9 f0       	breq	.+62     	; 0xe50 <Display+0x236>
     e12:	85 30       	cpi	r24, 0x05	; 5
     e14:	38 f4       	brcc	.+14     	; 0xe24 <Display+0x20a>
     e16:	82 30       	cpi	r24, 0x02	; 2
     e18:	89 f0       	breq	.+34     	; 0xe3c <Display+0x222>
     e1a:	83 30       	cpi	r24, 0x03	; 3
     e1c:	a0 f4       	brcc	.+40     	; 0xe46 <Display+0x22c>
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	51 f5       	brne	.+84     	; 0xe76 <Display+0x25c>
     e22:	07 c0       	rjmp	.+14     	; 0xe32 <Display+0x218>
     e24:	86 30       	cpi	r24, 0x06	; 6
     e26:	f1 f0       	breq	.+60     	; 0xe64 <Display+0x24a>
     e28:	86 30       	cpi	r24, 0x06	; 6
     e2a:	b8 f0       	brcs	.+46     	; 0xe5a <Display+0x240>
     e2c:	87 30       	cpi	r24, 0x07	; 7
     e2e:	19 f5       	brne	.+70     	; 0xe76 <Display+0x25c>
     e30:	1e c0       	rjmp	.+60     	; 0xe6e <Display+0x254>
		 {
			case 1:		print_LCD("Sun");	break;
     e32:	8b ef       	ldi	r24, 0xFB	; 251
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
     e3a:	1d c0       	rjmp	.+58     	; 0xe76 <Display+0x25c>
		    case 2:		print_LCD("Mon");	break;
     e3c:	8f ef       	ldi	r24, 0xFF	; 255
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
     e44:	18 c0       	rjmp	.+48     	; 0xe76 <Display+0x25c>
			case 3:		print_LCD("Tue");	break;
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
     e4e:	13 c0       	rjmp	.+38     	; 0xe76 <Display+0x25c>
		    case 4:		print_LCD("Wed");	break;
     e50:	87 e0       	ldi	r24, 0x07	; 7
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
     e58:	0e c0       	rjmp	.+28     	; 0xe76 <Display+0x25c>
			case 5:		print_LCD("Thu");	break;
     e5a:	8b e0       	ldi	r24, 0x0B	; 11
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
     e62:	09 c0       	rjmp	.+18     	; 0xe76 <Display+0x25c>
		    case 6:		print_LCD("Fri");	break;
     e64:	8f e0       	ldi	r24, 0x0F	; 15
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
     e6c:	04 c0       	rjmp	.+8      	; 0xe76 <Display+0x25c>
			case 7:		print_LCD("Sat");	break;
     e6e:	83 e1       	ldi	r24, 0x13	; 19
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
		 }
	
		//Xuat Date
		sprintf(dis, "%i",Date);  
     e76:	20 91 2c 01 	lds	r18, 0x012C
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <Display+0x262>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <Display+0x264>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <Display+0x266>
     e80:	ed b7       	in	r30, 0x3d	; 61
     e82:	fe b7       	in	r31, 0x3e	; 62
     e84:	31 96       	adiw	r30, 0x01	; 1
     e86:	80 e5       	ldi	r24, 0x50	; 80
     e88:	93 e0       	ldi	r25, 0x03	; 3
     e8a:	ad b7       	in	r26, 0x3d	; 61
     e8c:	be b7       	in	r27, 0x3e	; 62
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	9c 93       	st	X, r25
     e92:	8e 93       	st	-X, r24
     e94:	11 97       	sbiw	r26, 0x01	; 1
     e96:	88 ef       	ldi	r24, 0xF8	; 248
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	93 83       	std	Z+3, r25	; 0x03
     e9c:	82 83       	std	Z+2, r24	; 0x02
     e9e:	24 83       	std	Z+4, r18	; 0x04
     ea0:	15 82       	std	Z+5, r1	; 0x05
     ea2:	0e 94 a4 10 	call	0x2148	; 0x2148 <sprintf>
		move_LCD(2,5); 
     ea6:	2d b7       	in	r18, 0x3d	; 61
     ea8:	3e b7       	in	r19, 0x3e	; 62
     eaa:	2a 5f       	subi	r18, 0xFA	; 250
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	3e bf       	out	0x3e, r19	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	2d bf       	out	0x3d, r18	; 61
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	65 e0       	ldi	r22, 0x05	; 5
     ebc:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
		if (Date<10)	putChar_LCD(' '); 
     ec0:	80 91 2c 01 	lds	r24, 0x012C
     ec4:	8a 30       	cpi	r24, 0x0A	; 10
     ec6:	18 f4       	brcc	.+6      	; 0xece <Display+0x2b4>
     ec8:	80 e2       	ldi	r24, 0x20	; 32
     eca:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
		print_LCD(dis);
     ece:	c0 e5       	ldi	r28, 0x50	; 80
     ed0:	d3 e0       	ldi	r29, 0x03	; 3
     ed2:	ce 01       	movw	r24, r28
     ed4:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
		move_LCD(2,7);	putChar_LCD('/');//dau cach 1
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	67 e0       	ldi	r22, 0x07	; 7
     edc:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
     ee0:	8f e2       	ldi	r24, 0x2F	; 47
     ee2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
	
		//Xuat Month
		sprintf(dis, "%i",Month);  
     ee6:	20 91 2d 01 	lds	r18, 0x012D
     eea:	00 d0       	rcall	.+0      	; 0xeec <Display+0x2d2>
     eec:	00 d0       	rcall	.+0      	; 0xeee <Display+0x2d4>
     eee:	00 d0       	rcall	.+0      	; 0xef0 <Display+0x2d6>
     ef0:	ed b7       	in	r30, 0x3d	; 61
     ef2:	fe b7       	in	r31, 0x3e	; 62
     ef4:	31 96       	adiw	r30, 0x01	; 1
     ef6:	ad b7       	in	r26, 0x3d	; 61
     ef8:	be b7       	in	r27, 0x3e	; 62
     efa:	12 96       	adiw	r26, 0x02	; 2
     efc:	dc 93       	st	X, r29
     efe:	ce 93       	st	-X, r28
     f00:	11 97       	sbiw	r26, 0x01	; 1
     f02:	88 ef       	ldi	r24, 0xF8	; 248
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	93 83       	std	Z+3, r25	; 0x03
     f08:	82 83       	std	Z+2, r24	; 0x02
     f0a:	24 83       	std	Z+4, r18	; 0x04
     f0c:	15 82       	std	Z+5, r1	; 0x05
     f0e:	0e 94 a4 10 	call	0x2148	; 0x2148 <sprintf>
		if (Month<10)	putChar_LCD('0'); 
     f12:	80 91 2d 01 	lds	r24, 0x012D
     f16:	2d b7       	in	r18, 0x3d	; 61
     f18:	3e b7       	in	r19, 0x3e	; 62
     f1a:	2a 5f       	subi	r18, 0xFA	; 250
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	3e bf       	out	0x3e, r19	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	2d bf       	out	0x3d, r18	; 61
     f28:	8a 30       	cpi	r24, 0x0A	; 10
     f2a:	18 f4       	brcc	.+6      	; 0xf32 <Display+0x318>
     f2c:	80 e3       	ldi	r24, 0x30	; 48
     f2e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
		print_LCD(dis); 
     f32:	c0 e5       	ldi	r28, 0x50	; 80
     f34:	d3 e0       	ldi	r29, 0x03	; 3
     f36:	ce 01       	movw	r24, r28
     f38:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
		move_LCD(2,10); putChar_LCD('/');//dau cach 2
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	6a e0       	ldi	r22, 0x0A	; 10
     f40:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
     f44:	8f e2       	ldi	r24, 0x2F	; 47
     f46:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>

		//Xuat Year
		//putChar_LCD('2'); putChar_LCD('0');//xuat so '20'
		sprintf(dis, "%i",Year);	
     f4a:	20 91 2e 01 	lds	r18, 0x012E
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <Display+0x336>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <Display+0x338>
     f52:	00 d0       	rcall	.+0      	; 0xf54 <Display+0x33a>
     f54:	ed b7       	in	r30, 0x3d	; 61
     f56:	fe b7       	in	r31, 0x3e	; 62
     f58:	31 96       	adiw	r30, 0x01	; 1
     f5a:	ad b7       	in	r26, 0x3d	; 61
     f5c:	be b7       	in	r27, 0x3e	; 62
     f5e:	12 96       	adiw	r26, 0x02	; 2
     f60:	dc 93       	st	X, r29
     f62:	ce 93       	st	-X, r28
     f64:	11 97       	sbiw	r26, 0x01	; 1
     f66:	88 ef       	ldi	r24, 0xF8	; 248
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	93 83       	std	Z+3, r25	; 0x03
     f6c:	82 83       	std	Z+2, r24	; 0x02
     f6e:	24 83       	std	Z+4, r18	; 0x04
     f70:	15 82       	std	Z+5, r1	; 0x05
     f72:	0e 94 a4 10 	call	0x2148	; 0x2148 <sprintf>
		move_LCD(2,11);
     f76:	2d b7       	in	r18, 0x3d	; 61
     f78:	3e b7       	in	r19, 0x3e	; 62
     f7a:	2a 5f       	subi	r18, 0xFA	; 250
     f7c:	3f 4f       	sbci	r19, 0xFF	; 255
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	3e bf       	out	0x3e, r19	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	2d bf       	out	0x3d, r18	; 61
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	6b e0       	ldi	r22, 0x0B	; 11
     f8c:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
		if (Year<10) putChar_LCD('0'); // neu nam <10, in them so 0 ben trai, vi du 09 
     f90:	80 91 2e 01 	lds	r24, 0x012E
     f94:	8a 30       	cpi	r24, 0x0A	; 10
     f96:	18 f4       	brcc	.+6      	; 0xf9e <Display+0x384>
     f98:	80 e3       	ldi	r24, 0x30	; 48
     f9a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
		print_LCD(dis);		
     f9e:	80 e5       	ldi	r24, 0x50	; 80
     fa0:	93 e0       	ldi	r25, 0x03	; 3
     fa2:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
	}
}
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <read_adc>:


//Chuong trinh lay gia tri ADC
unsigned char read_adc(unsigned char adc_channel)
{
	ADMUX=adc_channel|ADC_VREF_TYPE;
     fac:	80 64       	ori	r24, 0x40	; 64
     fae:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC);
     fb0:	36 9a       	sbi	0x06, 6	; 6
	loop_until_bit_is_set(ADCSRA,ADIF);
     fb2:	34 9b       	sbis	0x06, 4	; 6
     fb4:	fe cf       	rjmp	.-4      	; 0xfb2 <read_adc+0x6>
	return ADCW;
     fb6:	84 b1       	in	r24, 0x04	; 4
     fb8:	95 b1       	in	r25, 0x05	; 5
}
     fba:	08 95       	ret

00000fbc <adc_out>:

/*------------------------------------------------------------------------------------------------*/  
//chuong trinh xuat nhiet do ra LCD
void adc_out(unsigned char val)
{
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
	unsigned char chuc, dvi, temp_val;
	//Tinh toan gia tri nhiet do
	//temp_val=(int)(val/2.046);
	temp_val=(int)(val/2.726);
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	9c 01       	movw	r18, r24
     fc4:	b9 01       	movw	r22, r18
     fc6:	88 27       	eor	r24, r24
     fc8:	77 fd       	sbrc	r23, 7
     fca:	80 95       	com	r24
     fcc:	98 2f       	mov	r25, r24
     fce:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__floatsisf>
     fd2:	29 ec       	ldi	r18, 0xC9	; 201
     fd4:	36 e7       	ldi	r19, 0x76	; 118
     fd6:	4e e2       	ldi	r20, 0x2E	; 46
     fd8:	50 e4       	ldi	r21, 0x40	; 64
     fda:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__divsf3>
     fde:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__fixsfsi>
     fe2:	06 2f       	mov	r16, r22
	chuc=(int)(temp_val/10);
     fe4:	86 2f       	mov	r24, r22
     fe6:	6a e0       	ldi	r22, 0x0A	; 10
     fe8:	0e 94 30 10 	call	0x2060	; 0x2060 <__udivmodqi4>
     fec:	18 2f       	mov	r17, r24
	dvi=(int)(temp_val-(10*chuc));
	//Put ra LCD
	move_LCD(1,13);
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	6d e0       	ldi	r22, 0x0D	; 13
     ff2:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
	putChar_LCD(chuc+48);
     ff6:	81 2f       	mov	r24, r17
     ff8:	80 5d       	subi	r24, 0xD0	; 208
     ffa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
	unsigned char chuc, dvi, temp_val;
	//Tinh toan gia tri nhiet do
	//temp_val=(int)(val/2.046);
	temp_val=(int)(val/2.726);
	chuc=(int)(temp_val/10);
	dvi=(int)(temp_val-(10*chuc));
     ffe:	80 2f       	mov	r24, r16
    1000:	80 5d       	subi	r24, 0xD0	; 208
    1002:	11 0f       	add	r17, r17
    1004:	91 2f       	mov	r25, r17
    1006:	99 0f       	add	r25, r25
    1008:	99 0f       	add	r25, r25
    100a:	19 0f       	add	r17, r25
	//Put ra LCD
	move_LCD(1,13);
	putChar_LCD(chuc+48);
	putChar_LCD(dvi+48);
    100c:	81 1b       	sub	r24, r17
    100e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
	putChar_LCD(0xdf);
    1012:	8f ed       	ldi	r24, 0xDF	; 223
    1014:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
	print_LCD("C");
    1018:	87 e1       	ldi	r24, 0x17	; 23
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
}
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	08 95       	ret

00001026 <alarm>:
	
/*------------------------------------------------------------------------------------------------*/  
//Chuong trinh bao dong qua loa khi qua nhiet: >=80
void alarm()
{	
		if((unsigned char)(read_adc(0)/2.726)>=80)
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	0e 94 d6 07 	call	0xfac	; 0xfac <read_adc>
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9c 01       	movw	r18, r24
    1030:	b9 01       	movw	r22, r18
    1032:	88 27       	eor	r24, r24
    1034:	77 fd       	sbrc	r23, 7
    1036:	80 95       	com	r24
    1038:	98 2f       	mov	r25, r24
    103a:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__floatsisf>
    103e:	29 ec       	ldi	r18, 0xC9	; 201
    1040:	36 e7       	ldi	r19, 0x76	; 118
    1042:	4e e2       	ldi	r20, 0x2E	; 46
    1044:	50 e4       	ldi	r21, 0x40	; 64
    1046:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__divsf3>
    104a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__fixunssfsi>
    104e:	60 35       	cpi	r22, 0x50	; 80
    1050:	50 f0       	brcs	.+20     	; 0x1066 <alarm+0x40>
			{
			bao_dong++;
    1052:	80 91 57 01 	lds	r24, 0x0157
    1056:	8f 5f       	subi	r24, 0xFF	; 255
    1058:	80 93 57 01 	sts	0x0157, r24
			ngung_bao_dong=0;	
    105c:	10 92 58 01 	sts	0x0158, r1
		else
			{
			ngung_bao_dong++;
			bao_dong=0;	
			}
		if(bao_dong==3)	
    1060:	83 30       	cpi	r24, 0x03	; 3
    1062:	49 f0       	breq	.+18     	; 0x1076 <alarm+0x50>
    1064:	08 95       	ret
			bao_dong++;
			ngung_bao_dong=0;	
			}
		else
			{
			ngung_bao_dong++;
    1066:	80 91 58 01 	lds	r24, 0x0158
    106a:	8f 5f       	subi	r24, 0xFF	; 255
    106c:	80 93 58 01 	sts	0x0158, r24
			bao_dong=0;	
    1070:	10 92 57 01 	sts	0x0157, r1
    1074:	09 c0       	rjmp	.+18     	; 0x1088 <alarm+0x62>
			}
		if(bao_dong==3)	
			{
				clrbit(PORTC,PORTC3);	
    1076:	ab 98       	cbi	0x15, 3	; 21
				bao_dong=0;
    1078:	10 92 57 01 	sts	0x0157, r1
				if(hanche_sms==0)
    107c:	80 91 59 01 	lds	r24, 0x0159
    1080:	88 23       	and	r24, r24
    1082:	11 f4       	brne	.+4      	; 0x1088 <alarm+0x62>
					send_alarm_sms();	
    1084:	0e 94 76 02 	call	0x4ec	; 0x4ec <send_alarm_sms>
			}
		if(ngung_bao_dong>=10)	{setbit(PORTC,PORTC3);	ngung_bao_dong=0;}			
    1088:	80 91 58 01 	lds	r24, 0x0158
    108c:	8a 30       	cpi	r24, 0x0A	; 10
    108e:	18 f0       	brcs	.+6      	; 0x1096 <alarm+0x70>
    1090:	ab 9a       	sbi	0x15, 3	; 21
    1092:	10 92 58 01 	sts	0x0158, r1
    1096:	08 95       	ret

00001098 <set_clock>:
//Khoi dong gia tri ghi vao DS1307
void set_clock()
{
	unsigned char temp, flag=1;// mac dinh la cho phep ghi gia tri thoi gian vao ds1307
	//Kiem tra first time qua byte 0x00 trong eeprom da duoc ghi gia tri bao gio chua
	while(!eeprom_is_ready());
    1098:	e1 99       	sbic	0x1c, 1	; 28
    109a:	fe cf       	rjmp	.-4      	; 0x1098 <set_clock>
	temp=eeprom_read_byte(0); // gia tri mac dinh ban dau cua byte 0 trong eeprom la 0xff = 255
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 ae 12 	call	0x255c	; 0x255c <__eerd_byte_m32>
	if(temp!=240)
    10a4:	80 3f       	cpi	r24, 0xF0	; 240
    10a6:	09 f4       	brne	.+2      	; 0x10aa <set_clock+0x12>
    10a8:	60 c0       	rjmp	.+192    	; 0x116a <set_clock+0xd2>
		{
			while(!eeprom_is_ready());
    10aa:	e1 99       	sbic	0x1c, 1	; 28
    10ac:	fe cf       	rjmp	.-4      	; 0x10aa <set_clock+0x12>
			eeprom_write_byte(0,240); // danh dau lan ghi dau tien 0xf0
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	60 ef       	ldi	r22, 0xF0	; 240
    10b4:	0e 94 b6 12 	call	0x256c	; 0x256c <__eewr_byte_m32>
    10b8:	8f ec       	ldi	r24, 0xCF	; 207
    10ba:	97 e0       	ldi	r25, 0x07	; 7
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <set_clock+0x24>
    10c0:	00 c0       	rjmp	.+0      	; 0x10c2 <set_clock+0x2a>
    10c2:	00 00       	nop
	else
			flag=0;
	//Ghi tri ghi vao DS1307
	if(flag||must_edit)
	{
		must_edit=0; // Su dung de tinh chinh thoi gian sau nay
    10c4:	10 92 5d 01 	sts	0x015D, r1
		tData[0]=Dec2BCD(Second); 
    10c8:	80 91 28 01 	lds	r24, 0x0128
    10cc:	0e 94 06 06 	call	0xc0c	; 0xc0c <Dec2BCD>
    10d0:	80 93 08 02 	sts	0x0208, r24
		tData[1]=Dec2BCD(Minute); 
    10d4:	80 91 29 01 	lds	r24, 0x0129
    10d8:	0e 94 06 06 	call	0xc0c	; 0xc0c <Dec2BCD>
    10dc:	80 93 09 02 	sts	0x0209, r24
		if (Mode!=0) 
    10e0:	80 91 5a 01 	lds	r24, 0x015A
    10e4:	88 23       	and	r24, r24
    10e6:	a1 f0       	breq	.+40     	; 0x1110 <set_clock+0x78>
			tData[2]=Dec2BCD(Hour)|(Mode<<6)|(AP<<5); //mode 12h
    10e8:	80 91 2a 01 	lds	r24, 0x012A
    10ec:	0e 94 06 06 	call	0xc0c	; 0xc0c <Dec2BCD>
    10f0:	90 91 5a 01 	lds	r25, 0x015A
    10f4:	20 91 2f 01 	lds	r18, 0x012F
    10f8:	22 95       	swap	r18
    10fa:	22 0f       	add	r18, r18
    10fc:	20 7e       	andi	r18, 0xE0	; 224
    10fe:	92 95       	swap	r25
    1100:	99 0f       	add	r25, r25
    1102:	99 0f       	add	r25, r25
    1104:	90 7c       	andi	r25, 0xC0	; 192
    1106:	92 2b       	or	r25, r18
    1108:	89 2b       	or	r24, r25
    110a:	80 93 0a 02 	sts	0x020A, r24
    110e:	06 c0       	rjmp	.+12     	; 0x111c <set_clock+0x84>
		else 
			tData[2]=Dec2BCD(Hour);
    1110:	80 91 2a 01 	lds	r24, 0x012A
    1114:	0e 94 06 06 	call	0xc0c	; 0xc0c <Dec2BCD>
    1118:	80 93 0a 02 	sts	0x020A, r24
		tData[3]=Dec2BCD(Day);
    111c:	80 91 2b 01 	lds	r24, 0x012B
    1120:	0e 94 06 06 	call	0xc0c	; 0xc0c <Dec2BCD>
    1124:	80 93 0b 02 	sts	0x020B, r24
		tData[4]=Dec2BCD(Date);
    1128:	80 91 2c 01 	lds	r24, 0x012C
    112c:	0e 94 06 06 	call	0xc0c	; 0xc0c <Dec2BCD>
    1130:	80 93 0c 02 	sts	0x020C, r24
		tData[5]=Dec2BCD(Month); 
    1134:	80 91 2d 01 	lds	r24, 0x012D
    1138:	0e 94 06 06 	call	0xc0c	; 0xc0c <Dec2BCD>
    113c:	80 93 0d 02 	sts	0x020D, r24
		tData[6]=Dec2BCD(Year); 		
    1140:	80 91 2e 01 	lds	r24, 0x012E
    1144:	0e 94 06 06 	call	0xc0c	; 0xc0c <Dec2BCD>
    1148:	80 93 0e 02 	sts	0x020E, r24
		TWI_Init(); //khoi dong TWI		
    114c:	0e 94 2a 01 	call	0x254	; 0x254 <TWI_Init>
		TWI_DS1307_wblock(0x00, tData, 7); //ghi lien tiep cac bien thoi gian vao DS1307
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	68 e0       	ldi	r22, 0x08	; 8
    1154:	72 e0       	ldi	r23, 0x02	; 2
    1156:	47 e0       	ldi	r20, 0x07	; 7
    1158:	0e 94 58 01 	call	0x2b0	; 0x2b0 <TWI_DS1307_wblock>
    115c:	8f ec       	ldi	r24, 0xCF	; 207
    115e:	97 e0       	ldi	r25, 0x07	; 7
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <set_clock+0xc8>
    1164:	00 c0       	rjmp	.+0      	; 0x1166 <set_clock+0xce>
    1166:	00 00       	nop
    1168:	08 95       	ret
			_delay_ms(1);
		}
	else
			flag=0;
	//Ghi tri ghi vao DS1307
	if(flag||must_edit)
    116a:	80 91 5d 01 	lds	r24, 0x015D
    116e:	88 23       	and	r24, r24
    1170:	09 f0       	breq	.+2      	; 0x1174 <set_clock+0xdc>
    1172:	a8 cf       	rjmp	.-176    	; 0x10c4 <set_clock+0x2c>
    1174:	08 95       	ret

00001176 <countdown_out>:
	}
}
/*------------------------------------------------------------------------------------------------*/ 

void countdown_out(uint8_t device)
{
    1176:	ef 92       	push	r14
    1178:	ff 92       	push	r15
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
	unsigned char tram, chuc, dvi, val;
	val=countdown_min[device];
    1182:	c8 2f       	mov	r28, r24
    1184:	d0 e0       	ldi	r29, 0x00	; 0
    1186:	fe 01       	movw	r30, r28
    1188:	e2 5a       	subi	r30, 0xA2	; 162
    118a:	fe 4f       	sbci	r31, 0xFE	; 254
    118c:	20 81       	ld	r18, Z
	if(val<=240&&val>0)
    118e:	82 2f       	mov	r24, r18
    1190:	81 50       	subi	r24, 0x01	; 1
    1192:	80 3f       	cpi	r24, 0xF0	; 240
    1194:	08 f0       	brcs	.+2      	; 0x1198 <countdown_out+0x22>
    1196:	4e c0       	rjmp	.+156    	; 0x1234 <countdown_out+0xbe>
		{
		tram = val/100;
    1198:	82 2f       	mov	r24, r18
    119a:	64 e6       	ldi	r22, 0x64	; 100
    119c:	0e 94 30 10 	call	0x2060	; 0x2060 <__udivmodqi4>
    11a0:	18 2f       	mov	r17, r24
    11a2:	e8 2e       	mov	r14, r24
		val-=tram*100;
    11a4:	8c e9       	ldi	r24, 0x9C	; 156
    11a6:	18 9f       	mul	r17, r24
    11a8:	80 2d       	mov	r24, r0
    11aa:	11 24       	eor	r1, r1
    11ac:	28 0f       	add	r18, r24
		dvi	= val%10;
    11ae:	82 2f       	mov	r24, r18
    11b0:	6a e0       	ldi	r22, 0x0A	; 10
    11b2:	0e 94 30 10 	call	0x2060	; 0x2060 <__udivmodqi4>
    11b6:	09 2f       	mov	r16, r25
		chuc = (val-dvi)/10;
    11b8:	82 2f       	mov	r24, r18
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	80 1b       	sub	r24, r16
    11be:	91 09       	sbc	r25, r1
    11c0:	6a e0       	ldi	r22, 0x0A	; 10
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	0e 94 3c 10 	call	0x2078	; 0x2078 <__divmodhi4>
    11c8:	f6 2e       	mov	r15, r22
		move_LCD(2,13);
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	6d e0       	ldi	r22, 0x0D	; 13
    11ce:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
		if(state_count[device]==240)	putChar_LCD(0x2a);
    11d2:	fe 01       	movw	r30, r28
    11d4:	ed 59       	subi	r30, 0x9D	; 157
    11d6:	fe 4f       	sbci	r31, 0xFE	; 254
    11d8:	80 81       	ld	r24, Z
    11da:	80 3f       	cpi	r24, 0xF0	; 240
    11dc:	19 f4       	brne	.+6      	; 0x11e4 <countdown_out+0x6e>
    11de:	8a e2       	ldi	r24, 0x2A	; 42
    11e0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
		if(state_count[device]==15)		putChar_LCD(0x2b);
    11e4:	cd 59       	subi	r28, 0x9D	; 157
    11e6:	de 4f       	sbci	r29, 0xFE	; 254
    11e8:	88 81       	ld	r24, Y
    11ea:	8f 30       	cpi	r24, 0x0F	; 15
    11ec:	19 f4       	brne	.+6      	; 0x11f4 <countdown_out+0x7e>
    11ee:	8b e2       	ldi	r24, 0x2B	; 43
    11f0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
		move_LCD(2,14);
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	6e e0       	ldi	r22, 0x0E	; 14
    11f8:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
		if(tram==0)		move_LCD(2,15);		else	putChar_LCD(tram+48);
    11fc:	ee 20       	and	r14, r14
    11fe:	29 f4       	brne	.+10     	; 0x120a <countdown_out+0x94>
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	6f e0       	ldi	r22, 0x0F	; 15
    1204:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
    1208:	04 c0       	rjmp	.+8      	; 0x1212 <countdown_out+0x9c>
    120a:	81 2f       	mov	r24, r17
    120c:	80 5d       	subi	r24, 0xD0	; 208
    120e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
		if(chuc==0&&tram==0)	move_LCD(2,16);		else	putChar_LCD(chuc+48);
    1212:	ff 20       	and	r15, r15
    1214:	39 f4       	brne	.+14     	; 0x1224 <countdown_out+0xae>
    1216:	ee 20       	and	r14, r14
    1218:	29 f4       	brne	.+10     	; 0x1224 <countdown_out+0xae>
    121a:	82 e0       	ldi	r24, 0x02	; 2
    121c:	60 e1       	ldi	r22, 0x10	; 16
    121e:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
    1222:	04 c0       	rjmp	.+8      	; 0x122c <countdown_out+0xb6>
    1224:	8f 2d       	mov	r24, r15
    1226:	80 5d       	subi	r24, 0xD0	; 208
    1228:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
		putChar_LCD(dvi+48);			
    122c:	80 2f       	mov	r24, r16
    122e:	80 5d       	subi	r24, 0xD0	; 208
    1230:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
		}
}
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	ff 90       	pop	r15
    123e:	ef 90       	pop	r14
    1240:	08 95       	ret

00001242 <check_on_off>:
			}
	}
}
//Check Device
void check_on_off(uint8_t val)
{
    1242:	1f 93       	push	r17
    1244:	18 2f       	mov	r17, r24
	clr_LCD();
    1246:	0e 94 0e 01 	call	0x21c	; 0x21c <clr_LCD>
	Display();
    124a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Display>
	adc_out(read_adc(0));
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	0e 94 d6 07 	call	0xfac	; 0xfac <read_adc>
    1254:	0e 94 de 07 	call	0xfbc	; 0xfbc <adc_out>
	move_LCD(2,1);
    1258:	82 e0       	ldi	r24, 0x02	; 2
    125a:	61 e0       	ldi	r22, 0x01	; 1
    125c:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
	print_LCD("TB ");
    1260:	89 e1       	ldi	r24, 0x19	; 25
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
	putChar_LCD(val+48);
    1268:	81 2f       	mov	r24, r17
    126a:	80 5d       	subi	r24, 0xD0	; 208
    126c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
	switch (val)
    1270:	12 30       	cpi	r17, 0x02	; 2
    1272:	b1 f0       	breq	.+44     	; 0x12a0 <check_on_off+0x5e>
    1274:	13 30       	cpi	r17, 0x03	; 3
    1276:	18 f4       	brcc	.+6      	; 0x127e <check_on_off+0x3c>
    1278:	11 30       	cpi	r17, 0x01	; 1
    127a:	a9 f5       	brne	.+106    	; 0x12e6 <check_on_off+0xa4>
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <check_on_off+0x46>
    127e:	13 30       	cpi	r17, 0x03	; 3
    1280:	d9 f0       	breq	.+54     	; 0x12b8 <check_on_off+0x76>
    1282:	14 30       	cpi	r17, 0x04	; 4
    1284:	81 f5       	brne	.+96     	; 0x12e6 <check_on_off+0xa4>
    1286:	24 c0       	rjmp	.+72     	; 0x12d0 <check_on_off+0x8e>
		{
			case 1: 	if(bit_is_clear(PORTC,PINC7))	print_LCD(": On");	else	print_LCD(": Off"); break;
    1288:	af 99       	sbic	0x15, 7	; 21
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <check_on_off+0x54>
    128c:	8d e1       	ldi	r24, 0x1D	; 29
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
    1294:	28 c0       	rjmp	.+80     	; 0x12e6 <check_on_off+0xa4>
    1296:	82 e2       	ldi	r24, 0x22	; 34
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
    129e:	23 c0       	rjmp	.+70     	; 0x12e6 <check_on_off+0xa4>
			case 2: 	if(bit_is_clear(PORTC,PINC6))	print_LCD(": On");	else	print_LCD(": Off"); break;
    12a0:	ae 99       	sbic	0x15, 6	; 21
    12a2:	05 c0       	rjmp	.+10     	; 0x12ae <check_on_off+0x6c>
    12a4:	8d e1       	ldi	r24, 0x1D	; 29
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
    12ac:	1c c0       	rjmp	.+56     	; 0x12e6 <check_on_off+0xa4>
    12ae:	82 e2       	ldi	r24, 0x22	; 34
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
    12b6:	17 c0       	rjmp	.+46     	; 0x12e6 <check_on_off+0xa4>
			case 3: 	if(bit_is_clear(PORTC,PINC5))	print_LCD(": On");	else	print_LCD(": Off"); break;
    12b8:	ad 99       	sbic	0x15, 5	; 21
    12ba:	05 c0       	rjmp	.+10     	; 0x12c6 <check_on_off+0x84>
    12bc:	8d e1       	ldi	r24, 0x1D	; 29
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
    12c4:	10 c0       	rjmp	.+32     	; 0x12e6 <check_on_off+0xa4>
    12c6:	82 e2       	ldi	r24, 0x22	; 34
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
    12ce:	0b c0       	rjmp	.+22     	; 0x12e6 <check_on_off+0xa4>
			case 4: 	if(bit_is_clear(PORTC,PINC4))	print_LCD(": On");	else	print_LCD(": Off"); break;
    12d0:	ac 99       	sbic	0x15, 4	; 21
    12d2:	05 c0       	rjmp	.+10     	; 0x12de <check_on_off+0x9c>
    12d4:	8d e1       	ldi	r24, 0x1D	; 29
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <check_on_off+0xa4>
    12de:	82 e2       	ldi	r24, 0x22	; 34
    12e0:	91 e0       	ldi	r25, 0x01	; 1
    12e2:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
			default: break;
		}
	countdown_out(val);	
    12e6:	81 2f       	mov	r24, r17
    12e8:	0e 94 bb 08 	call	0x1176	; 0x1176 <countdown_out>
}
    12ec:	1f 91       	pop	r17
    12ee:	08 95       	ret

000012f0 <max_date>:
/*------------------------------------------------------------------------------------------------*/  
/*------------------------------------------------------------------------------------------------*/ 
unsigned char max_date(unsigned char val_month, unsigned char val_year)
{
	val_year+=2000;
	if(val_month==2)	{	if(val_year%4==0)	return 29;	else	return 28;	}
    12f0:	82 30       	cpi	r24, 0x02	; 2
    12f2:	21 f4       	brne	.+8      	; 0x12fc <max_date+0xc>
    12f4:	63 70       	andi	r22, 0x03	; 3
    12f6:	61 f4       	brne	.+24     	; 0x1310 <max_date+0x20>
    12f8:	8d e1       	ldi	r24, 0x1D	; 29
    12fa:	08 95       	ret
	else	{	if(val_month==4||val_month==6||val_month==9||val_month==11)		return 30;	else	return 31;	}	
    12fc:	84 30       	cpi	r24, 0x04	; 4
    12fe:	51 f0       	breq	.+20     	; 0x1314 <max_date+0x24>
    1300:	86 30       	cpi	r24, 0x06	; 6
    1302:	51 f0       	breq	.+20     	; 0x1318 <max_date+0x28>
    1304:	89 30       	cpi	r24, 0x09	; 9
    1306:	51 f0       	breq	.+20     	; 0x131c <max_date+0x2c>
    1308:	8b 30       	cpi	r24, 0x0B	; 11
    130a:	51 f4       	brne	.+20     	; 0x1320 <max_date+0x30>
    130c:	8e e1       	ldi	r24, 0x1E	; 30
    130e:	08 95       	ret
/*------------------------------------------------------------------------------------------------*/  
/*------------------------------------------------------------------------------------------------*/ 
unsigned char max_date(unsigned char val_month, unsigned char val_year)
{
	val_year+=2000;
	if(val_month==2)	{	if(val_year%4==0)	return 29;	else	return 28;	}
    1310:	8c e1       	ldi	r24, 0x1C	; 28
    1312:	08 95       	ret
	else	{	if(val_month==4||val_month==6||val_month==9||val_month==11)		return 30;	else	return 31;	}	
    1314:	8e e1       	ldi	r24, 0x1E	; 30
    1316:	08 95       	ret
    1318:	8e e1       	ldi	r24, 0x1E	; 30
    131a:	08 95       	ret
    131c:	8e e1       	ldi	r24, 0x1E	; 30
    131e:	08 95       	ret
    1320:	8f e1       	ldi	r24, 0x1F	; 31
}
    1322:	08 95       	ret

00001324 <conver2date>:

uint16_t conver2date(unsigned int val_date,unsigned int val_month,unsigned int val_year)
{
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	8b 01       	movw	r16, r22
	unsigned int kqua;
	kqua=(val_year-13)*365;	// Tinh so ngay tu nam 2013
    1332:	ec 01       	movw	r28, r24
    1334:	c9 58       	subi	r28, 0x89	; 137
    1336:	d2 41       	sbci	r29, 0x12	; 18
    1338:	2d e6       	ldi	r18, 0x6D	; 109
    133a:	31 e0       	ldi	r19, 0x01	; 1
    133c:	42 9f       	mul	r20, r18
    133e:	c0 01       	movw	r24, r0
    1340:	43 9f       	mul	r20, r19
    1342:	90 0d       	add	r25, r0
    1344:	52 9f       	mul	r21, r18
    1346:	90 0d       	add	r25, r0
    1348:	11 24       	eor	r1, r1
	kqua+=val_date;
    134a:	c8 0f       	add	r28, r24
    134c:	d9 1f       	adc	r29, r25
	if(val_month>1)
    134e:	62 30       	cpi	r22, 0x02	; 2
    1350:	71 05       	cpc	r23, r1
    1352:	70 f0       	brcs	.+28     	; 0x1370 <conver2date+0x4c>
		for (uint8_t i=1;i<val_month;i++)
		{
			kqua+=max_date(val_month,val_year);
    1354:	86 2f       	mov	r24, r22
    1356:	64 2f       	mov	r22, r20
    1358:	0e 94 78 09 	call	0x12f0	; 0x12f0 <max_date>
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	41 e0       	ldi	r20, 0x01	; 1
    1360:	c8 0f       	add	r28, r24
    1362:	d9 1f       	adc	r29, r25
{
	unsigned int kqua;
	kqua=(val_year-13)*365;	// Tinh so ngay tu nam 2013
	kqua+=val_date;
	if(val_month>1)
		for (uint8_t i=1;i<val_month;i++)
    1364:	4f 5f       	subi	r20, 0xFF	; 255
    1366:	24 2f       	mov	r18, r20
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	20 17       	cp	r18, r16
    136c:	31 07       	cpc	r19, r17
    136e:	c0 f3       	brcs	.-16     	; 0x1360 <conver2date+0x3c>
			kqua+=max_date(val_month,val_year);
		}
	if((val_year+2000)%4==0)
		return kqua++;
	return kqua;
}
    1370:	7e 01       	movw	r14, r28
    1372:	8c 2f       	mov	r24, r28
    1374:	9f 2d       	mov	r25, r15
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	ff 90       	pop	r15
    1380:	ef 90       	pop	r14
    1382:	08 95       	ret

00001384 <convert2minute>:

uint16_t convert2minute(uint8_t val_min, uint8_t val_hour)
{
	return (val_hour*60+val_min);
    1384:	9c e3       	ldi	r25, 0x3C	; 60
    1386:	69 9f       	mul	r22, r25
    1388:	b0 01       	movw	r22, r0
    138a:	11 24       	eor	r1, r1
    138c:	68 0f       	add	r22, r24
    138e:	71 1d       	adc	r23, r1
}
    1390:	86 2f       	mov	r24, r22
    1392:	97 2f       	mov	r25, r23
    1394:	08 95       	ret

00001396 <reset_eeprom>:

void reset_eeprom()
{
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
	cli();
    139a:	f8 94       	cli
    139c:	c0 e0       	ldi	r28, 0x00	; 0
    139e:	d0 e0       	ldi	r29, 0x00	; 0
	for (unsigned char i=1;i<=48;i++)
		{
			while(!eeprom_is_ready());	
    13a0:	e1 99       	sbic	0x1c, 1	; 28
    13a2:	fe cf       	rjmp	.-4      	; 0x13a0 <reset_eeprom+0xa>
uint16_t convert2minute(uint8_t val_min, uint8_t val_hour)
{
	return (val_hour*60+val_min);
}

void reset_eeprom()
    13a4:	21 96       	adiw	r28, 0x01	; 1
{
	cli();
	for (unsigned char i=1;i<=48;i++)
		{
			while(!eeprom_is_ready());	
			eeprom_write_byte(i,255);
    13a6:	ce 01       	movw	r24, r28
    13a8:	6f ef       	ldi	r22, 0xFF	; 255
    13aa:	0e 94 b6 12 	call	0x256c	; 0x256c <__eewr_byte_m32>
    13ae:	8f ec       	ldi	r24, 0xCF	; 207
    13b0:	97 e0       	ldi	r25, 0x07	; 7
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <reset_eeprom+0x1c>
    13b6:	00 c0       	rjmp	.+0      	; 0x13b8 <reset_eeprom+0x22>
    13b8:	00 00       	nop
}

void reset_eeprom()
{
	cli();
	for (unsigned char i=1;i<=48;i++)
    13ba:	c0 33       	cpi	r28, 0x30	; 48
    13bc:	d1 05       	cpc	r29, r1
    13be:	81 f7       	brne	.-32     	; 0x13a0 <reset_eeprom+0xa>
		{
			while(!eeprom_is_ready());	
			eeprom_write_byte(i,255);
			_delay_ms(1);//Cho 1ms
		}
	sei();
    13c0:	78 94       	sei
}
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

000013c8 <update_count>:
	sei();
}

// Ham update cac gia tri hen gio neu mat dien
void update_count()
{
    13c8:	7f 92       	push	r7
    13ca:	8f 92       	push	r8
    13cc:	9f 92       	push	r9
    13ce:	af 92       	push	r10
    13d0:	bf 92       	push	r11
    13d2:	cf 92       	push	r12
    13d4:	df 92       	push	r13
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	66 97       	sbiw	r28, 0x16	; 22
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
	cli();
    13f2:	f8 94       	cli
    13f4:	cc 24       	eor	r12, r12
    13f6:	dd 24       	eor	r13, r13
    13f8:	68 94       	set
    13fa:	c1 f8       	bld	r12, 1
    13fc:	cc 0e       	add	r12, r28
    13fe:	dd 1e       	adc	r13, r29
    1400:	76 01       	movw	r14, r12
    1402:	00 e0       	ldi	r16, 0x00	; 0
    1404:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t temp_date, temp_min, temp_val, flag=0;
	
	//Lay data tu eeprom
	for(uint8_t i=1;i<=14;i++)
	{
		while(!eeprom_is_ready());		
    1406:	e1 99       	sbic	0x1c, 1	; 28
    1408:	fe cf       	rjmp	.-4      	; 0x1406 <update_count+0x3e>
		}		
	sei();
}

// Ham update cac gia tri hen gio neu mat dien
void update_count()
    140a:	0f 5f       	subi	r16, 0xFF	; 255
    140c:	1f 4f       	sbci	r17, 0xFF	; 255
	
	//Lay data tu eeprom
	for(uint8_t i=1;i<=14;i++)
	{
		while(!eeprom_is_ready());		
		copy_eeprom[i]=eeprom_read_byte(i);	
    140e:	c8 01       	movw	r24, r16
    1410:	0e 94 ae 12 	call	0x255c	; 0x255c <__eerd_byte_m32>
    1414:	f7 01       	movw	r30, r14
    1416:	81 93       	st	Z+, r24
    1418:	7f 01       	movw	r14, r30
    141a:	8f ec       	ldi	r24, 0xCF	; 207
    141c:	97 e0       	ldi	r25, 0x07	; 7
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <update_count+0x56>
    1422:	00 c0       	rjmp	.+0      	; 0x1424 <update_count+0x5c>
    1424:	00 00       	nop
	cli();
	uint8_t copy_eeprom[15],copy_tData[7];
	uint16_t temp_date, temp_min, temp_val, flag=0;
	
	//Lay data tu eeprom
	for(uint8_t i=1;i<=14;i++)
    1426:	0e 30       	cpi	r16, 0x0E	; 14
    1428:	11 05       	cpc	r17, r1
    142a:	69 f7       	brne	.-38     	; 0x1406 <update_count+0x3e>
		_delay_ms(1);
	}
	
	//Kiem tra xem truoc do co hen gio hay khong
	for(uint8_t i=1;i<=4;i++)
		if(copy_eeprom[i+6]!=255)
    142c:	88 85       	ldd	r24, Y+8	; 0x08
    142e:	8f 3f       	cpi	r24, 0xFF	; 255
    1430:	61 f4       	brne	.+24     	; 0x144a <update_count+0x82>
    1432:	89 85       	ldd	r24, Y+9	; 0x09
    1434:	8f 3f       	cpi	r24, 0xFF	; 255
    1436:	49 f4       	brne	.+18     	; 0x144a <update_count+0x82>
    1438:	8a 85       	ldd	r24, Y+10	; 0x0a
    143a:	8f 3f       	cpi	r24, 0xFF	; 255
    143c:	31 f4       	brne	.+12     	; 0x144a <update_count+0x82>
    143e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1440:	8f 3f       	cpi	r24, 0xFF	; 255
    1442:	19 f4       	brne	.+6      	; 0x144a <update_count+0x82>
			eeprom_write_byte(i,copy_eeprom[i]);
			_delay_ms(1);
			}
		}
	else
		reset_eeprom();		
    1444:	0e 94 cb 09 	call	0x1396	; 0x1396 <reset_eeprom>
    1448:	b9 c0       	rjmp	.+370    	; 0x15bc <update_count+0x1f4>
				break;
			}
	if(flag)
		{
		//Lay thoi gian thuc
		copy_tData[2]=BCD2Dec(tData[2] & 0x3F);
    144a:	80 91 0a 02 	lds	r24, 0x020A
    144e:	8f 73       	andi	r24, 0x3F	; 63
    1450:	0e 94 58 05 	call	0xab0	; 0xab0 <BCD2Dec>
    1454:	8a 8b       	std	Y+18, r24	; 0x12
    1456:	12 e0       	ldi	r17, 0x02	; 2
    1458:	01 e0       	ldi	r16, 0x01	; 1
		for(uint8_t i=1;i<=6;i++)
			if(i!=2)
				copy_tData[i]=BCD2Dec(tData[i]);
    145a:	0f 2e       	mov	r0, r31
    145c:	f8 e0       	ldi	r31, 0x08	; 8
    145e:	af 2e       	mov	r10, r31
    1460:	f2 e0       	ldi	r31, 0x02	; 2
    1462:	bf 2e       	mov	r11, r31
    1464:	f0 2d       	mov	r31, r0
    1466:	88 24       	eor	r8, r8
    1468:	99 24       	eor	r9, r9
    146a:	68 94       	set
    146c:	84 f8       	bld	r8, 4
    146e:	8c 0e       	add	r8, r28
    1470:	9d 1e       	adc	r9, r29
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <update_count+0xb0>
				break;
			}
	if(flag)
		{
		//Lay thoi gian thuc
		copy_tData[2]=BCD2Dec(tData[2] & 0x3F);
    1474:	0f 5f       	subi	r16, 0xFF	; 255
    1476:	1f 5f       	subi	r17, 0xFF	; 255
		for(uint8_t i=1;i<=6;i++)
			if(i!=2)
    1478:	02 30       	cpi	r16, 0x02	; 2
    147a:	e1 f3       	breq	.-8      	; 0x1474 <update_count+0xac>
				copy_tData[i]=BCD2Dec(tData[i]);
    147c:	e0 2e       	mov	r14, r16
    147e:	ff 24       	eor	r15, r15
    1480:	f5 01       	movw	r30, r10
    1482:	ee 0d       	add	r30, r14
    1484:	ff 1d       	adc	r31, r15
    1486:	80 81       	ld	r24, Z
    1488:	0e 94 58 05 	call	0xab0	; 0xab0 <BCD2Dec>
    148c:	f4 01       	movw	r30, r8
    148e:	ee 0d       	add	r30, r14
    1490:	ff 1d       	adc	r31, r15
    1492:	80 83       	st	Z, r24
			}
	if(flag)
		{
		//Lay thoi gian thuc
		copy_tData[2]=BCD2Dec(tData[2] & 0x3F);
		for(uint8_t i=1;i<=6;i++)
    1494:	17 30       	cpi	r17, 0x07	; 7
    1496:	70 f3       	brcs	.-36     	; 0x1474 <update_count+0xac>
			if(i!=2)
				copy_tData[i]=BCD2Dec(tData[i]);
		
		//Tinh khoang lech thoi gian thuc so voi gia tri trong eeprom
		temp_date = conver2date(copy_tData[4],copy_tData[5],copy_tData[6])-conver2date(copy_eeprom[4],copy_eeprom[5],copy_eeprom[6]);
    1498:	6d 89       	ldd	r22, Y+21	; 0x15
    149a:	4e 89       	ldd	r20, Y+22	; 0x16
    149c:	8c 89       	ldd	r24, Y+20	; 0x14
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	0e 94 92 09 	call	0x1324	; 0x1324 <conver2date>
    14a8:	7c 01       	movw	r14, r24
    14aa:	6e 81       	ldd	r22, Y+6	; 0x06
    14ac:	4f 81       	ldd	r20, Y+7	; 0x07
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	0e 94 92 09 	call	0x1324	; 0x1324 <conver2date>
    14ba:	4c 01       	movw	r8, r24
		temp_min = convert2minute(copy_tData[1],copy_tData[2])-convert2minute(copy_eeprom[1],copy_eeprom[2]);
    14bc:	89 89       	ldd	r24, Y+17	; 0x11
    14be:	6a 89       	ldd	r22, Y+18	; 0x12
    14c0:	0e 94 c2 09 	call	0x1384	; 0x1384 <convert2minute>
    14c4:	8c 01       	movw	r16, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	6b 81       	ldd	r22, Y+3	; 0x03
    14ca:	0e 94 c2 09 	call	0x1384	; 0x1384 <convert2minute>
    14ce:	08 1b       	sub	r16, r24
    14d0:	19 0b       	sbc	r17, r25
		for(uint8_t i=1;i<=6;i++)
			if(i!=2)
				copy_tData[i]=BCD2Dec(tData[i]);
		
		//Tinh khoang lech thoi gian thuc so voi gia tri trong eeprom
		temp_date = conver2date(copy_tData[4],copy_tData[5],copy_tData[6])-conver2date(copy_eeprom[4],copy_eeprom[5],copy_eeprom[6]);
    14d2:	e8 18       	sub	r14, r8
    14d4:	f9 08       	sbc	r15, r9
		temp_min = convert2minute(copy_tData[1],copy_tData[2])-convert2minute(copy_eeprom[1],copy_eeprom[2]);
		temp_val = temp_date*1440+temp_min;
    14d6:	20 ea       	ldi	r18, 0xA0	; 160
    14d8:	35 e0       	ldi	r19, 0x05	; 5
    14da:	e2 9e       	mul	r14, r18
    14dc:	c0 01       	movw	r24, r0
    14de:	e3 9e       	mul	r14, r19
    14e0:	90 0d       	add	r25, r0
    14e2:	f2 9e       	mul	r15, r18
    14e4:	90 0d       	add	r25, r0
    14e6:	11 24       	eor	r1, r1
    14e8:	58 01       	movw	r10, r16
    14ea:	a8 0e       	add	r10, r24
    14ec:	b9 1e       	adc	r11, r25
    14ee:	fe 01       	movw	r30, r28
    14f0:	71 96       	adiw	r30, 0x11	; 17
		}		
	sei();
}

// Ham update cac gia tri hen gio neu mat dien
void update_count()
    14f2:	ce 01       	movw	r24, r28
    14f4:	47 96       	adiw	r24, 0x17	; 23
    14f6:	d6 01       	movw	r26, r12
		temp_min = convert2minute(copy_tData[1],copy_tData[2])-convert2minute(copy_eeprom[1],copy_eeprom[2]);
		temp_val = temp_date*1440+temp_min;
	
		//Luu gia tri thoi gian thuc moi vao eeprom
		for(uint8_t i=1;i<=6;i++)
			copy_eeprom[i]=copy_tData[i];
    14f8:	21 91       	ld	r18, Z+
    14fa:	2d 93       	st	X+, r18
		temp_date = conver2date(copy_tData[4],copy_tData[5],copy_tData[6])-conver2date(copy_eeprom[4],copy_eeprom[5],copy_eeprom[6]);
		temp_min = convert2minute(copy_tData[1],copy_tData[2])-convert2minute(copy_eeprom[1],copy_eeprom[2]);
		temp_val = temp_date*1440+temp_min;
	
		//Luu gia tri thoi gian thuc moi vao eeprom
		for(uint8_t i=1;i<=6;i++)
    14fc:	e8 17       	cp	r30, r24
    14fe:	f9 07       	cpc	r31, r25
    1500:	d9 f7       	brne	.-10     	; 0x14f8 <update_count+0x130>
			copy_eeprom[i]=copy_tData[i];
		
		//So sanh thoi gian de xac dinh trang thai can co cua thiet bi dk: khoang lech >0
		if(temp_val>0)
    1502:	a1 14       	cp	r10, r1
    1504:	b1 04       	cpc	r11, r1
    1506:	49 f4       	brne	.+18     	; 0x151a <update_count+0x152>
    1508:	fe 01       	movw	r30, r28
    150a:	38 96       	adiw	r30, 0x08	; 8
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
		//Tao du lieu countdown_min va state_count moi
		for(uint8_t i=1;i<=4;i++)
			{
				if(copy_eeprom[i+6]!=255)
					{
					countdown_min[i]=copy_eeprom[i+6];
    1510:	4e e5       	ldi	r20, 0x5E	; 94
    1512:	51 e0       	ldi	r21, 0x01	; 1
					state_count[i]=copy_eeprom[i+10];						
    1514:	23 e6       	ldi	r18, 0x63	; 99
    1516:	31 e0       	ldi	r19, 0x01	; 1
    1518:	2c c0       	rjmp	.+88     	; 0x1572 <update_count+0x1aa>
		//Luu gia tri thoi gian thuc moi vao eeprom
		for(uint8_t i=1;i<=6;i++)
			copy_eeprom[i]=copy_tData[i];
		
		//So sanh thoi gian de xac dinh trang thai can co cua thiet bi dk: khoang lech >0
		if(temp_val>0)
    151a:	8e 01       	movw	r16, r28
    151c:	08 5f       	subi	r16, 0xF8	; 248
    151e:	1f 4f       	sbci	r17, 0xFF	; 255
    1520:	ee 24       	eor	r14, r14
    1522:	e3 94       	inc	r14
			for(uint8_t i=1;i<=4;i++)
				if(copy_eeprom[i+6]>temp_val)
					copy_eeprom[i+6]-=temp_val;
				else
					{
						if(copy_eeprom[i+6]=temp_val)
    1524:	7a 2c       	mov	r7, r10
							if(copy_eeprom[i+10]==0xf0)
								on_device(i);
							else
								off_device(i);
						copy_eeprom[i+6]=0xff;
    1526:	ff 24       	eor	r15, r15
    1528:	fa 94       	dec	r15
		}		
	sei();
}

// Ham update cac gia tri hen gio neu mat dien
void update_count()
    152a:	48 01       	movw	r8, r16
			copy_eeprom[i]=copy_tData[i];
		
		//So sanh thoi gian de xac dinh trang thai can co cua thiet bi dk: khoang lech >0
		if(temp_val>0)
			for(uint8_t i=1;i<=4;i++)
				if(copy_eeprom[i+6]>temp_val)
    152c:	f8 01       	movw	r30, r16
    152e:	20 81       	ld	r18, Z
    1530:	82 2f       	mov	r24, r18
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	a8 16       	cp	r10, r24
    1536:	b9 06       	cpc	r11, r25
    1538:	18 f4       	brcc	.+6      	; 0x1540 <update_count+0x178>
					copy_eeprom[i+6]-=temp_val;
    153a:	2a 19       	sub	r18, r10
    153c:	20 83       	st	Z, r18
    153e:	12 c0       	rjmp	.+36     	; 0x1564 <update_count+0x19c>
				else
					{
						if(copy_eeprom[i+6]=temp_val)
    1540:	f8 01       	movw	r30, r16
    1542:	a0 82       	st	Z, r10
    1544:	77 20       	and	r7, r7
    1546:	59 f0       	breq	.+22     	; 0x155e <update_count+0x196>
							if(copy_eeprom[i+10]==0xf0)
    1548:	f8 01       	movw	r30, r16
    154a:	84 81       	ldd	r24, Z+4	; 0x04
    154c:	80 3f       	cpi	r24, 0xF0	; 240
    154e:	21 f4       	brne	.+8      	; 0x1558 <update_count+0x190>
								on_device(i);
    1550:	8e 2d       	mov	r24, r14
    1552:	0e 94 f7 01 	call	0x3ee	; 0x3ee <on_device>
    1556:	03 c0       	rjmp	.+6      	; 0x155e <update_count+0x196>
							else
								off_device(i);
    1558:	8e 2d       	mov	r24, r14
    155a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <off_device>
						copy_eeprom[i+6]=0xff;
    155e:	f4 01       	movw	r30, r8
    1560:	f0 82       	st	Z, r15
						copy_eeprom[i+10]=0xff;
    1562:	f4 82       	std	Z+4, r15	; 0x04
		for(uint8_t i=1;i<=6;i++)
			copy_eeprom[i]=copy_tData[i];
		
		//So sanh thoi gian de xac dinh trang thai can co cua thiet bi dk: khoang lech >0
		if(temp_val>0)
			for(uint8_t i=1;i<=4;i++)
    1564:	e3 94       	inc	r14
    1566:	0f 5f       	subi	r16, 0xFF	; 255
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	fe 2d       	mov	r31, r14
    156c:	f5 30       	cpi	r31, 0x05	; 5
    156e:	e9 f6       	brne	.-70     	; 0x152a <update_count+0x162>
    1570:	cb cf       	rjmp	.-106    	; 0x1508 <update_count+0x140>
		}		
	sei();
}

// Ham update cac gia tri hen gio neu mat dien
void update_count()
    1572:	01 96       	adiw	r24, 0x01	; 1
					}
				
		//Tao du lieu countdown_min va state_count moi
		for(uint8_t i=1;i<=4;i++)
			{
				if(copy_eeprom[i+6]!=255)
    1574:	61 91       	ld	r22, Z+
    1576:	6f 3f       	cpi	r22, 0xFF	; 255
    1578:	49 f0       	breq	.+18     	; 0x158c <update_count+0x1c4>
					{
					countdown_min[i]=copy_eeprom[i+6];
    157a:	da 01       	movw	r26, r20
    157c:	a8 0f       	add	r26, r24
    157e:	b9 1f       	adc	r27, r25
    1580:	6c 93       	st	X, r22
					state_count[i]=copy_eeprom[i+10];						
    1582:	63 81       	ldd	r22, Z+3	; 0x03
    1584:	d9 01       	movw	r26, r18
    1586:	a8 0f       	add	r26, r24
    1588:	b9 1f       	adc	r27, r25
    158a:	6c 93       	st	X, r22
						copy_eeprom[i+6]=0xff;
						copy_eeprom[i+10]=0xff;
					}
				
		//Tao du lieu countdown_min va state_count moi
		for(uint8_t i=1;i<=4;i++)
    158c:	84 30       	cpi	r24, 0x04	; 4
    158e:	91 05       	cpc	r25, r1
    1590:	81 f7       	brne	.-32     	; 0x1572 <update_count+0x1aa>
    1592:	00 e0       	ldi	r16, 0x00	; 0
    1594:	10 e0       	ldi	r17, 0x00	; 0
			}
		
		//Luu gia tri moi vao eeprom
		for(uint8_t i=1;i<15;i++)
			{
			while(!eeprom_is_ready());
    1596:	e1 99       	sbic	0x1c, 1	; 28
    1598:	fe cf       	rjmp	.-4      	; 0x1596 <update_count+0x1ce>
		}		
	sei();
}

// Ham update cac gia tri hen gio neu mat dien
void update_count()
    159a:	0f 5f       	subi	r16, 0xFF	; 255
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
		
		//Luu gia tri moi vao eeprom
		for(uint8_t i=1;i<15;i++)
			{
			while(!eeprom_is_ready());
			eeprom_write_byte(i,copy_eeprom[i]);
    159e:	f6 01       	movw	r30, r12
    15a0:	61 91       	ld	r22, Z+
    15a2:	6f 01       	movw	r12, r30
    15a4:	c8 01       	movw	r24, r16
    15a6:	0e 94 b6 12 	call	0x256c	; 0x256c <__eewr_byte_m32>
    15aa:	8f ec       	ldi	r24, 0xCF	; 207
    15ac:	97 e0       	ldi	r25, 0x07	; 7
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <update_count+0x1e6>
    15b2:	00 c0       	rjmp	.+0      	; 0x15b4 <update_count+0x1ec>
    15b4:	00 00       	nop
					state_count[i]=copy_eeprom[i+10];						
					}
			}
		
		//Luu gia tri moi vao eeprom
		for(uint8_t i=1;i<15;i++)
    15b6:	0e 30       	cpi	r16, 0x0E	; 14
    15b8:	11 05       	cpc	r17, r1
    15ba:	69 f7       	brne	.-38     	; 0x1596 <update_count+0x1ce>
			_delay_ms(1);
			}
		}
	else
		reset_eeprom();		
	sei();
    15bc:	78 94       	sei
}
    15be:	66 96       	adiw	r28, 0x16	; 22
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	ff 90       	pop	r15
    15d4:	ef 90       	pop	r14
    15d6:	df 90       	pop	r13
    15d8:	cf 90       	pop	r12
    15da:	bf 90       	pop	r11
    15dc:	af 90       	pop	r10
    15de:	9f 90       	pop	r9
    15e0:	8f 90       	pop	r8
    15e2:	7f 90       	pop	r7
    15e4:	08 95       	ret

000015e6 <now_device>:

void now_device (uint8_t device)
{
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
	uint8_t flag=0;
	if(state_count[device]==240)
    15ea:	c8 2f       	mov	r28, r24
    15ec:	d0 e0       	ldi	r29, 0x00	; 0
    15ee:	fe 01       	movw	r30, r28
    15f0:	ed 59       	subi	r30, 0x9D	; 157
    15f2:	fe 4f       	sbci	r31, 0xFE	; 254
    15f4:	90 81       	ld	r25, Z
    15f6:	90 3f       	cpi	r25, 0xF0	; 240
    15f8:	19 f4       	brne	.+6      	; 0x1600 <now_device+0x1a>
		on_device(device);
    15fa:	0e 94 f7 01 	call	0x3ee	; 0x3ee <on_device>
    15fe:	08 c0       	rjmp	.+16     	; 0x1610 <now_device+0x2a>
	else
		if(state_count[device]==15)
    1600:	fe 01       	movw	r30, r28
    1602:	ed 59       	subi	r30, 0x9D	; 157
    1604:	fe 4f       	sbci	r31, 0xFE	; 254
    1606:	90 81       	ld	r25, Z
    1608:	9f 30       	cpi	r25, 0x0F	; 15
    160a:	11 f4       	brne	.+4      	; 0x1610 <now_device+0x2a>
			off_device(device);
    160c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <off_device>
	countdown_min[device]=0;	
    1610:	fe 01       	movw	r30, r28
    1612:	e2 5a       	subi	r30, 0xA2	; 162
    1614:	fe 4f       	sbci	r31, 0xFE	; 254
    1616:	10 82       	st	Z, r1
	state_count[device]=0;
    1618:	cd 59       	subi	r28, 0x9D	; 157
    161a:	de 4f       	sbci	r29, 0xFE	; 254
    161c:	18 82       	st	Y, r1
	for(uint8_t i=1;i<=4;i++)
		if(countdown_min[i]!=255)
    161e:	80 91 5f 01 	lds	r24, 0x015F
    1622:	8f 3f       	cpi	r24, 0xFF	; 255
    1624:	61 f4       	brne	.+24     	; 0x163e <now_device+0x58>
    1626:	80 91 60 01 	lds	r24, 0x0160
    162a:	8f 3f       	cpi	r24, 0xFF	; 255
    162c:	41 f4       	brne	.+16     	; 0x163e <now_device+0x58>
    162e:	80 91 61 01 	lds	r24, 0x0161
    1632:	8f 3f       	cpi	r24, 0xFF	; 255
    1634:	21 f4       	brne	.+8      	; 0x163e <now_device+0x58>
    1636:	80 91 62 01 	lds	r24, 0x0162
    163a:	8f 3f       	cpi	r24, 0xFF	; 255
    163c:	11 f0       	breq	.+4      	; 0x1642 <now_device+0x5c>
			{
			flag=0;
			reset_eeprom();
    163e:	0e 94 cb 09 	call	0x1396	; 0x1396 <reset_eeprom>
		while(!eeprom_is_ready());
		eeprom_write_byte(device+10,255);
		_delay_ms(1);	
		sei();
	}
}
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	08 95       	ret

00001648 <active_countdown>:



void active_countdown()
{
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	c0 e0       	ldi	r28, 0x00	; 0
    1652:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i=1;i<=4;i++)
	{	
		if(countdown_min[i]<=240&&countdown_min[i]!=0)
    1654:	0e e5       	ldi	r16, 0x5E	; 94
    1656:	11 e0       	ldi	r17, 0x01	; 1
}



void active_countdown()
{
    1658:	9e 01       	movw	r18, r28
    165a:	2f 5f       	subi	r18, 0xFF	; 255
    165c:	82 2f       	mov	r24, r18
	}
}



void active_countdown()
    165e:	21 96       	adiw	r28, 0x01	; 1
{
	for(uint8_t i=1;i<=4;i++)
	{	
		if(countdown_min[i]<=240&&countdown_min[i]!=0)
    1660:	f8 01       	movw	r30, r16
    1662:	ec 0f       	add	r30, r28
    1664:	fd 1f       	adc	r31, r29
    1666:	90 81       	ld	r25, Z
    1668:	91 3f       	cpi	r25, 0xF1	; 241
    166a:	a8 f4       	brcc	.+42     	; 0x1696 <active_countdown+0x4e>
    166c:	f8 01       	movw	r30, r16
    166e:	ec 0f       	add	r30, r28
    1670:	fd 1f       	adc	r31, r29
    1672:	90 81       	ld	r25, Z
    1674:	99 23       	and	r25, r25
    1676:	79 f0       	breq	.+30     	; 0x1696 <active_countdown+0x4e>
			{
			if(countdown_min[i]==1)
    1678:	f8 01       	movw	r30, r16
    167a:	ec 0f       	add	r30, r28
    167c:	fd 1f       	adc	r31, r29
    167e:	90 81       	ld	r25, Z
    1680:	91 30       	cpi	r25, 0x01	; 1
    1682:	19 f4       	brne	.+6      	; 0x168a <active_countdown+0x42>
				now_device(i);	
    1684:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <now_device>
    1688:	06 c0       	rjmp	.+12     	; 0x1696 <active_countdown+0x4e>
			else
				countdown_min[i]--;					
    168a:	f8 01       	movw	r30, r16
    168c:	ec 0f       	add	r30, r28
    168e:	fd 1f       	adc	r31, r29
    1690:	80 81       	ld	r24, Z
    1692:	81 50       	subi	r24, 0x01	; 1
    1694:	80 83       	st	Z, r24



void active_countdown()
{
	for(uint8_t i=1;i<=4;i++)
    1696:	c4 30       	cpi	r28, 0x04	; 4
    1698:	d1 05       	cpc	r29, r1
    169a:	f1 f6       	brne	.-68     	; 0x1658 <active_countdown+0x10>
				now_device(i);	
			else
				countdown_min[i]--;					
			}
	}
}
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	08 95       	ret

000016a6 <check_time>:
	countdown_out(val);	
}

void check_time()
{
	TWI_DS1307_wadr(0x00); 				//set dia chi ve 0
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	0e 94 30 01 	call	0x260	; 0x260 <TWI_DS1307_wadr>
    16ac:	8f ec       	ldi	r24, 0xCF	; 207
    16ae:	97 e0       	ldi	r25, 0x07	; 7
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <check_time+0xa>
    16b4:	00 c0       	rjmp	.+0      	; 0x16b6 <check_time+0x10>
    16b6:	00 00       	nop
	_delay_ms(1);		   				//cho DS1307 xu li 
	TWI_DS1307_rblock(tData,7); 	//doc ca khoi thoi gian (7 bytes)			
    16b8:	88 e0       	ldi	r24, 0x08	; 8
    16ba:	92 e0       	ldi	r25, 0x02	; 2
    16bc:	67 e0       	ldi	r22, 0x07	; 7
    16be:	0e 94 97 01 	call	0x32e	; 0x32e <TWI_DS1307_rblock>
	//hien thi ket qua len LCD
	if(BCD2Dec(tData[0]) !=Second)	//chi hien thi ket qua khi da qua 1s
    16c2:	80 91 08 02 	lds	r24, 0x0208
    16c6:	0e 94 58 05 	call	0xab0	; 0xab0 <BCD2Dec>
    16ca:	90 91 28 01 	lds	r25, 0x0128
    16ce:	89 17       	cp	r24, r25
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <check_time+0x2e>
    16d2:	80 c0       	rjmp	.+256    	; 0x17d4 <check_time+0x12e>
		{ 			
			Second=BCD2Dec(tData[0] & 0x7F);
    16d4:	80 91 08 02 	lds	r24, 0x0208
    16d8:	8f 77       	andi	r24, 0x7F	; 127
    16da:	0e 94 58 05 	call	0xab0	; 0xab0 <BCD2Dec>
    16de:	80 93 28 01 	sts	0x0128, r24
			sprintf(dis, "%i",Second); 
    16e2:	20 91 28 01 	lds	r18, 0x0128
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <check_time+0x42>
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <check_time+0x44>
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <check_time+0x46>
    16ec:	ed b7       	in	r30, 0x3d	; 61
    16ee:	fe b7       	in	r31, 0x3e	; 62
    16f0:	31 96       	adiw	r30, 0x01	; 1
    16f2:	80 e5       	ldi	r24, 0x50	; 80
    16f4:	93 e0       	ldi	r25, 0x03	; 3
    16f6:	ad b7       	in	r26, 0x3d	; 61
    16f8:	be b7       	in	r27, 0x3e	; 62
    16fa:	12 96       	adiw	r26, 0x02	; 2
    16fc:	9c 93       	st	X, r25
    16fe:	8e 93       	st	-X, r24
    1700:	11 97       	sbiw	r26, 0x01	; 1
    1702:	88 ef       	ldi	r24, 0xF8	; 248
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	93 83       	std	Z+3, r25	; 0x03
    1708:	82 83       	std	Z+2, r24	; 0x02
    170a:	24 83       	std	Z+4, r18	; 0x04
    170c:	15 82       	std	Z+5, r1	; 0x05
    170e:	0e 94 a4 10 	call	0x2148	; 0x2148 <sprintf>
			move_LCD(1,7); 
    1712:	8d b7       	in	r24, 0x3d	; 61
    1714:	9e b7       	in	r25, 0x3e	; 62
    1716:	06 96       	adiw	r24, 0x06	; 6
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	9e bf       	out	0x3e, r25	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	8d bf       	out	0x3d, r24	; 61
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	67 e0       	ldi	r22, 0x07	; 7
    1726:	0e 94 02 01 	call	0x204	; 0x204 <move_LCD>
			if (Second<10) 
    172a:	80 91 28 01 	lds	r24, 0x0128
    172e:	8a 30       	cpi	r24, 0x0A	; 10
    1730:	18 f4       	brcc	.+6      	; 0x1738 <check_time+0x92>
				putChar_LCD('0');	
    1732:	80 e3       	ldi	r24, 0x30	; 48
    1734:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <putChar_LCD>
			print_LCD(dis);
    1738:	80 e5       	ldi	r24, 0x50	; 80
    173a:	93 e0       	ldi	r25, 0x03	; 3
    173c:	0e 94 15 01 	call	0x22a	; 0x22a <print_LCD>
			if (Second==0) //moi phut cap nhat 1 lan	
    1740:	80 91 28 01 	lds	r24, 0x0128
    1744:	88 23       	and	r24, r24
    1746:	c1 f4       	brne	.+48     	; 0x1778 <check_time+0xd2>
				{
					active_countdown();
    1748:	0e 94 24 0b 	call	0x1648	; 0x1648 <active_countdown>
					Display();
    174c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Display>
					adc_out(read_adc(0));
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	0e 94 d6 07 	call	0xfac	; 0xfac <read_adc>
    1756:	0e 94 de 07 	call	0xfbc	; 0xfbc <adc_out>
					if(choise_device>0&&choise_device<5)	
    175a:	80 91 30 01 	lds	r24, 0x0130
    175e:	98 2f       	mov	r25, r24
    1760:	91 50       	subi	r25, 0x01	; 1
    1762:	94 30       	cpi	r25, 0x04	; 4
    1764:	10 f4       	brcc	.+4      	; 0x176a <check_time+0xc4>
						check_on_off(choise_device);
    1766:	0e 94 21 09 	call	0x1242	; 0x1242 <check_on_off>
					if(hanche_sms>0)
    176a:	80 91 59 01 	lds	r24, 0x0159
    176e:	88 23       	and	r24, r24
    1770:	19 f0       	breq	.+6      	; 0x1778 <check_time+0xd2>
						hanche_sms--;
    1772:	81 50       	subi	r24, 0x01	; 1
    1774:	80 93 59 01 	sts	0x0159, r24
				}
/*------------------------------------------------------------------------------------------------*/ 				
			if(Second!=1&&begin_check_sms!=111)
    1778:	80 91 28 01 	lds	r24, 0x0128
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	39 f0       	breq	.+14     	; 0x178e <check_time+0xe8>
    1780:	80 91 56 01 	lds	r24, 0x0156
    1784:	8f 36       	cpi	r24, 0x6F	; 111
    1786:	71 f0       	breq	.+28     	; 0x17a4 <check_time+0xfe>
				begin_check_sms++;		
    1788:	8f 5f       	subi	r24, 0xFF	; 255
    178a:	80 93 56 01 	sts	0x0156, r24
			if(begin_check_sms==25)
    178e:	80 91 56 01 	lds	r24, 0x0156
    1792:	89 31       	cpi	r24, 0x19	; 25
    1794:	39 f4       	brne	.+14     	; 0x17a4 <check_time+0xfe>
				{
					begin_check_sms=111;
    1796:	8f e6       	ldi	r24, 0x6F	; 111
    1798:	80 93 56 01 	sts	0x0156, r24
					ok_begin=0;
    179c:	10 92 55 01 	sts	0x0155, r1
					ok_sms();
    17a0:	0e 94 c5 03 	call	0x78a	; 0x78a <ok_sms>
				}
			if(Second%10==0&&ok_begin==0)	
    17a4:	80 91 28 01 	lds	r24, 0x0128
    17a8:	6a e0       	ldi	r22, 0x0A	; 10
    17aa:	0e 94 30 10 	call	0x2060	; 0x2060 <__udivmodqi4>
    17ae:	99 23       	and	r25, r25
    17b0:	31 f4       	brne	.+12     	; 0x17be <check_time+0x118>
    17b2:	80 91 55 01 	lds	r24, 0x0155
    17b6:	88 23       	and	r24, r24
    17b8:	11 f4       	brne	.+4      	; 0x17be <check_time+0x118>
				process_sms();			
    17ba:	0e 94 2e 05 	call	0xa5c	; 0xa5c <process_sms>
			if(Second%2)				
    17be:	80 91 28 01 	lds	r24, 0x0128
    17c2:	80 ff       	sbrs	r24, 0
    17c4:	07 c0       	rjmp	.+14     	; 0x17d4 <check_time+0x12e>
				{
					alarm();
    17c6:	0e 94 13 08 	call	0x1026	; 0x1026 <alarm>
					adc_out(read_adc(0));
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	0e 94 d6 07 	call	0xfac	; 0xfac <read_adc>
    17d0:	0e 94 de 07 	call	0xfbc	; 0xfbc <adc_out>
    17d4:	08 95       	ret

000017d6 <main>:

int main(void)
{	
/*------------------------------------------------------------------------------------------------*/ 
	//Set Port
	DDRC=0xff;	//out
    17d6:	8f ef       	ldi	r24, 0xFF	; 255
    17d8:	84 bb       	out	0x14, r24	; 20
	PORTC=0xff;
    17da:	85 bb       	out	0x15, r24	; 21
	DDRB=0x00;	//in	
    17dc:	17 ba       	out	0x17, r1	; 23
	PORTB=0xff;
    17de:	88 bb       	out	0x18, r24	; 24
	DDRD=0x00;
    17e0:	11 ba       	out	0x11, r1	; 17
	PORTD=0xff;
    17e2:	82 bb       	out	0x12, r24	; 18
	//khoi dong LCD
	init_LCD();
    17e4:	0e 94 de 00 	call	0x1bc	; 0x1bc <init_LCD>
	clr_LCD();
    17e8:	0e 94 0e 01 	call	0x21c	; 0x21c <clr_LCD>
/*------------------------------------------------------------------------------------------------*/  
	set_clock();							// Nap gia tri cho RTC
    17ec:	0e 94 4c 08 	call	0x1098	; 0x1098 <set_clock>
	//doc va hien thi thoi gian lan dau tien
	TWI_DS1307_wadr(0x00);					//set dia chi ve 0
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	0e 94 30 01 	call	0x260	; 0x260 <TWI_DS1307_wadr>
    17f6:	8f ec       	ldi	r24, 0xCF	; 207
    17f8:	97 e0       	ldi	r25, 0x07	; 7
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <main+0x24>
    17fe:	00 c0       	rjmp	.+0      	; 0x1800 <main+0x2a>
    1800:	00 00       	nop
	_delay_ms(1);							//cho DS1307 xu li 
	TWI_DS1307_rblock(tData,7);				//doc ca khoi thoi gian (7 bytes)	
    1802:	88 e0       	ldi	r24, 0x08	; 8
    1804:	92 e0       	ldi	r25, 0x02	; 2
    1806:	67 e0       	ldi	r22, 0x07	; 7
    1808:	0e 94 97 01 	call	0x32e	; 0x32e <TWI_DS1307_rblock>
	Display();								// hien thi ket qua len lan dau LCD	
    180c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Display>
	firt_dis=0;
    1810:	10 92 31 01 	sts	0x0131, r1
	
/*------------------------------------------------------------------------------------------------*/  	
	// Khai bao ngat dk = tay (INT0,1)
	//MCUCSR|=(0<<ISC2);							//INT2 ngat mode canh xuong
	MCUCR|=(1<<ISC11)|(1<<ISC01);				//INT 0,1 la ngat canh xuong MCUCR=0b00001010;
    1814:	85 b7       	in	r24, 0x35	; 53
    1816:	8a 60       	ori	r24, 0x0A	; 10
    1818:	85 bf       	out	0x35, r24	; 53
	GICR|=(1<<INT1)|(1<<INT0)|(1<<INT2);		//GICR=0b11100000	
    181a:	8b b7       	in	r24, 0x3b	; 59
    181c:	80 6e       	ori	r24, 0xE0	; 224
    181e:	8b bf       	out	0x3b, r24	; 59
/*------------------------------------------------------------------------------------------------*/  
	//Khai bao UART 9k6 ExClock 8Mhz
	//Trang 167 datasheet ATMega32
	UBRRH=0;
    1820:	10 bc       	out	0x20, r1	; 32
	UBRRL=51;
    1822:	83 e3       	ldi	r24, 0x33	; 51
    1824:	89 b9       	out	0x09, r24	; 9
	UCSRA=0x00;
    1826:	1b b8       	out	0x0b, r1	; 11
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
    1828:	86 e8       	ldi	r24, 0x86	; 134
    182a:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE); // ca truyen va nhan
    182c:	88 e9       	ldi	r24, 0x98	; 152
    182e:	8a b9       	out	0x0a, r24	; 10
	sei();         	//set bit I cho phep ngat toan cuc
    1830:	78 94       	sei
/*------------------------------------------------------------------------------------------------*/  
	// Khai bao ADC
	//ADC su dung 10 bit :1V=>ADC=1023/5=204.6
	//1oC~10mV =>ADC=10*204.6/1000=2.046
	//ToC=>ADC=T*2.046=>T=ADC/2.046
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS0);//enable ADC
    1832:	85 e8       	ldi	r24, 0x85	; 133
    1834:	86 b9       	out	0x06, r24	; 6
	ADMUX=ADC_VREF_TYPE;
    1836:	80 e4       	ldi	r24, 0x40	; 64
    1838:	87 b9       	out	0x07, r24	; 7
	adc_out(read_adc(0));// Hien thi nhiet do lan dau
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	0e 94 d6 07 	call	0xfac	; 0xfac <read_adc>
    1840:	0e 94 de 07 	call	0xfbc	; 0xfbc <adc_out>
	choise_device=0;
    1844:	10 92 30 01 	sts	0x0130, r1
/*------------------------------------------------------------------------------------------------*/ 
	update_count();  //Cap nhat hen gio trong eeprom
    1848:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <update_count>
	init_arry_sms();
    184c:	0e 94 14 02 	call	0x428	; 0x428 <init_arry_sms>
	//reset_eeprom();
    while(1)
    {
		check_time();
    1850:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <check_time>
    1854:	8f ef       	ldi	r24, 0xFF	; 255
    1856:	9f ec       	ldi	r25, 0xCF	; 207
    1858:	a7 e0       	ldi	r26, 0x07	; 7
    185a:	81 50       	subi	r24, 0x01	; 1
    185c:	90 40       	sbci	r25, 0x00	; 0
    185e:	a0 40       	sbci	r26, 0x00	; 0
    1860:	e1 f7       	brne	.-8      	; 0x185a <main+0x84>
    1862:	00 c0       	rjmp	.+0      	; 0x1864 <main+0x8e>
    1864:	00 00       	nop
    1866:	f4 cf       	rjmp	.-24     	; 0x1850 <main+0x7a>

00001868 <__vector_13>:
/*================================================================================================*/    
/*--------------------------------Cac Ham Ngat----------------------------------------------------*/  
/*================================================================================================*/  
//Trinh phuc vu ngat uart sms
ISR(SIG_UART_RECV)
{
    1868:	1f 92       	push	r1
    186a:	0f 92       	push	r0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	0f 92       	push	r0
    1870:	11 24       	eor	r1, r1
    1872:	8f 93       	push	r24
    1874:	9f 93       	push	r25
    1876:	ef 93       	push	r30
    1878:	ff 93       	push	r31
	unsigned char kt;
	kt=UDR;
    187a:	9c b1       	in	r25, 0x0c	; 12
	temp_sms[dem_kt++]=kt;
    187c:	80 91 4f 01 	lds	r24, 0x014F
    1880:	e0 e1       	ldi	r30, 0x10	; 16
    1882:	f2 e0       	ldi	r31, 0x02	; 2
    1884:	e8 0f       	add	r30, r24
    1886:	f1 1d       	adc	r31, r1
    1888:	90 83       	st	Z, r25
    188a:	8f 5f       	subi	r24, 0xFF	; 255
    188c:	80 93 4f 01 	sts	0x014F, r24
	if(dem_kt>BUFF_SMS)
		dem_kt=BUFF_SMS-1;
		
} 
    1890:	ff 91       	pop	r31
    1892:	ef 91       	pop	r30
    1894:	9f 91       	pop	r25
    1896:	8f 91       	pop	r24
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	0f 90       	pop	r0
    189e:	1f 90       	pop	r1
    18a0:	18 95       	reti

000018a2 <__vector_1>:
*/

/*------------------------------------------------------------------------------------------------*/  
//Trinh phuc vu ngat cua INT0 DK TB1
ISR(INT0_vect)
{
    18a2:	1f 92       	push	r1
    18a4:	0f 92       	push	r0
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	0f 92       	push	r0
    18aa:	11 24       	eor	r1, r1
    18ac:	2f 93       	push	r18
    18ae:	3f 93       	push	r19
    18b0:	4f 93       	push	r20
    18b2:	5f 93       	push	r21
    18b4:	6f 93       	push	r22
    18b6:	7f 93       	push	r23
    18b8:	8f 93       	push	r24
    18ba:	9f 93       	push	r25
    18bc:	af 93       	push	r26
    18be:	bf 93       	push	r27
    18c0:	ef 93       	push	r30
    18c2:	ff 93       	push	r31
	choise_device++;
    18c4:	80 91 30 01 	lds	r24, 0x0130
    18c8:	8f 5f       	subi	r24, 0xFF	; 255
    18ca:	80 93 30 01 	sts	0x0130, r24
	if(choise_device>=5)	
    18ce:	85 30       	cpi	r24, 0x05	; 5
    18d0:	58 f0       	brcs	.+22     	; 0x18e8 <__vector_1+0x46>
		{
			clr_LCD();
    18d2:	0e 94 0e 01 	call	0x21c	; 0x21c <clr_LCD>
			choise_device=0;
    18d6:	10 92 30 01 	sts	0x0130, r1
			Display();
    18da:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Display>
			adc_out(read_adc(0));
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	0e 94 d6 07 	call	0xfac	; 0xfac <read_adc>
    18e4:	0e 94 de 07 	call	0xfbc	; 0xfbc <adc_out>
		}	
	if(choise_device>0&&choise_device<5)	check_on_off(choise_device);
    18e8:	80 91 30 01 	lds	r24, 0x0130
    18ec:	98 2f       	mov	r25, r24
    18ee:	91 50       	subi	r25, 0x01	; 1
    18f0:	94 30       	cpi	r25, 0x04	; 4
    18f2:	10 f4       	brcc	.+4      	; 0x18f8 <__vector_1+0x56>
    18f4:	0e 94 21 09 	call	0x1242	; 0x1242 <check_on_off>
}
    18f8:	ff 91       	pop	r31
    18fa:	ef 91       	pop	r30
    18fc:	bf 91       	pop	r27
    18fe:	af 91       	pop	r26
    1900:	9f 91       	pop	r25
    1902:	8f 91       	pop	r24
    1904:	7f 91       	pop	r23
    1906:	6f 91       	pop	r22
    1908:	5f 91       	pop	r21
    190a:	4f 91       	pop	r20
    190c:	3f 91       	pop	r19
    190e:	2f 91       	pop	r18
    1910:	0f 90       	pop	r0
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	0f 90       	pop	r0
    1916:	1f 90       	pop	r1
    1918:	18 95       	reti

0000191a <__vector_2>:

/*------------------------------------------------------------------------------------------------*/  
//Trinh phuc vu ngat cua INT1 DK TB2
ISR(INT1_vect)
{
    191a:	1f 92       	push	r1
    191c:	0f 92       	push	r0
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	0f 92       	push	r0
    1922:	11 24       	eor	r1, r1
    1924:	2f 93       	push	r18
    1926:	3f 93       	push	r19
    1928:	4f 93       	push	r20
    192a:	5f 93       	push	r21
    192c:	6f 93       	push	r22
    192e:	7f 93       	push	r23
    1930:	8f 93       	push	r24
    1932:	9f 93       	push	r25
    1934:	af 93       	push	r26
    1936:	bf 93       	push	r27
    1938:	ef 93       	push	r30
    193a:	ff 93       	push	r31
	switch (choise_device)
    193c:	80 91 30 01 	lds	r24, 0x0130
    1940:	82 30       	cpi	r24, 0x02	; 2
    1942:	81 f0       	breq	.+32     	; 0x1964 <__vector_2+0x4a>
    1944:	83 30       	cpi	r24, 0x03	; 3
    1946:	18 f4       	brcc	.+6      	; 0x194e <__vector_2+0x34>
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	e9 f4       	brne	.+58     	; 0x1986 <__vector_2+0x6c>
    194c:	05 c0       	rjmp	.+10     	; 0x1958 <__vector_2+0x3e>
    194e:	83 30       	cpi	r24, 0x03	; 3
    1950:	79 f0       	breq	.+30     	; 0x1970 <__vector_2+0x56>
    1952:	84 30       	cpi	r24, 0x04	; 4
    1954:	c1 f4       	brne	.+48     	; 0x1986 <__vector_2+0x6c>
    1956:	12 c0       	rjmp	.+36     	; 0x197c <__vector_2+0x62>
	{
		case 1: 	if(bit_is_clear(PORTC,PINC7))	setbit(PORTC,PORTC7);	else	clrbit(PORTC,PORTC7); break;
    1958:	af 99       	sbic	0x15, 7	; 21
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <__vector_2+0x46>
    195c:	af 9a       	sbi	0x15, 7	; 21
    195e:	13 c0       	rjmp	.+38     	; 0x1986 <__vector_2+0x6c>
    1960:	af 98       	cbi	0x15, 7	; 21
    1962:	11 c0       	rjmp	.+34     	; 0x1986 <__vector_2+0x6c>
		case 2: 	if(bit_is_clear(PORTC,PINC6))	setbit(PORTC,PORTC6);	else	clrbit(PORTC,PORTC6); break;
    1964:	ae 99       	sbic	0x15, 6	; 21
    1966:	02 c0       	rjmp	.+4      	; 0x196c <__vector_2+0x52>
    1968:	ae 9a       	sbi	0x15, 6	; 21
    196a:	0d c0       	rjmp	.+26     	; 0x1986 <__vector_2+0x6c>
    196c:	ae 98       	cbi	0x15, 6	; 21
    196e:	0b c0       	rjmp	.+22     	; 0x1986 <__vector_2+0x6c>
		case 3: 	if(bit_is_clear(PORTC,PINC5))	setbit(PORTC,PORTC5);	else	clrbit(PORTC,PORTC5); break;
    1970:	ad 99       	sbic	0x15, 5	; 21
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <__vector_2+0x5e>
    1974:	ad 9a       	sbi	0x15, 5	; 21
    1976:	07 c0       	rjmp	.+14     	; 0x1986 <__vector_2+0x6c>
    1978:	ad 98       	cbi	0x15, 5	; 21
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <__vector_2+0x6c>
		case 4: 	if(bit_is_clear(PORTC,PINC4))	setbit(PORTC,PORTC4);	else	clrbit(PORTC,PORTC4); break;
    197c:	ac 99       	sbic	0x15, 4	; 21
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <__vector_2+0x6a>
    1980:	ac 9a       	sbi	0x15, 4	; 21
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <__vector_2+0x6c>
    1984:	ac 98       	cbi	0x15, 4	; 21
		default: break;
	}
	if(choise_device>0&&choise_device<5)	check_on_off(choise_device);
    1986:	80 91 30 01 	lds	r24, 0x0130
    198a:	98 2f       	mov	r25, r24
    198c:	91 50       	subi	r25, 0x01	; 1
    198e:	94 30       	cpi	r25, 0x04	; 4
    1990:	10 f4       	brcc	.+4      	; 0x1996 <__vector_2+0x7c>
    1992:	0e 94 21 09 	call	0x1242	; 0x1242 <check_on_off>
}
    1996:	ff 91       	pop	r31
    1998:	ef 91       	pop	r30
    199a:	bf 91       	pop	r27
    199c:	af 91       	pop	r26
    199e:	9f 91       	pop	r25
    19a0:	8f 91       	pop	r24
    19a2:	7f 91       	pop	r23
    19a4:	6f 91       	pop	r22
    19a6:	5f 91       	pop	r21
    19a8:	4f 91       	pop	r20
    19aa:	3f 91       	pop	r19
    19ac:	2f 91       	pop	r18
    19ae:	0f 90       	pop	r0
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	0f 90       	pop	r0
    19b4:	1f 90       	pop	r1
    19b6:	18 95       	reti

000019b8 <__subsf3>:
    19b8:	50 58       	subi	r21, 0x80	; 128

000019ba <__addsf3>:
    19ba:	bb 27       	eor	r27, r27
    19bc:	aa 27       	eor	r26, r26
    19be:	0e d0       	rcall	.+28     	; 0x19dc <__addsf3x>
    19c0:	4d c1       	rjmp	.+666    	; 0x1c5c <__fp_round>
    19c2:	3e d1       	rcall	.+636    	; 0x1c40 <__fp_pscA>
    19c4:	30 f0       	brcs	.+12     	; 0x19d2 <__addsf3+0x18>
    19c6:	43 d1       	rcall	.+646    	; 0x1c4e <__fp_pscB>
    19c8:	20 f0       	brcs	.+8      	; 0x19d2 <__addsf3+0x18>
    19ca:	31 f4       	brne	.+12     	; 0x19d8 <__addsf3+0x1e>
    19cc:	9f 3f       	cpi	r25, 0xFF	; 255
    19ce:	11 f4       	brne	.+4      	; 0x19d4 <__addsf3+0x1a>
    19d0:	1e f4       	brtc	.+6      	; 0x19d8 <__addsf3+0x1e>
    19d2:	33 c1       	rjmp	.+614    	; 0x1c3a <__fp_nan>
    19d4:	0e f4       	brtc	.+2      	; 0x19d8 <__addsf3+0x1e>
    19d6:	e0 95       	com	r30
    19d8:	e7 fb       	bst	r30, 7
    19da:	29 c1       	rjmp	.+594    	; 0x1c2e <__fp_inf>

000019dc <__addsf3x>:
    19dc:	e9 2f       	mov	r30, r25
    19de:	4f d1       	rcall	.+670    	; 0x1c7e <__fp_split3>
    19e0:	80 f3       	brcs	.-32     	; 0x19c2 <__addsf3+0x8>
    19e2:	ba 17       	cp	r27, r26
    19e4:	62 07       	cpc	r22, r18
    19e6:	73 07       	cpc	r23, r19
    19e8:	84 07       	cpc	r24, r20
    19ea:	95 07       	cpc	r25, r21
    19ec:	18 f0       	brcs	.+6      	; 0x19f4 <__addsf3x+0x18>
    19ee:	71 f4       	brne	.+28     	; 0x1a0c <__addsf3x+0x30>
    19f0:	9e f5       	brtc	.+102    	; 0x1a58 <__addsf3x+0x7c>
    19f2:	67 c1       	rjmp	.+718    	; 0x1cc2 <__fp_zero>
    19f4:	0e f4       	brtc	.+2      	; 0x19f8 <__addsf3x+0x1c>
    19f6:	e0 95       	com	r30
    19f8:	0b 2e       	mov	r0, r27
    19fa:	ba 2f       	mov	r27, r26
    19fc:	a0 2d       	mov	r26, r0
    19fe:	0b 01       	movw	r0, r22
    1a00:	b9 01       	movw	r22, r18
    1a02:	90 01       	movw	r18, r0
    1a04:	0c 01       	movw	r0, r24
    1a06:	ca 01       	movw	r24, r20
    1a08:	a0 01       	movw	r20, r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	ff 27       	eor	r31, r31
    1a0e:	59 1b       	sub	r21, r25
    1a10:	99 f0       	breq	.+38     	; 0x1a38 <__addsf3x+0x5c>
    1a12:	59 3f       	cpi	r21, 0xF9	; 249
    1a14:	50 f4       	brcc	.+20     	; 0x1a2a <__addsf3x+0x4e>
    1a16:	50 3e       	cpi	r21, 0xE0	; 224
    1a18:	68 f1       	brcs	.+90     	; 0x1a74 <__addsf3x+0x98>
    1a1a:	1a 16       	cp	r1, r26
    1a1c:	f0 40       	sbci	r31, 0x00	; 0
    1a1e:	a2 2f       	mov	r26, r18
    1a20:	23 2f       	mov	r18, r19
    1a22:	34 2f       	mov	r19, r20
    1a24:	44 27       	eor	r20, r20
    1a26:	58 5f       	subi	r21, 0xF8	; 248
    1a28:	f3 cf       	rjmp	.-26     	; 0x1a10 <__addsf3x+0x34>
    1a2a:	46 95       	lsr	r20
    1a2c:	37 95       	ror	r19
    1a2e:	27 95       	ror	r18
    1a30:	a7 95       	ror	r26
    1a32:	f0 40       	sbci	r31, 0x00	; 0
    1a34:	53 95       	inc	r21
    1a36:	c9 f7       	brne	.-14     	; 0x1a2a <__addsf3x+0x4e>
    1a38:	7e f4       	brtc	.+30     	; 0x1a58 <__addsf3x+0x7c>
    1a3a:	1f 16       	cp	r1, r31
    1a3c:	ba 0b       	sbc	r27, r26
    1a3e:	62 0b       	sbc	r22, r18
    1a40:	73 0b       	sbc	r23, r19
    1a42:	84 0b       	sbc	r24, r20
    1a44:	ba f0       	brmi	.+46     	; 0x1a74 <__addsf3x+0x98>
    1a46:	91 50       	subi	r25, 0x01	; 1
    1a48:	a1 f0       	breq	.+40     	; 0x1a72 <__addsf3x+0x96>
    1a4a:	ff 0f       	add	r31, r31
    1a4c:	bb 1f       	adc	r27, r27
    1a4e:	66 1f       	adc	r22, r22
    1a50:	77 1f       	adc	r23, r23
    1a52:	88 1f       	adc	r24, r24
    1a54:	c2 f7       	brpl	.-16     	; 0x1a46 <__addsf3x+0x6a>
    1a56:	0e c0       	rjmp	.+28     	; 0x1a74 <__addsf3x+0x98>
    1a58:	ba 0f       	add	r27, r26
    1a5a:	62 1f       	adc	r22, r18
    1a5c:	73 1f       	adc	r23, r19
    1a5e:	84 1f       	adc	r24, r20
    1a60:	48 f4       	brcc	.+18     	; 0x1a74 <__addsf3x+0x98>
    1a62:	87 95       	ror	r24
    1a64:	77 95       	ror	r23
    1a66:	67 95       	ror	r22
    1a68:	b7 95       	ror	r27
    1a6a:	f7 95       	ror	r31
    1a6c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a6e:	08 f0       	brcs	.+2      	; 0x1a72 <__addsf3x+0x96>
    1a70:	b3 cf       	rjmp	.-154    	; 0x19d8 <__addsf3+0x1e>
    1a72:	93 95       	inc	r25
    1a74:	88 0f       	add	r24, r24
    1a76:	08 f0       	brcs	.+2      	; 0x1a7a <__addsf3x+0x9e>
    1a78:	99 27       	eor	r25, r25
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	97 95       	ror	r25
    1a7e:	87 95       	ror	r24
    1a80:	08 95       	ret

00001a82 <__divsf3>:
    1a82:	0c d0       	rcall	.+24     	; 0x1a9c <__divsf3x>
    1a84:	eb c0       	rjmp	.+470    	; 0x1c5c <__fp_round>
    1a86:	e3 d0       	rcall	.+454    	; 0x1c4e <__fp_pscB>
    1a88:	40 f0       	brcs	.+16     	; 0x1a9a <__divsf3+0x18>
    1a8a:	da d0       	rcall	.+436    	; 0x1c40 <__fp_pscA>
    1a8c:	30 f0       	brcs	.+12     	; 0x1a9a <__divsf3+0x18>
    1a8e:	21 f4       	brne	.+8      	; 0x1a98 <__divsf3+0x16>
    1a90:	5f 3f       	cpi	r21, 0xFF	; 255
    1a92:	19 f0       	breq	.+6      	; 0x1a9a <__divsf3+0x18>
    1a94:	cc c0       	rjmp	.+408    	; 0x1c2e <__fp_inf>
    1a96:	51 11       	cpse	r21, r1
    1a98:	15 c1       	rjmp	.+554    	; 0x1cc4 <__fp_szero>
    1a9a:	cf c0       	rjmp	.+414    	; 0x1c3a <__fp_nan>

00001a9c <__divsf3x>:
    1a9c:	f0 d0       	rcall	.+480    	; 0x1c7e <__fp_split3>
    1a9e:	98 f3       	brcs	.-26     	; 0x1a86 <__divsf3+0x4>

00001aa0 <__divsf3_pse>:
    1aa0:	99 23       	and	r25, r25
    1aa2:	c9 f3       	breq	.-14     	; 0x1a96 <__divsf3+0x14>
    1aa4:	55 23       	and	r21, r21
    1aa6:	b1 f3       	breq	.-20     	; 0x1a94 <__divsf3+0x12>
    1aa8:	95 1b       	sub	r25, r21
    1aaa:	55 0b       	sbc	r21, r21
    1aac:	bb 27       	eor	r27, r27
    1aae:	aa 27       	eor	r26, r26
    1ab0:	62 17       	cp	r22, r18
    1ab2:	73 07       	cpc	r23, r19
    1ab4:	84 07       	cpc	r24, r20
    1ab6:	38 f0       	brcs	.+14     	; 0x1ac6 <__divsf3_pse+0x26>
    1ab8:	9f 5f       	subi	r25, 0xFF	; 255
    1aba:	5f 4f       	sbci	r21, 0xFF	; 255
    1abc:	22 0f       	add	r18, r18
    1abe:	33 1f       	adc	r19, r19
    1ac0:	44 1f       	adc	r20, r20
    1ac2:	aa 1f       	adc	r26, r26
    1ac4:	a9 f3       	breq	.-22     	; 0x1ab0 <__divsf3_pse+0x10>
    1ac6:	33 d0       	rcall	.+102    	; 0x1b2e <__divsf3_pse+0x8e>
    1ac8:	0e 2e       	mov	r0, r30
    1aca:	3a f0       	brmi	.+14     	; 0x1ada <__divsf3_pse+0x3a>
    1acc:	e0 e8       	ldi	r30, 0x80	; 128
    1ace:	30 d0       	rcall	.+96     	; 0x1b30 <__divsf3_pse+0x90>
    1ad0:	91 50       	subi	r25, 0x01	; 1
    1ad2:	50 40       	sbci	r21, 0x00	; 0
    1ad4:	e6 95       	lsr	r30
    1ad6:	00 1c       	adc	r0, r0
    1ad8:	ca f7       	brpl	.-14     	; 0x1acc <__divsf3_pse+0x2c>
    1ada:	29 d0       	rcall	.+82     	; 0x1b2e <__divsf3_pse+0x8e>
    1adc:	fe 2f       	mov	r31, r30
    1ade:	27 d0       	rcall	.+78     	; 0x1b2e <__divsf3_pse+0x8e>
    1ae0:	66 0f       	add	r22, r22
    1ae2:	77 1f       	adc	r23, r23
    1ae4:	88 1f       	adc	r24, r24
    1ae6:	bb 1f       	adc	r27, r27
    1ae8:	26 17       	cp	r18, r22
    1aea:	37 07       	cpc	r19, r23
    1aec:	48 07       	cpc	r20, r24
    1aee:	ab 07       	cpc	r26, r27
    1af0:	b0 e8       	ldi	r27, 0x80	; 128
    1af2:	09 f0       	breq	.+2      	; 0x1af6 <__divsf3_pse+0x56>
    1af4:	bb 0b       	sbc	r27, r27
    1af6:	80 2d       	mov	r24, r0
    1af8:	bf 01       	movw	r22, r30
    1afa:	ff 27       	eor	r31, r31
    1afc:	93 58       	subi	r25, 0x83	; 131
    1afe:	5f 4f       	sbci	r21, 0xFF	; 255
    1b00:	2a f0       	brmi	.+10     	; 0x1b0c <__divsf3_pse+0x6c>
    1b02:	9e 3f       	cpi	r25, 0xFE	; 254
    1b04:	51 05       	cpc	r21, r1
    1b06:	68 f0       	brcs	.+26     	; 0x1b22 <__divsf3_pse+0x82>
    1b08:	92 c0       	rjmp	.+292    	; 0x1c2e <__fp_inf>
    1b0a:	dc c0       	rjmp	.+440    	; 0x1cc4 <__fp_szero>
    1b0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b0e:	ec f3       	brlt	.-6      	; 0x1b0a <__divsf3_pse+0x6a>
    1b10:	98 3e       	cpi	r25, 0xE8	; 232
    1b12:	dc f3       	brlt	.-10     	; 0x1b0a <__divsf3_pse+0x6a>
    1b14:	86 95       	lsr	r24
    1b16:	77 95       	ror	r23
    1b18:	67 95       	ror	r22
    1b1a:	b7 95       	ror	r27
    1b1c:	f7 95       	ror	r31
    1b1e:	9f 5f       	subi	r25, 0xFF	; 255
    1b20:	c9 f7       	brne	.-14     	; 0x1b14 <__divsf3_pse+0x74>
    1b22:	88 0f       	add	r24, r24
    1b24:	91 1d       	adc	r25, r1
    1b26:	96 95       	lsr	r25
    1b28:	87 95       	ror	r24
    1b2a:	97 f9       	bld	r25, 7
    1b2c:	08 95       	ret
    1b2e:	e1 e0       	ldi	r30, 0x01	; 1
    1b30:	66 0f       	add	r22, r22
    1b32:	77 1f       	adc	r23, r23
    1b34:	88 1f       	adc	r24, r24
    1b36:	bb 1f       	adc	r27, r27
    1b38:	62 17       	cp	r22, r18
    1b3a:	73 07       	cpc	r23, r19
    1b3c:	84 07       	cpc	r24, r20
    1b3e:	ba 07       	cpc	r27, r26
    1b40:	20 f0       	brcs	.+8      	; 0x1b4a <__divsf3_pse+0xaa>
    1b42:	62 1b       	sub	r22, r18
    1b44:	73 0b       	sbc	r23, r19
    1b46:	84 0b       	sbc	r24, r20
    1b48:	ba 0b       	sbc	r27, r26
    1b4a:	ee 1f       	adc	r30, r30
    1b4c:	88 f7       	brcc	.-30     	; 0x1b30 <__divsf3_pse+0x90>
    1b4e:	e0 95       	com	r30
    1b50:	08 95       	ret

00001b52 <__fixsfsi>:
    1b52:	04 d0       	rcall	.+8      	; 0x1b5c <__fixunssfsi>
    1b54:	68 94       	set
    1b56:	b1 11       	cpse	r27, r1
    1b58:	b5 c0       	rjmp	.+362    	; 0x1cc4 <__fp_szero>
    1b5a:	08 95       	ret

00001b5c <__fixunssfsi>:
    1b5c:	98 d0       	rcall	.+304    	; 0x1c8e <__fp_splitA>
    1b5e:	88 f0       	brcs	.+34     	; 0x1b82 <__fixunssfsi+0x26>
    1b60:	9f 57       	subi	r25, 0x7F	; 127
    1b62:	90 f0       	brcs	.+36     	; 0x1b88 <__fixunssfsi+0x2c>
    1b64:	b9 2f       	mov	r27, r25
    1b66:	99 27       	eor	r25, r25
    1b68:	b7 51       	subi	r27, 0x17	; 23
    1b6a:	a0 f0       	brcs	.+40     	; 0x1b94 <__fixunssfsi+0x38>
    1b6c:	d1 f0       	breq	.+52     	; 0x1ba2 <__fixunssfsi+0x46>
    1b6e:	66 0f       	add	r22, r22
    1b70:	77 1f       	adc	r23, r23
    1b72:	88 1f       	adc	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	1a f0       	brmi	.+6      	; 0x1b7e <__fixunssfsi+0x22>
    1b78:	ba 95       	dec	r27
    1b7a:	c9 f7       	brne	.-14     	; 0x1b6e <__fixunssfsi+0x12>
    1b7c:	12 c0       	rjmp	.+36     	; 0x1ba2 <__fixunssfsi+0x46>
    1b7e:	b1 30       	cpi	r27, 0x01	; 1
    1b80:	81 f0       	breq	.+32     	; 0x1ba2 <__fixunssfsi+0x46>
    1b82:	9f d0       	rcall	.+318    	; 0x1cc2 <__fp_zero>
    1b84:	b1 e0       	ldi	r27, 0x01	; 1
    1b86:	08 95       	ret
    1b88:	9c c0       	rjmp	.+312    	; 0x1cc2 <__fp_zero>
    1b8a:	67 2f       	mov	r22, r23
    1b8c:	78 2f       	mov	r23, r24
    1b8e:	88 27       	eor	r24, r24
    1b90:	b8 5f       	subi	r27, 0xF8	; 248
    1b92:	39 f0       	breq	.+14     	; 0x1ba2 <__fixunssfsi+0x46>
    1b94:	b9 3f       	cpi	r27, 0xF9	; 249
    1b96:	cc f3       	brlt	.-14     	; 0x1b8a <__fixunssfsi+0x2e>
    1b98:	86 95       	lsr	r24
    1b9a:	77 95       	ror	r23
    1b9c:	67 95       	ror	r22
    1b9e:	b3 95       	inc	r27
    1ba0:	d9 f7       	brne	.-10     	; 0x1b98 <__fixunssfsi+0x3c>
    1ba2:	3e f4       	brtc	.+14     	; 0x1bb2 <__fixunssfsi+0x56>
    1ba4:	90 95       	com	r25
    1ba6:	80 95       	com	r24
    1ba8:	70 95       	com	r23
    1baa:	61 95       	neg	r22
    1bac:	7f 4f       	sbci	r23, 0xFF	; 255
    1bae:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb2:	08 95       	ret

00001bb4 <__floatunsisf>:
    1bb4:	e8 94       	clt
    1bb6:	09 c0       	rjmp	.+18     	; 0x1bca <__floatsisf+0x12>

00001bb8 <__floatsisf>:
    1bb8:	97 fb       	bst	r25, 7
    1bba:	3e f4       	brtc	.+14     	; 0x1bca <__floatsisf+0x12>
    1bbc:	90 95       	com	r25
    1bbe:	80 95       	com	r24
    1bc0:	70 95       	com	r23
    1bc2:	61 95       	neg	r22
    1bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bca:	99 23       	and	r25, r25
    1bcc:	a9 f0       	breq	.+42     	; 0x1bf8 <__floatsisf+0x40>
    1bce:	f9 2f       	mov	r31, r25
    1bd0:	96 e9       	ldi	r25, 0x96	; 150
    1bd2:	bb 27       	eor	r27, r27
    1bd4:	93 95       	inc	r25
    1bd6:	f6 95       	lsr	r31
    1bd8:	87 95       	ror	r24
    1bda:	77 95       	ror	r23
    1bdc:	67 95       	ror	r22
    1bde:	b7 95       	ror	r27
    1be0:	f1 11       	cpse	r31, r1
    1be2:	f8 cf       	rjmp	.-16     	; 0x1bd4 <__floatsisf+0x1c>
    1be4:	fa f4       	brpl	.+62     	; 0x1c24 <__floatsisf+0x6c>
    1be6:	bb 0f       	add	r27, r27
    1be8:	11 f4       	brne	.+4      	; 0x1bee <__floatsisf+0x36>
    1bea:	60 ff       	sbrs	r22, 0
    1bec:	1b c0       	rjmp	.+54     	; 0x1c24 <__floatsisf+0x6c>
    1bee:	6f 5f       	subi	r22, 0xFF	; 255
    1bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf6:	16 c0       	rjmp	.+44     	; 0x1c24 <__floatsisf+0x6c>
    1bf8:	88 23       	and	r24, r24
    1bfa:	11 f0       	breq	.+4      	; 0x1c00 <__floatsisf+0x48>
    1bfc:	96 e9       	ldi	r25, 0x96	; 150
    1bfe:	11 c0       	rjmp	.+34     	; 0x1c22 <__floatsisf+0x6a>
    1c00:	77 23       	and	r23, r23
    1c02:	21 f0       	breq	.+8      	; 0x1c0c <__floatsisf+0x54>
    1c04:	9e e8       	ldi	r25, 0x8E	; 142
    1c06:	87 2f       	mov	r24, r23
    1c08:	76 2f       	mov	r23, r22
    1c0a:	05 c0       	rjmp	.+10     	; 0x1c16 <__floatsisf+0x5e>
    1c0c:	66 23       	and	r22, r22
    1c0e:	71 f0       	breq	.+28     	; 0x1c2c <__floatsisf+0x74>
    1c10:	96 e8       	ldi	r25, 0x86	; 134
    1c12:	86 2f       	mov	r24, r22
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	2a f0       	brmi	.+10     	; 0x1c24 <__floatsisf+0x6c>
    1c1a:	9a 95       	dec	r25
    1c1c:	66 0f       	add	r22, r22
    1c1e:	77 1f       	adc	r23, r23
    1c20:	88 1f       	adc	r24, r24
    1c22:	da f7       	brpl	.-10     	; 0x1c1a <__floatsisf+0x62>
    1c24:	88 0f       	add	r24, r24
    1c26:	96 95       	lsr	r25
    1c28:	87 95       	ror	r24
    1c2a:	97 f9       	bld	r25, 7
    1c2c:	08 95       	ret

00001c2e <__fp_inf>:
    1c2e:	97 f9       	bld	r25, 7
    1c30:	9f 67       	ori	r25, 0x7F	; 127
    1c32:	80 e8       	ldi	r24, 0x80	; 128
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	08 95       	ret

00001c3a <__fp_nan>:
    1c3a:	9f ef       	ldi	r25, 0xFF	; 255
    1c3c:	80 ec       	ldi	r24, 0xC0	; 192
    1c3e:	08 95       	ret

00001c40 <__fp_pscA>:
    1c40:	00 24       	eor	r0, r0
    1c42:	0a 94       	dec	r0
    1c44:	16 16       	cp	r1, r22
    1c46:	17 06       	cpc	r1, r23
    1c48:	18 06       	cpc	r1, r24
    1c4a:	09 06       	cpc	r0, r25
    1c4c:	08 95       	ret

00001c4e <__fp_pscB>:
    1c4e:	00 24       	eor	r0, r0
    1c50:	0a 94       	dec	r0
    1c52:	12 16       	cp	r1, r18
    1c54:	13 06       	cpc	r1, r19
    1c56:	14 06       	cpc	r1, r20
    1c58:	05 06       	cpc	r0, r21
    1c5a:	08 95       	ret

00001c5c <__fp_round>:
    1c5c:	09 2e       	mov	r0, r25
    1c5e:	03 94       	inc	r0
    1c60:	00 0c       	add	r0, r0
    1c62:	11 f4       	brne	.+4      	; 0x1c68 <__fp_round+0xc>
    1c64:	88 23       	and	r24, r24
    1c66:	52 f0       	brmi	.+20     	; 0x1c7c <__fp_round+0x20>
    1c68:	bb 0f       	add	r27, r27
    1c6a:	40 f4       	brcc	.+16     	; 0x1c7c <__fp_round+0x20>
    1c6c:	bf 2b       	or	r27, r31
    1c6e:	11 f4       	brne	.+4      	; 0x1c74 <__fp_round+0x18>
    1c70:	60 ff       	sbrs	r22, 0
    1c72:	04 c0       	rjmp	.+8      	; 0x1c7c <__fp_round+0x20>
    1c74:	6f 5f       	subi	r22, 0xFF	; 255
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7c:	08 95       	ret

00001c7e <__fp_split3>:
    1c7e:	57 fd       	sbrc	r21, 7
    1c80:	90 58       	subi	r25, 0x80	; 128
    1c82:	44 0f       	add	r20, r20
    1c84:	55 1f       	adc	r21, r21
    1c86:	59 f0       	breq	.+22     	; 0x1c9e <__fp_splitA+0x10>
    1c88:	5f 3f       	cpi	r21, 0xFF	; 255
    1c8a:	71 f0       	breq	.+28     	; 0x1ca8 <__fp_splitA+0x1a>
    1c8c:	47 95       	ror	r20

00001c8e <__fp_splitA>:
    1c8e:	88 0f       	add	r24, r24
    1c90:	97 fb       	bst	r25, 7
    1c92:	99 1f       	adc	r25, r25
    1c94:	61 f0       	breq	.+24     	; 0x1cae <__fp_splitA+0x20>
    1c96:	9f 3f       	cpi	r25, 0xFF	; 255
    1c98:	79 f0       	breq	.+30     	; 0x1cb8 <__fp_splitA+0x2a>
    1c9a:	87 95       	ror	r24
    1c9c:	08 95       	ret
    1c9e:	12 16       	cp	r1, r18
    1ca0:	13 06       	cpc	r1, r19
    1ca2:	14 06       	cpc	r1, r20
    1ca4:	55 1f       	adc	r21, r21
    1ca6:	f2 cf       	rjmp	.-28     	; 0x1c8c <__fp_split3+0xe>
    1ca8:	46 95       	lsr	r20
    1caa:	f1 df       	rcall	.-30     	; 0x1c8e <__fp_splitA>
    1cac:	08 c0       	rjmp	.+16     	; 0x1cbe <__fp_splitA+0x30>
    1cae:	16 16       	cp	r1, r22
    1cb0:	17 06       	cpc	r1, r23
    1cb2:	18 06       	cpc	r1, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	f1 cf       	rjmp	.-30     	; 0x1c9a <__fp_splitA+0xc>
    1cb8:	86 95       	lsr	r24
    1cba:	71 05       	cpc	r23, r1
    1cbc:	61 05       	cpc	r22, r1
    1cbe:	08 94       	sec
    1cc0:	08 95       	ret

00001cc2 <__fp_zero>:
    1cc2:	e8 94       	clt

00001cc4 <__fp_szero>:
    1cc4:	bb 27       	eor	r27, r27
    1cc6:	66 27       	eor	r22, r22
    1cc8:	77 27       	eor	r23, r23
    1cca:	cb 01       	movw	r24, r22
    1ccc:	97 f9       	bld	r25, 7
    1cce:	08 95       	ret

00001cd0 <__mulsf3>:
    1cd0:	0b d0       	rcall	.+22     	; 0x1ce8 <__mulsf3x>
    1cd2:	c4 cf       	rjmp	.-120    	; 0x1c5c <__fp_round>
    1cd4:	b5 df       	rcall	.-150    	; 0x1c40 <__fp_pscA>
    1cd6:	28 f0       	brcs	.+10     	; 0x1ce2 <__mulsf3+0x12>
    1cd8:	ba df       	rcall	.-140    	; 0x1c4e <__fp_pscB>
    1cda:	18 f0       	brcs	.+6      	; 0x1ce2 <__mulsf3+0x12>
    1cdc:	95 23       	and	r25, r21
    1cde:	09 f0       	breq	.+2      	; 0x1ce2 <__mulsf3+0x12>
    1ce0:	a6 cf       	rjmp	.-180    	; 0x1c2e <__fp_inf>
    1ce2:	ab cf       	rjmp	.-170    	; 0x1c3a <__fp_nan>
    1ce4:	11 24       	eor	r1, r1
    1ce6:	ee cf       	rjmp	.-36     	; 0x1cc4 <__fp_szero>

00001ce8 <__mulsf3x>:
    1ce8:	ca df       	rcall	.-108    	; 0x1c7e <__fp_split3>
    1cea:	a0 f3       	brcs	.-24     	; 0x1cd4 <__mulsf3+0x4>

00001cec <__mulsf3_pse>:
    1cec:	95 9f       	mul	r25, r21
    1cee:	d1 f3       	breq	.-12     	; 0x1ce4 <__mulsf3+0x14>
    1cf0:	95 0f       	add	r25, r21
    1cf2:	50 e0       	ldi	r21, 0x00	; 0
    1cf4:	55 1f       	adc	r21, r21
    1cf6:	62 9f       	mul	r22, r18
    1cf8:	f0 01       	movw	r30, r0
    1cfa:	72 9f       	mul	r23, r18
    1cfc:	bb 27       	eor	r27, r27
    1cfe:	f0 0d       	add	r31, r0
    1d00:	b1 1d       	adc	r27, r1
    1d02:	63 9f       	mul	r22, r19
    1d04:	aa 27       	eor	r26, r26
    1d06:	f0 0d       	add	r31, r0
    1d08:	b1 1d       	adc	r27, r1
    1d0a:	aa 1f       	adc	r26, r26
    1d0c:	64 9f       	mul	r22, r20
    1d0e:	66 27       	eor	r22, r22
    1d10:	b0 0d       	add	r27, r0
    1d12:	a1 1d       	adc	r26, r1
    1d14:	66 1f       	adc	r22, r22
    1d16:	82 9f       	mul	r24, r18
    1d18:	22 27       	eor	r18, r18
    1d1a:	b0 0d       	add	r27, r0
    1d1c:	a1 1d       	adc	r26, r1
    1d1e:	62 1f       	adc	r22, r18
    1d20:	73 9f       	mul	r23, r19
    1d22:	b0 0d       	add	r27, r0
    1d24:	a1 1d       	adc	r26, r1
    1d26:	62 1f       	adc	r22, r18
    1d28:	83 9f       	mul	r24, r19
    1d2a:	a0 0d       	add	r26, r0
    1d2c:	61 1d       	adc	r22, r1
    1d2e:	22 1f       	adc	r18, r18
    1d30:	74 9f       	mul	r23, r20
    1d32:	33 27       	eor	r19, r19
    1d34:	a0 0d       	add	r26, r0
    1d36:	61 1d       	adc	r22, r1
    1d38:	23 1f       	adc	r18, r19
    1d3a:	84 9f       	mul	r24, r20
    1d3c:	60 0d       	add	r22, r0
    1d3e:	21 1d       	adc	r18, r1
    1d40:	82 2f       	mov	r24, r18
    1d42:	76 2f       	mov	r23, r22
    1d44:	6a 2f       	mov	r22, r26
    1d46:	11 24       	eor	r1, r1
    1d48:	9f 57       	subi	r25, 0x7F	; 127
    1d4a:	50 40       	sbci	r21, 0x00	; 0
    1d4c:	8a f0       	brmi	.+34     	; 0x1d70 <__mulsf3_pse+0x84>
    1d4e:	e1 f0       	breq	.+56     	; 0x1d88 <__mulsf3_pse+0x9c>
    1d50:	88 23       	and	r24, r24
    1d52:	4a f0       	brmi	.+18     	; 0x1d66 <__mulsf3_pse+0x7a>
    1d54:	ee 0f       	add	r30, r30
    1d56:	ff 1f       	adc	r31, r31
    1d58:	bb 1f       	adc	r27, r27
    1d5a:	66 1f       	adc	r22, r22
    1d5c:	77 1f       	adc	r23, r23
    1d5e:	88 1f       	adc	r24, r24
    1d60:	91 50       	subi	r25, 0x01	; 1
    1d62:	50 40       	sbci	r21, 0x00	; 0
    1d64:	a9 f7       	brne	.-22     	; 0x1d50 <__mulsf3_pse+0x64>
    1d66:	9e 3f       	cpi	r25, 0xFE	; 254
    1d68:	51 05       	cpc	r21, r1
    1d6a:	70 f0       	brcs	.+28     	; 0x1d88 <__mulsf3_pse+0x9c>
    1d6c:	60 cf       	rjmp	.-320    	; 0x1c2e <__fp_inf>
    1d6e:	aa cf       	rjmp	.-172    	; 0x1cc4 <__fp_szero>
    1d70:	5f 3f       	cpi	r21, 0xFF	; 255
    1d72:	ec f3       	brlt	.-6      	; 0x1d6e <__mulsf3_pse+0x82>
    1d74:	98 3e       	cpi	r25, 0xE8	; 232
    1d76:	dc f3       	brlt	.-10     	; 0x1d6e <__mulsf3_pse+0x82>
    1d78:	86 95       	lsr	r24
    1d7a:	77 95       	ror	r23
    1d7c:	67 95       	ror	r22
    1d7e:	b7 95       	ror	r27
    1d80:	f7 95       	ror	r31
    1d82:	e7 95       	ror	r30
    1d84:	9f 5f       	subi	r25, 0xFF	; 255
    1d86:	c1 f7       	brne	.-16     	; 0x1d78 <__mulsf3_pse+0x8c>
    1d88:	fe 2b       	or	r31, r30
    1d8a:	88 0f       	add	r24, r24
    1d8c:	91 1d       	adc	r25, r1
    1d8e:	96 95       	lsr	r25
    1d90:	87 95       	ror	r24
    1d92:	97 f9       	bld	r25, 7
    1d94:	08 95       	ret

00001d96 <pow>:
    1d96:	fa 01       	movw	r30, r20
    1d98:	ee 0f       	add	r30, r30
    1d9a:	ff 1f       	adc	r31, r31
    1d9c:	30 96       	adiw	r30, 0x00	; 0
    1d9e:	21 05       	cpc	r18, r1
    1da0:	31 05       	cpc	r19, r1
    1da2:	99 f1       	breq	.+102    	; 0x1e0a <pow+0x74>
    1da4:	61 15       	cp	r22, r1
    1da6:	71 05       	cpc	r23, r1
    1da8:	61 f4       	brne	.+24     	; 0x1dc2 <pow+0x2c>
    1daa:	80 38       	cpi	r24, 0x80	; 128
    1dac:	bf e3       	ldi	r27, 0x3F	; 63
    1dae:	9b 07       	cpc	r25, r27
    1db0:	49 f1       	breq	.+82     	; 0x1e04 <pow+0x6e>
    1db2:	68 94       	set
    1db4:	90 38       	cpi	r25, 0x80	; 128
    1db6:	81 05       	cpc	r24, r1
    1db8:	61 f0       	breq	.+24     	; 0x1dd2 <pow+0x3c>
    1dba:	80 38       	cpi	r24, 0x80	; 128
    1dbc:	bf ef       	ldi	r27, 0xFF	; 255
    1dbe:	9b 07       	cpc	r25, r27
    1dc0:	41 f0       	breq	.+16     	; 0x1dd2 <pow+0x3c>
    1dc2:	99 23       	and	r25, r25
    1dc4:	42 f5       	brpl	.+80     	; 0x1e16 <pow+0x80>
    1dc6:	ff 3f       	cpi	r31, 0xFF	; 255
    1dc8:	e1 05       	cpc	r30, r1
    1dca:	31 05       	cpc	r19, r1
    1dcc:	21 05       	cpc	r18, r1
    1dce:	11 f1       	breq	.+68     	; 0x1e14 <pow+0x7e>
    1dd0:	e8 94       	clt
    1dd2:	08 94       	sec
    1dd4:	e7 95       	ror	r30
    1dd6:	d9 01       	movw	r26, r18
    1dd8:	aa 23       	and	r26, r26
    1dda:	29 f4       	brne	.+10     	; 0x1de6 <pow+0x50>
    1ddc:	ab 2f       	mov	r26, r27
    1dde:	be 2f       	mov	r27, r30
    1de0:	f8 5f       	subi	r31, 0xF8	; 248
    1de2:	d0 f3       	brcs	.-12     	; 0x1dd8 <pow+0x42>
    1de4:	10 c0       	rjmp	.+32     	; 0x1e06 <pow+0x70>
    1de6:	ff 5f       	subi	r31, 0xFF	; 255
    1de8:	70 f4       	brcc	.+28     	; 0x1e06 <pow+0x70>
    1dea:	a6 95       	lsr	r26
    1dec:	e0 f7       	brcc	.-8      	; 0x1de6 <pow+0x50>
    1dee:	f7 39       	cpi	r31, 0x97	; 151
    1df0:	50 f0       	brcs	.+20     	; 0x1e06 <pow+0x70>
    1df2:	19 f0       	breq	.+6      	; 0x1dfa <pow+0x64>
    1df4:	ff 3a       	cpi	r31, 0xAF	; 175
    1df6:	38 f4       	brcc	.+14     	; 0x1e06 <pow+0x70>
    1df8:	9f 77       	andi	r25, 0x7F	; 127
    1dfa:	9f 93       	push	r25
    1dfc:	0c d0       	rcall	.+24     	; 0x1e16 <pow+0x80>
    1dfe:	0f 90       	pop	r0
    1e00:	07 fc       	sbrc	r0, 7
    1e02:	90 58       	subi	r25, 0x80	; 128
    1e04:	08 95       	ret
    1e06:	3e f0       	brts	.+14     	; 0x1e16 <pow+0x80>
    1e08:	18 cf       	rjmp	.-464    	; 0x1c3a <__fp_nan>
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	80 e8       	ldi	r24, 0x80	; 128
    1e10:	9f e3       	ldi	r25, 0x3F	; 63
    1e12:	08 95       	ret
    1e14:	4f e7       	ldi	r20, 0x7F	; 127
    1e16:	9f 77       	andi	r25, 0x7F	; 127
    1e18:	5f 93       	push	r21
    1e1a:	4f 93       	push	r20
    1e1c:	3f 93       	push	r19
    1e1e:	2f 93       	push	r18
    1e20:	9e d0       	rcall	.+316    	; 0x1f5e <log>
    1e22:	2f 91       	pop	r18
    1e24:	3f 91       	pop	r19
    1e26:	4f 91       	pop	r20
    1e28:	5f 91       	pop	r21
    1e2a:	52 df       	rcall	.-348    	; 0x1cd0 <__mulsf3>
    1e2c:	05 c0       	rjmp	.+10     	; 0x1e38 <exp>
    1e2e:	19 f4       	brne	.+6      	; 0x1e36 <pow+0xa0>
    1e30:	0e f0       	brts	.+2      	; 0x1e34 <pow+0x9e>
    1e32:	fd ce       	rjmp	.-518    	; 0x1c2e <__fp_inf>
    1e34:	46 cf       	rjmp	.-372    	; 0x1cc2 <__fp_zero>
    1e36:	01 cf       	rjmp	.-510    	; 0x1c3a <__fp_nan>

00001e38 <exp>:
    1e38:	2a df       	rcall	.-428    	; 0x1c8e <__fp_splitA>
    1e3a:	c8 f3       	brcs	.-14     	; 0x1e2e <pow+0x98>
    1e3c:	96 38       	cpi	r25, 0x86	; 134
    1e3e:	c0 f7       	brcc	.-16     	; 0x1e30 <pow+0x9a>
    1e40:	07 f8       	bld	r0, 7
    1e42:	0f 92       	push	r0
    1e44:	e8 94       	clt
    1e46:	2b e3       	ldi	r18, 0x3B	; 59
    1e48:	3a ea       	ldi	r19, 0xAA	; 170
    1e4a:	48 eb       	ldi	r20, 0xB8	; 184
    1e4c:	5f e7       	ldi	r21, 0x7F	; 127
    1e4e:	4e df       	rcall	.-356    	; 0x1cec <__mulsf3_pse>
    1e50:	0f 92       	push	r0
    1e52:	0f 92       	push	r0
    1e54:	0f 92       	push	r0
    1e56:	4d b7       	in	r20, 0x3d	; 61
    1e58:	5e b7       	in	r21, 0x3e	; 62
    1e5a:	0f 92       	push	r0
    1e5c:	c0 d0       	rcall	.+384    	; 0x1fde <modf>
    1e5e:	e4 e5       	ldi	r30, 0x54	; 84
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	16 d0       	rcall	.+44     	; 0x1e90 <__fp_powser>
    1e64:	4f 91       	pop	r20
    1e66:	5f 91       	pop	r21
    1e68:	ef 91       	pop	r30
    1e6a:	ff 91       	pop	r31
    1e6c:	e5 95       	asr	r30
    1e6e:	ee 1f       	adc	r30, r30
    1e70:	ff 1f       	adc	r31, r31
    1e72:	49 f0       	breq	.+18     	; 0x1e86 <exp+0x4e>
    1e74:	fe 57       	subi	r31, 0x7E	; 126
    1e76:	e0 68       	ori	r30, 0x80	; 128
    1e78:	44 27       	eor	r20, r20
    1e7a:	ee 0f       	add	r30, r30
    1e7c:	44 1f       	adc	r20, r20
    1e7e:	fa 95       	dec	r31
    1e80:	e1 f7       	brne	.-8      	; 0x1e7a <exp+0x42>
    1e82:	41 95       	neg	r20
    1e84:	55 0b       	sbc	r21, r21
    1e86:	32 d0       	rcall	.+100    	; 0x1eec <ldexp>
    1e88:	0f 90       	pop	r0
    1e8a:	07 fe       	sbrs	r0, 7
    1e8c:	26 c0       	rjmp	.+76     	; 0x1eda <inverse>
    1e8e:	08 95       	ret

00001e90 <__fp_powser>:
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	1f 93       	push	r17
    1e96:	0f 93       	push	r16
    1e98:	ff 92       	push	r15
    1e9a:	ef 92       	push	r14
    1e9c:	df 92       	push	r13
    1e9e:	7b 01       	movw	r14, r22
    1ea0:	8c 01       	movw	r16, r24
    1ea2:	68 94       	set
    1ea4:	05 c0       	rjmp	.+10     	; 0x1eb0 <__fp_powser+0x20>
    1ea6:	da 2e       	mov	r13, r26
    1ea8:	ef 01       	movw	r28, r30
    1eaa:	1e df       	rcall	.-452    	; 0x1ce8 <__mulsf3x>
    1eac:	fe 01       	movw	r30, r28
    1eae:	e8 94       	clt
    1eb0:	a5 91       	lpm	r26, Z+
    1eb2:	25 91       	lpm	r18, Z+
    1eb4:	35 91       	lpm	r19, Z+
    1eb6:	45 91       	lpm	r20, Z+
    1eb8:	55 91       	lpm	r21, Z+
    1eba:	ae f3       	brts	.-22     	; 0x1ea6 <__fp_powser+0x16>
    1ebc:	ef 01       	movw	r28, r30
    1ebe:	8e dd       	rcall	.-1252   	; 0x19dc <__addsf3x>
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	97 01       	movw	r18, r14
    1ec4:	a8 01       	movw	r20, r16
    1ec6:	da 94       	dec	r13
    1ec8:	79 f7       	brne	.-34     	; 0x1ea8 <__fp_powser+0x18>
    1eca:	df 90       	pop	r13
    1ecc:	ef 90       	pop	r14
    1ece:	ff 90       	pop	r15
    1ed0:	0f 91       	pop	r16
    1ed2:	1f 91       	pop	r17
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <inverse>:
    1eda:	9b 01       	movw	r18, r22
    1edc:	ac 01       	movw	r20, r24
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	80 e8       	ldi	r24, 0x80	; 128
    1ee4:	9f e3       	ldi	r25, 0x3F	; 63
    1ee6:	cd cd       	rjmp	.-1126   	; 0x1a82 <__divsf3>
    1ee8:	a2 ce       	rjmp	.-700    	; 0x1c2e <__fp_inf>
    1eea:	ac c0       	rjmp	.+344    	; 0x2044 <__fp_mpack>

00001eec <ldexp>:
    1eec:	d0 de       	rcall	.-608    	; 0x1c8e <__fp_splitA>
    1eee:	e8 f3       	brcs	.-6      	; 0x1eea <inverse+0x10>
    1ef0:	99 23       	and	r25, r25
    1ef2:	d9 f3       	breq	.-10     	; 0x1eea <inverse+0x10>
    1ef4:	94 0f       	add	r25, r20
    1ef6:	51 1d       	adc	r21, r1
    1ef8:	bb f3       	brvs	.-18     	; 0x1ee8 <inverse+0xe>
    1efa:	91 50       	subi	r25, 0x01	; 1
    1efc:	50 40       	sbci	r21, 0x00	; 0
    1efe:	94 f0       	brlt	.+36     	; 0x1f24 <ldexp+0x38>
    1f00:	59 f0       	breq	.+22     	; 0x1f18 <ldexp+0x2c>
    1f02:	88 23       	and	r24, r24
    1f04:	32 f0       	brmi	.+12     	; 0x1f12 <ldexp+0x26>
    1f06:	66 0f       	add	r22, r22
    1f08:	77 1f       	adc	r23, r23
    1f0a:	88 1f       	adc	r24, r24
    1f0c:	91 50       	subi	r25, 0x01	; 1
    1f0e:	50 40       	sbci	r21, 0x00	; 0
    1f10:	c1 f7       	brne	.-16     	; 0x1f02 <ldexp+0x16>
    1f12:	9e 3f       	cpi	r25, 0xFE	; 254
    1f14:	51 05       	cpc	r21, r1
    1f16:	44 f7       	brge	.-48     	; 0x1ee8 <inverse+0xe>
    1f18:	88 0f       	add	r24, r24
    1f1a:	91 1d       	adc	r25, r1
    1f1c:	96 95       	lsr	r25
    1f1e:	87 95       	ror	r24
    1f20:	97 f9       	bld	r25, 7
    1f22:	08 95       	ret
    1f24:	5f 3f       	cpi	r21, 0xFF	; 255
    1f26:	ac f0       	brlt	.+42     	; 0x1f52 <ldexp+0x66>
    1f28:	98 3e       	cpi	r25, 0xE8	; 232
    1f2a:	9c f0       	brlt	.+38     	; 0x1f52 <ldexp+0x66>
    1f2c:	bb 27       	eor	r27, r27
    1f2e:	86 95       	lsr	r24
    1f30:	77 95       	ror	r23
    1f32:	67 95       	ror	r22
    1f34:	b7 95       	ror	r27
    1f36:	08 f4       	brcc	.+2      	; 0x1f3a <ldexp+0x4e>
    1f38:	b1 60       	ori	r27, 0x01	; 1
    1f3a:	93 95       	inc	r25
    1f3c:	c1 f7       	brne	.-16     	; 0x1f2e <ldexp+0x42>
    1f3e:	bb 0f       	add	r27, r27
    1f40:	58 f7       	brcc	.-42     	; 0x1f18 <ldexp+0x2c>
    1f42:	11 f4       	brne	.+4      	; 0x1f48 <ldexp+0x5c>
    1f44:	60 ff       	sbrs	r22, 0
    1f46:	e8 cf       	rjmp	.-48     	; 0x1f18 <ldexp+0x2c>
    1f48:	6f 5f       	subi	r22, 0xFF	; 255
    1f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f50:	e3 cf       	rjmp	.-58     	; 0x1f18 <ldexp+0x2c>
    1f52:	b8 ce       	rjmp	.-656    	; 0x1cc4 <__fp_szero>
    1f54:	0e f0       	brts	.+2      	; 0x1f58 <ldexp+0x6c>
    1f56:	76 c0       	rjmp	.+236    	; 0x2044 <__fp_mpack>
    1f58:	70 ce       	rjmp	.-800    	; 0x1c3a <__fp_nan>
    1f5a:	68 94       	set
    1f5c:	68 ce       	rjmp	.-816    	; 0x1c2e <__fp_inf>

00001f5e <log>:
    1f5e:	97 de       	rcall	.-722    	; 0x1c8e <__fp_splitA>
    1f60:	c8 f3       	brcs	.-14     	; 0x1f54 <ldexp+0x68>
    1f62:	99 23       	and	r25, r25
    1f64:	d1 f3       	breq	.-12     	; 0x1f5a <ldexp+0x6e>
    1f66:	c6 f3       	brts	.-16     	; 0x1f58 <ldexp+0x6c>
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	1f 93       	push	r17
    1f6e:	0f 93       	push	r16
    1f70:	ff 92       	push	r15
    1f72:	c9 2f       	mov	r28, r25
    1f74:	dd 27       	eor	r29, r29
    1f76:	88 23       	and	r24, r24
    1f78:	2a f0       	brmi	.+10     	; 0x1f84 <log+0x26>
    1f7a:	21 97       	sbiw	r28, 0x01	; 1
    1f7c:	66 0f       	add	r22, r22
    1f7e:	77 1f       	adc	r23, r23
    1f80:	88 1f       	adc	r24, r24
    1f82:	da f7       	brpl	.-10     	; 0x1f7a <log+0x1c>
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f eb       	ldi	r21, 0xBF	; 191
    1f8c:	9f e3       	ldi	r25, 0x3F	; 63
    1f8e:	88 39       	cpi	r24, 0x98	; 152
    1f90:	20 f0       	brcs	.+8      	; 0x1f9a <log+0x3c>
    1f92:	80 3e       	cpi	r24, 0xE0	; 224
    1f94:	30 f0       	brcs	.+12     	; 0x1fa2 <log+0x44>
    1f96:	21 96       	adiw	r28, 0x01	; 1
    1f98:	8f 77       	andi	r24, 0x7F	; 127
    1f9a:	0f dd       	rcall	.-1506   	; 0x19ba <__addsf3>
    1f9c:	ec e7       	ldi	r30, 0x7C	; 124
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	03 c0       	rjmp	.+6      	; 0x1fa8 <log+0x4a>
    1fa2:	0b dd       	rcall	.-1514   	; 0x19ba <__addsf3>
    1fa4:	e9 ea       	ldi	r30, 0xA9	; 169
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	73 df       	rcall	.-282    	; 0x1e90 <__fp_powser>
    1faa:	8b 01       	movw	r16, r22
    1fac:	be 01       	movw	r22, r28
    1fae:	ec 01       	movw	r28, r24
    1fb0:	fb 2e       	mov	r15, r27
    1fb2:	6f 57       	subi	r22, 0x7F	; 127
    1fb4:	71 09       	sbc	r23, r1
    1fb6:	75 95       	asr	r23
    1fb8:	77 1f       	adc	r23, r23
    1fba:	88 0b       	sbc	r24, r24
    1fbc:	99 0b       	sbc	r25, r25
    1fbe:	fc dd       	rcall	.-1032   	; 0x1bb8 <__floatsisf>
    1fc0:	28 e1       	ldi	r18, 0x18	; 24
    1fc2:	32 e7       	ldi	r19, 0x72	; 114
    1fc4:	41 e3       	ldi	r20, 0x31	; 49
    1fc6:	5f e3       	ldi	r21, 0x3F	; 63
    1fc8:	8f de       	rcall	.-738    	; 0x1ce8 <__mulsf3x>
    1fca:	af 2d       	mov	r26, r15
    1fcc:	98 01       	movw	r18, r16
    1fce:	ae 01       	movw	r20, r28
    1fd0:	ff 90       	pop	r15
    1fd2:	0f 91       	pop	r16
    1fd4:	1f 91       	pop	r17
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	00 dd       	rcall	.-1536   	; 0x19dc <__addsf3x>
    1fdc:	3f ce       	rjmp	.-898    	; 0x1c5c <__fp_round>

00001fde <modf>:
    1fde:	fa 01       	movw	r30, r20
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	aa 0f       	add	r26, r26
    1fe4:	bb 1f       	adc	r27, r27
    1fe6:	9b 01       	movw	r18, r22
    1fe8:	ac 01       	movw	r20, r24
    1fea:	bf 57       	subi	r27, 0x7F	; 127
    1fec:	28 f4       	brcc	.+10     	; 0x1ff8 <modf+0x1a>
    1fee:	22 27       	eor	r18, r18
    1ff0:	33 27       	eor	r19, r19
    1ff2:	44 27       	eor	r20, r20
    1ff4:	50 78       	andi	r21, 0x80	; 128
    1ff6:	1f c0       	rjmp	.+62     	; 0x2036 <modf+0x58>
    1ff8:	b7 51       	subi	r27, 0x17	; 23
    1ffa:	88 f4       	brcc	.+34     	; 0x201e <modf+0x40>
    1ffc:	ab 2f       	mov	r26, r27
    1ffe:	00 24       	eor	r0, r0
    2000:	46 95       	lsr	r20
    2002:	37 95       	ror	r19
    2004:	27 95       	ror	r18
    2006:	01 1c       	adc	r0, r1
    2008:	a3 95       	inc	r26
    200a:	d2 f3       	brmi	.-12     	; 0x2000 <modf+0x22>
    200c:	00 20       	and	r0, r0
    200e:	69 f0       	breq	.+26     	; 0x202a <modf+0x4c>
    2010:	22 0f       	add	r18, r18
    2012:	33 1f       	adc	r19, r19
    2014:	44 1f       	adc	r20, r20
    2016:	b3 95       	inc	r27
    2018:	da f3       	brmi	.-10     	; 0x2010 <modf+0x32>
    201a:	0d d0       	rcall	.+26     	; 0x2036 <modf+0x58>
    201c:	cd cc       	rjmp	.-1638   	; 0x19b8 <__subsf3>
    201e:	61 30       	cpi	r22, 0x01	; 1
    2020:	71 05       	cpc	r23, r1
    2022:	a0 e8       	ldi	r26, 0x80	; 128
    2024:	8a 07       	cpc	r24, r26
    2026:	b9 46       	sbci	r27, 0x69	; 105
    2028:	30 f4       	brcc	.+12     	; 0x2036 <modf+0x58>
    202a:	9b 01       	movw	r18, r22
    202c:	ac 01       	movw	r20, r24
    202e:	66 27       	eor	r22, r22
    2030:	77 27       	eor	r23, r23
    2032:	88 27       	eor	r24, r24
    2034:	90 78       	andi	r25, 0x80	; 128
    2036:	30 96       	adiw	r30, 0x00	; 0
    2038:	21 f0       	breq	.+8      	; 0x2042 <modf+0x64>
    203a:	20 83       	st	Z, r18
    203c:	31 83       	std	Z+1, r19	; 0x01
    203e:	42 83       	std	Z+2, r20	; 0x02
    2040:	53 83       	std	Z+3, r21	; 0x03
    2042:	08 95       	ret

00002044 <__fp_mpack>:
    2044:	9f 3f       	cpi	r25, 0xFF	; 255
    2046:	31 f0       	breq	.+12     	; 0x2054 <__fp_mpack_finite+0xc>

00002048 <__fp_mpack_finite>:
    2048:	91 50       	subi	r25, 0x01	; 1
    204a:	20 f4       	brcc	.+8      	; 0x2054 <__fp_mpack_finite+0xc>
    204c:	87 95       	ror	r24
    204e:	77 95       	ror	r23
    2050:	67 95       	ror	r22
    2052:	b7 95       	ror	r27
    2054:	88 0f       	add	r24, r24
    2056:	91 1d       	adc	r25, r1
    2058:	96 95       	lsr	r25
    205a:	87 95       	ror	r24
    205c:	97 f9       	bld	r25, 7
    205e:	08 95       	ret

00002060 <__udivmodqi4>:
    2060:	99 1b       	sub	r25, r25
    2062:	79 e0       	ldi	r23, 0x09	; 9
    2064:	04 c0       	rjmp	.+8      	; 0x206e <__udivmodqi4_ep>

00002066 <__udivmodqi4_loop>:
    2066:	99 1f       	adc	r25, r25
    2068:	96 17       	cp	r25, r22
    206a:	08 f0       	brcs	.+2      	; 0x206e <__udivmodqi4_ep>
    206c:	96 1b       	sub	r25, r22

0000206e <__udivmodqi4_ep>:
    206e:	88 1f       	adc	r24, r24
    2070:	7a 95       	dec	r23
    2072:	c9 f7       	brne	.-14     	; 0x2066 <__udivmodqi4_loop>
    2074:	80 95       	com	r24
    2076:	08 95       	ret

00002078 <__divmodhi4>:
    2078:	97 fb       	bst	r25, 7
    207a:	09 2e       	mov	r0, r25
    207c:	07 26       	eor	r0, r23
    207e:	0a d0       	rcall	.+20     	; 0x2094 <__divmodhi4_neg1>
    2080:	77 fd       	sbrc	r23, 7
    2082:	04 d0       	rcall	.+8      	; 0x208c <__divmodhi4_neg2>
    2084:	0c d0       	rcall	.+24     	; 0x209e <__udivmodhi4>
    2086:	06 d0       	rcall	.+12     	; 0x2094 <__divmodhi4_neg1>
    2088:	00 20       	and	r0, r0
    208a:	1a f4       	brpl	.+6      	; 0x2092 <__divmodhi4_exit>

0000208c <__divmodhi4_neg2>:
    208c:	70 95       	com	r23
    208e:	61 95       	neg	r22
    2090:	7f 4f       	sbci	r23, 0xFF	; 255

00002092 <__divmodhi4_exit>:
    2092:	08 95       	ret

00002094 <__divmodhi4_neg1>:
    2094:	f6 f7       	brtc	.-4      	; 0x2092 <__divmodhi4_exit>
    2096:	90 95       	com	r25
    2098:	81 95       	neg	r24
    209a:	9f 4f       	sbci	r25, 0xFF	; 255
    209c:	08 95       	ret

0000209e <__udivmodhi4>:
    209e:	aa 1b       	sub	r26, r26
    20a0:	bb 1b       	sub	r27, r27
    20a2:	51 e1       	ldi	r21, 0x11	; 17
    20a4:	07 c0       	rjmp	.+14     	; 0x20b4 <__udivmodhi4_ep>

000020a6 <__udivmodhi4_loop>:
    20a6:	aa 1f       	adc	r26, r26
    20a8:	bb 1f       	adc	r27, r27
    20aa:	a6 17       	cp	r26, r22
    20ac:	b7 07       	cpc	r27, r23
    20ae:	10 f0       	brcs	.+4      	; 0x20b4 <__udivmodhi4_ep>
    20b0:	a6 1b       	sub	r26, r22
    20b2:	b7 0b       	sbc	r27, r23

000020b4 <__udivmodhi4_ep>:
    20b4:	88 1f       	adc	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	5a 95       	dec	r21
    20ba:	a9 f7       	brne	.-22     	; 0x20a6 <__udivmodhi4_loop>
    20bc:	80 95       	com	r24
    20be:	90 95       	com	r25
    20c0:	bc 01       	movw	r22, r24
    20c2:	cd 01       	movw	r24, r26
    20c4:	08 95       	ret

000020c6 <fputc>:
    20c6:	0f 93       	push	r16
    20c8:	1f 93       	push	r17
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	8c 01       	movw	r16, r24
    20d0:	eb 01       	movw	r28, r22
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	81 ff       	sbrs	r24, 1
    20d6:	1b c0       	rjmp	.+54     	; 0x210e <fputc+0x48>
    20d8:	82 ff       	sbrs	r24, 2
    20da:	0d c0       	rjmp	.+26     	; 0x20f6 <fputc+0x30>
    20dc:	2e 81       	ldd	r18, Y+6	; 0x06
    20de:	3f 81       	ldd	r19, Y+7	; 0x07
    20e0:	8c 81       	ldd	r24, Y+4	; 0x04
    20e2:	9d 81       	ldd	r25, Y+5	; 0x05
    20e4:	28 17       	cp	r18, r24
    20e6:	39 07       	cpc	r19, r25
    20e8:	64 f4       	brge	.+24     	; 0x2102 <fputc+0x3c>
    20ea:	e8 81       	ld	r30, Y
    20ec:	f9 81       	ldd	r31, Y+1	; 0x01
    20ee:	01 93       	st	Z+, r16
    20f0:	f9 83       	std	Y+1, r31	; 0x01
    20f2:	e8 83       	st	Y, r30
    20f4:	06 c0       	rjmp	.+12     	; 0x2102 <fputc+0x3c>
    20f6:	e8 85       	ldd	r30, Y+8	; 0x08
    20f8:	f9 85       	ldd	r31, Y+9	; 0x09
    20fa:	80 2f       	mov	r24, r16
    20fc:	09 95       	icall
    20fe:	00 97       	sbiw	r24, 0x00	; 0
    2100:	31 f4       	brne	.+12     	; 0x210e <fputc+0x48>
    2102:	8e 81       	ldd	r24, Y+6	; 0x06
    2104:	9f 81       	ldd	r25, Y+7	; 0x07
    2106:	01 96       	adiw	r24, 0x01	; 1
    2108:	9f 83       	std	Y+7, r25	; 0x07
    210a:	8e 83       	std	Y+6, r24	; 0x06
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <fputc+0x4c>
    210e:	0f ef       	ldi	r16, 0xFF	; 255
    2110:	1f ef       	ldi	r17, 0xFF	; 255
    2112:	c8 01       	movw	r24, r16
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	08 95       	ret

0000211e <printf>:
    211e:	a0 e0       	ldi	r26, 0x00	; 0
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	e5 e9       	ldi	r30, 0x95	; 149
    2124:	f0 e1       	ldi	r31, 0x10	; 16
    2126:	0c 94 47 13 	jmp	0x268e	; 0x268e <__prologue_saves__+0x20>
    212a:	fe 01       	movw	r30, r28
    212c:	35 96       	adiw	r30, 0x05	; 5
    212e:	61 91       	ld	r22, Z+
    2130:	71 91       	ld	r23, Z+
    2132:	80 91 57 03 	lds	r24, 0x0357
    2136:	90 91 58 03 	lds	r25, 0x0358
    213a:	af 01       	movw	r20, r30
    213c:	0e 94 c7 10 	call	0x218e	; 0x218e <vfprintf>
    2140:	20 96       	adiw	r28, 0x00	; 0
    2142:	e2 e0       	ldi	r30, 0x02	; 2
    2144:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__epilogue_restores__+0x20>

00002148 <sprintf>:
    2148:	ae e0       	ldi	r26, 0x0E	; 14
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	ea ea       	ldi	r30, 0xAA	; 170
    214e:	f0 e1       	ldi	r31, 0x10	; 16
    2150:	0c 94 45 13 	jmp	0x268a	; 0x268a <__prologue_saves__+0x1c>
    2154:	0d 89       	ldd	r16, Y+21	; 0x15
    2156:	1e 89       	ldd	r17, Y+22	; 0x16
    2158:	86 e0       	ldi	r24, 0x06	; 6
    215a:	8c 83       	std	Y+4, r24	; 0x04
    215c:	1a 83       	std	Y+2, r17	; 0x02
    215e:	09 83       	std	Y+1, r16	; 0x01
    2160:	8f ef       	ldi	r24, 0xFF	; 255
    2162:	9f e7       	ldi	r25, 0x7F	; 127
    2164:	9e 83       	std	Y+6, r25	; 0x06
    2166:	8d 83       	std	Y+5, r24	; 0x05
    2168:	9e 01       	movw	r18, r28
    216a:	27 5e       	subi	r18, 0xE7	; 231
    216c:	3f 4f       	sbci	r19, 0xFF	; 255
    216e:	ce 01       	movw	r24, r28
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	6f 89       	ldd	r22, Y+23	; 0x17
    2174:	78 8d       	ldd	r23, Y+24	; 0x18
    2176:	a9 01       	movw	r20, r18
    2178:	0e 94 c7 10 	call	0x218e	; 0x218e <vfprintf>
    217c:	ef 81       	ldd	r30, Y+7	; 0x07
    217e:	f8 85       	ldd	r31, Y+8	; 0x08
    2180:	e0 0f       	add	r30, r16
    2182:	f1 1f       	adc	r31, r17
    2184:	10 82       	st	Z, r1
    2186:	2e 96       	adiw	r28, 0x0e	; 14
    2188:	e4 e0       	ldi	r30, 0x04	; 4
    218a:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__epilogue_restores__+0x1c>

0000218e <vfprintf>:
    218e:	ac e0       	ldi	r26, 0x0C	; 12
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	ed ec       	ldi	r30, 0xCD	; 205
    2194:	f0 e1       	ldi	r31, 0x10	; 16
    2196:	0c 94 37 13 	jmp	0x266e	; 0x266e <__prologue_saves__>
    219a:	6c 01       	movw	r12, r24
    219c:	1b 01       	movw	r2, r22
    219e:	8a 01       	movw	r16, r20
    21a0:	fc 01       	movw	r30, r24
    21a2:	17 82       	std	Z+7, r1	; 0x07
    21a4:	16 82       	std	Z+6, r1	; 0x06
    21a6:	83 81       	ldd	r24, Z+3	; 0x03
    21a8:	81 ff       	sbrs	r24, 1
    21aa:	d1 c1       	rjmp	.+930    	; 0x254e <vfprintf+0x3c0>
    21ac:	2e 01       	movw	r4, r28
    21ae:	08 94       	sec
    21b0:	41 1c       	adc	r4, r1
    21b2:	51 1c       	adc	r5, r1
    21b4:	f6 01       	movw	r30, r12
    21b6:	93 81       	ldd	r25, Z+3	; 0x03
    21b8:	f1 01       	movw	r30, r2
    21ba:	93 fd       	sbrc	r25, 3
    21bc:	85 91       	lpm	r24, Z+
    21be:	93 ff       	sbrs	r25, 3
    21c0:	81 91       	ld	r24, Z+
    21c2:	1f 01       	movw	r2, r30
    21c4:	88 23       	and	r24, r24
    21c6:	09 f4       	brne	.+2      	; 0x21ca <vfprintf+0x3c>
    21c8:	be c1       	rjmp	.+892    	; 0x2546 <vfprintf+0x3b8>
    21ca:	85 32       	cpi	r24, 0x25	; 37
    21cc:	39 f4       	brne	.+14     	; 0x21dc <vfprintf+0x4e>
    21ce:	93 fd       	sbrc	r25, 3
    21d0:	85 91       	lpm	r24, Z+
    21d2:	93 ff       	sbrs	r25, 3
    21d4:	81 91       	ld	r24, Z+
    21d6:	1f 01       	movw	r2, r30
    21d8:	85 32       	cpi	r24, 0x25	; 37
    21da:	29 f4       	brne	.+10     	; 0x21e6 <vfprintf+0x58>
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	b6 01       	movw	r22, r12
    21e0:	0e 94 63 10 	call	0x20c6	; 0x20c6 <fputc>
    21e4:	e7 cf       	rjmp	.-50     	; 0x21b4 <vfprintf+0x26>
    21e6:	ee 24       	eor	r14, r14
    21e8:	ff 24       	eor	r15, r15
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	20 32       	cpi	r18, 0x20	; 32
    21ee:	b0 f4       	brcc	.+44     	; 0x221c <vfprintf+0x8e>
    21f0:	8b 32       	cpi	r24, 0x2B	; 43
    21f2:	69 f0       	breq	.+26     	; 0x220e <vfprintf+0x80>
    21f4:	8c 32       	cpi	r24, 0x2C	; 44
    21f6:	28 f4       	brcc	.+10     	; 0x2202 <vfprintf+0x74>
    21f8:	80 32       	cpi	r24, 0x20	; 32
    21fa:	51 f0       	breq	.+20     	; 0x2210 <vfprintf+0x82>
    21fc:	83 32       	cpi	r24, 0x23	; 35
    21fe:	71 f4       	brne	.+28     	; 0x221c <vfprintf+0x8e>
    2200:	0b c0       	rjmp	.+22     	; 0x2218 <vfprintf+0x8a>
    2202:	8d 32       	cpi	r24, 0x2D	; 45
    2204:	39 f0       	breq	.+14     	; 0x2214 <vfprintf+0x86>
    2206:	80 33       	cpi	r24, 0x30	; 48
    2208:	49 f4       	brne	.+18     	; 0x221c <vfprintf+0x8e>
    220a:	21 60       	ori	r18, 0x01	; 1
    220c:	2c c0       	rjmp	.+88     	; 0x2266 <vfprintf+0xd8>
    220e:	22 60       	ori	r18, 0x02	; 2
    2210:	24 60       	ori	r18, 0x04	; 4
    2212:	29 c0       	rjmp	.+82     	; 0x2266 <vfprintf+0xd8>
    2214:	28 60       	ori	r18, 0x08	; 8
    2216:	27 c0       	rjmp	.+78     	; 0x2266 <vfprintf+0xd8>
    2218:	20 61       	ori	r18, 0x10	; 16
    221a:	25 c0       	rjmp	.+74     	; 0x2266 <vfprintf+0xd8>
    221c:	27 fd       	sbrc	r18, 7
    221e:	2c c0       	rjmp	.+88     	; 0x2278 <vfprintf+0xea>
    2220:	38 2f       	mov	r19, r24
    2222:	30 53       	subi	r19, 0x30	; 48
    2224:	3a 30       	cpi	r19, 0x0A	; 10
    2226:	98 f4       	brcc	.+38     	; 0x224e <vfprintf+0xc0>
    2228:	26 ff       	sbrs	r18, 6
    222a:	08 c0       	rjmp	.+16     	; 0x223c <vfprintf+0xae>
    222c:	8e 2d       	mov	r24, r14
    222e:	88 0f       	add	r24, r24
    2230:	e8 2e       	mov	r14, r24
    2232:	ee 0c       	add	r14, r14
    2234:	ee 0c       	add	r14, r14
    2236:	e8 0e       	add	r14, r24
    2238:	e3 0e       	add	r14, r19
    223a:	15 c0       	rjmp	.+42     	; 0x2266 <vfprintf+0xd8>
    223c:	8f 2d       	mov	r24, r15
    223e:	88 0f       	add	r24, r24
    2240:	f8 2e       	mov	r15, r24
    2242:	ff 0c       	add	r15, r15
    2244:	ff 0c       	add	r15, r15
    2246:	f8 0e       	add	r15, r24
    2248:	f3 0e       	add	r15, r19
    224a:	20 62       	ori	r18, 0x20	; 32
    224c:	0c c0       	rjmp	.+24     	; 0x2266 <vfprintf+0xd8>
    224e:	8e 32       	cpi	r24, 0x2E	; 46
    2250:	21 f4       	brne	.+8      	; 0x225a <vfprintf+0xcc>
    2252:	26 fd       	sbrc	r18, 6
    2254:	78 c1       	rjmp	.+752    	; 0x2546 <vfprintf+0x3b8>
    2256:	20 64       	ori	r18, 0x40	; 64
    2258:	06 c0       	rjmp	.+12     	; 0x2266 <vfprintf+0xd8>
    225a:	8c 36       	cpi	r24, 0x6C	; 108
    225c:	11 f4       	brne	.+4      	; 0x2262 <vfprintf+0xd4>
    225e:	20 68       	ori	r18, 0x80	; 128
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <vfprintf+0xd8>
    2262:	88 36       	cpi	r24, 0x68	; 104
    2264:	49 f4       	brne	.+18     	; 0x2278 <vfprintf+0xea>
    2266:	f1 01       	movw	r30, r2
    2268:	93 fd       	sbrc	r25, 3
    226a:	85 91       	lpm	r24, Z+
    226c:	93 ff       	sbrs	r25, 3
    226e:	81 91       	ld	r24, Z+
    2270:	1f 01       	movw	r2, r30
    2272:	88 23       	and	r24, r24
    2274:	09 f0       	breq	.+2      	; 0x2278 <vfprintf+0xea>
    2276:	ba cf       	rjmp	.-140    	; 0x21ec <vfprintf+0x5e>
    2278:	98 2f       	mov	r25, r24
    227a:	95 54       	subi	r25, 0x45	; 69
    227c:	93 30       	cpi	r25, 0x03	; 3
    227e:	18 f0       	brcs	.+6      	; 0x2286 <vfprintf+0xf8>
    2280:	90 52       	subi	r25, 0x20	; 32
    2282:	93 30       	cpi	r25, 0x03	; 3
    2284:	28 f4       	brcc	.+10     	; 0x2290 <vfprintf+0x102>
    2286:	0c 5f       	subi	r16, 0xFC	; 252
    2288:	1f 4f       	sbci	r17, 0xFF	; 255
    228a:	ff e3       	ldi	r31, 0x3F	; 63
    228c:	f9 83       	std	Y+1, r31	; 0x01
    228e:	0d c0       	rjmp	.+26     	; 0x22aa <vfprintf+0x11c>
    2290:	83 36       	cpi	r24, 0x63	; 99
    2292:	31 f0       	breq	.+12     	; 0x22a0 <vfprintf+0x112>
    2294:	83 37       	cpi	r24, 0x73	; 115
    2296:	71 f0       	breq	.+28     	; 0x22b4 <vfprintf+0x126>
    2298:	83 35       	cpi	r24, 0x53	; 83
    229a:	09 f0       	breq	.+2      	; 0x229e <vfprintf+0x110>
    229c:	60 c0       	rjmp	.+192    	; 0x235e <vfprintf+0x1d0>
    229e:	22 c0       	rjmp	.+68     	; 0x22e4 <vfprintf+0x156>
    22a0:	f8 01       	movw	r30, r16
    22a2:	80 81       	ld	r24, Z
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	0e 5f       	subi	r16, 0xFE	; 254
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
    22aa:	42 01       	movw	r8, r4
    22ac:	71 e0       	ldi	r23, 0x01	; 1
    22ae:	a7 2e       	mov	r10, r23
    22b0:	b1 2c       	mov	r11, r1
    22b2:	16 c0       	rjmp	.+44     	; 0x22e0 <vfprintf+0x152>
    22b4:	62 e0       	ldi	r22, 0x02	; 2
    22b6:	66 2e       	mov	r6, r22
    22b8:	71 2c       	mov	r7, r1
    22ba:	60 0e       	add	r6, r16
    22bc:	71 1e       	adc	r7, r17
    22be:	f8 01       	movw	r30, r16
    22c0:	80 80       	ld	r8, Z
    22c2:	91 80       	ldd	r9, Z+1	; 0x01
    22c4:	26 ff       	sbrs	r18, 6
    22c6:	03 c0       	rjmp	.+6      	; 0x22ce <vfprintf+0x140>
    22c8:	6e 2d       	mov	r22, r14
    22ca:	70 e0       	ldi	r23, 0x00	; 0
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <vfprintf+0x144>
    22ce:	6f ef       	ldi	r22, 0xFF	; 255
    22d0:	7f ef       	ldi	r23, 0xFF	; 255
    22d2:	c4 01       	movw	r24, r8
    22d4:	2c 87       	std	Y+12, r18	; 0x0c
    22d6:	0e 94 ce 12 	call	0x259c	; 0x259c <strnlen>
    22da:	5c 01       	movw	r10, r24
    22dc:	83 01       	movw	r16, r6
    22de:	2c 85       	ldd	r18, Y+12	; 0x0c
    22e0:	2f 77       	andi	r18, 0x7F	; 127
    22e2:	17 c0       	rjmp	.+46     	; 0x2312 <vfprintf+0x184>
    22e4:	52 e0       	ldi	r21, 0x02	; 2
    22e6:	65 2e       	mov	r6, r21
    22e8:	71 2c       	mov	r7, r1
    22ea:	60 0e       	add	r6, r16
    22ec:	71 1e       	adc	r7, r17
    22ee:	f8 01       	movw	r30, r16
    22f0:	80 80       	ld	r8, Z
    22f2:	91 80       	ldd	r9, Z+1	; 0x01
    22f4:	26 ff       	sbrs	r18, 6
    22f6:	03 c0       	rjmp	.+6      	; 0x22fe <vfprintf+0x170>
    22f8:	6e 2d       	mov	r22, r14
    22fa:	70 e0       	ldi	r23, 0x00	; 0
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <vfprintf+0x174>
    22fe:	6f ef       	ldi	r22, 0xFF	; 255
    2300:	7f ef       	ldi	r23, 0xFF	; 255
    2302:	c4 01       	movw	r24, r8
    2304:	2c 87       	std	Y+12, r18	; 0x0c
    2306:	0e 94 c3 12 	call	0x2586	; 0x2586 <strnlen_P>
    230a:	5c 01       	movw	r10, r24
    230c:	2c 85       	ldd	r18, Y+12	; 0x0c
    230e:	20 68       	ori	r18, 0x80	; 128
    2310:	83 01       	movw	r16, r6
    2312:	23 fd       	sbrc	r18, 3
    2314:	20 c0       	rjmp	.+64     	; 0x2356 <vfprintf+0x1c8>
    2316:	08 c0       	rjmp	.+16     	; 0x2328 <vfprintf+0x19a>
    2318:	80 e2       	ldi	r24, 0x20	; 32
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	b6 01       	movw	r22, r12
    231e:	2c 87       	std	Y+12, r18	; 0x0c
    2320:	0e 94 63 10 	call	0x20c6	; 0x20c6 <fputc>
    2324:	fa 94       	dec	r15
    2326:	2c 85       	ldd	r18, Y+12	; 0x0c
    2328:	8f 2d       	mov	r24, r15
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	a8 16       	cp	r10, r24
    232e:	b9 06       	cpc	r11, r25
    2330:	98 f3       	brcs	.-26     	; 0x2318 <vfprintf+0x18a>
    2332:	11 c0       	rjmp	.+34     	; 0x2356 <vfprintf+0x1c8>
    2334:	f4 01       	movw	r30, r8
    2336:	27 fd       	sbrc	r18, 7
    2338:	85 91       	lpm	r24, Z+
    233a:	27 ff       	sbrs	r18, 7
    233c:	81 91       	ld	r24, Z+
    233e:	4f 01       	movw	r8, r30
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	b6 01       	movw	r22, r12
    2344:	2c 87       	std	Y+12, r18	; 0x0c
    2346:	0e 94 63 10 	call	0x20c6	; 0x20c6 <fputc>
    234a:	2c 85       	ldd	r18, Y+12	; 0x0c
    234c:	f1 10       	cpse	r15, r1
    234e:	fa 94       	dec	r15
    2350:	08 94       	sec
    2352:	a1 08       	sbc	r10, r1
    2354:	b1 08       	sbc	r11, r1
    2356:	a1 14       	cp	r10, r1
    2358:	b1 04       	cpc	r11, r1
    235a:	61 f7       	brne	.-40     	; 0x2334 <vfprintf+0x1a6>
    235c:	f1 c0       	rjmp	.+482    	; 0x2540 <vfprintf+0x3b2>
    235e:	84 36       	cpi	r24, 0x64	; 100
    2360:	11 f0       	breq	.+4      	; 0x2366 <vfprintf+0x1d8>
    2362:	89 36       	cpi	r24, 0x69	; 105
    2364:	49 f5       	brne	.+82     	; 0x23b8 <vfprintf+0x22a>
    2366:	27 ff       	sbrs	r18, 7
    2368:	08 c0       	rjmp	.+16     	; 0x237a <vfprintf+0x1ec>
    236a:	f8 01       	movw	r30, r16
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	0c 5f       	subi	r16, 0xFC	; 252
    2376:	1f 4f       	sbci	r17, 0xFF	; 255
    2378:	09 c0       	rjmp	.+18     	; 0x238c <vfprintf+0x1fe>
    237a:	f8 01       	movw	r30, r16
    237c:	60 81       	ld	r22, Z
    237e:	71 81       	ldd	r23, Z+1	; 0x01
    2380:	88 27       	eor	r24, r24
    2382:	77 fd       	sbrc	r23, 7
    2384:	80 95       	com	r24
    2386:	98 2f       	mov	r25, r24
    2388:	0e 5f       	subi	r16, 0xFE	; 254
    238a:	1f 4f       	sbci	r17, 0xFF	; 255
    238c:	4f e6       	ldi	r20, 0x6F	; 111
    238e:	b4 2e       	mov	r11, r20
    2390:	b2 22       	and	r11, r18
    2392:	97 ff       	sbrs	r25, 7
    2394:	09 c0       	rjmp	.+18     	; 0x23a8 <vfprintf+0x21a>
    2396:	90 95       	com	r25
    2398:	80 95       	com	r24
    239a:	70 95       	com	r23
    239c:	61 95       	neg	r22
    239e:	7f 4f       	sbci	r23, 0xFF	; 255
    23a0:	8f 4f       	sbci	r24, 0xFF	; 255
    23a2:	9f 4f       	sbci	r25, 0xFF	; 255
    23a4:	f0 e8       	ldi	r31, 0x80	; 128
    23a6:	bf 2a       	or	r11, r31
    23a8:	a2 01       	movw	r20, r4
    23aa:	2a e0       	ldi	r18, 0x0A	; 10
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__ultoa_invert>
    23b2:	78 2e       	mov	r7, r24
    23b4:	74 18       	sub	r7, r4
    23b6:	45 c0       	rjmp	.+138    	; 0x2442 <vfprintf+0x2b4>
    23b8:	85 37       	cpi	r24, 0x75	; 117
    23ba:	31 f4       	brne	.+12     	; 0x23c8 <vfprintf+0x23a>
    23bc:	3f ee       	ldi	r19, 0xEF	; 239
    23be:	b3 2e       	mov	r11, r19
    23c0:	b2 22       	and	r11, r18
    23c2:	2a e0       	ldi	r18, 0x0A	; 10
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	25 c0       	rjmp	.+74     	; 0x2412 <vfprintf+0x284>
    23c8:	99 ef       	ldi	r25, 0xF9	; 249
    23ca:	b9 2e       	mov	r11, r25
    23cc:	b2 22       	and	r11, r18
    23ce:	8f 36       	cpi	r24, 0x6F	; 111
    23d0:	c1 f0       	breq	.+48     	; 0x2402 <vfprintf+0x274>
    23d2:	80 37       	cpi	r24, 0x70	; 112
    23d4:	20 f4       	brcc	.+8      	; 0x23de <vfprintf+0x250>
    23d6:	88 35       	cpi	r24, 0x58	; 88
    23d8:	09 f0       	breq	.+2      	; 0x23dc <vfprintf+0x24e>
    23da:	b5 c0       	rjmp	.+362    	; 0x2546 <vfprintf+0x3b8>
    23dc:	0d c0       	rjmp	.+26     	; 0x23f8 <vfprintf+0x26a>
    23de:	80 37       	cpi	r24, 0x70	; 112
    23e0:	21 f0       	breq	.+8      	; 0x23ea <vfprintf+0x25c>
    23e2:	88 37       	cpi	r24, 0x78	; 120
    23e4:	09 f0       	breq	.+2      	; 0x23e8 <vfprintf+0x25a>
    23e6:	af c0       	rjmp	.+350    	; 0x2546 <vfprintf+0x3b8>
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <vfprintf+0x260>
    23ea:	20 e1       	ldi	r18, 0x10	; 16
    23ec:	b2 2a       	or	r11, r18
    23ee:	b4 fe       	sbrs	r11, 4
    23f0:	0b c0       	rjmp	.+22     	; 0x2408 <vfprintf+0x27a>
    23f2:	84 e0       	ldi	r24, 0x04	; 4
    23f4:	b8 2a       	or	r11, r24
    23f6:	08 c0       	rjmp	.+16     	; 0x2408 <vfprintf+0x27a>
    23f8:	b4 fe       	sbrs	r11, 4
    23fa:	09 c0       	rjmp	.+18     	; 0x240e <vfprintf+0x280>
    23fc:	e6 e0       	ldi	r30, 0x06	; 6
    23fe:	be 2a       	or	r11, r30
    2400:	06 c0       	rjmp	.+12     	; 0x240e <vfprintf+0x280>
    2402:	28 e0       	ldi	r18, 0x08	; 8
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	05 c0       	rjmp	.+10     	; 0x2412 <vfprintf+0x284>
    2408:	20 e1       	ldi	r18, 0x10	; 16
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <vfprintf+0x284>
    240e:	20 e1       	ldi	r18, 0x10	; 16
    2410:	32 e0       	ldi	r19, 0x02	; 2
    2412:	b7 fe       	sbrs	r11, 7
    2414:	08 c0       	rjmp	.+16     	; 0x2426 <vfprintf+0x298>
    2416:	f8 01       	movw	r30, r16
    2418:	60 81       	ld	r22, Z
    241a:	71 81       	ldd	r23, Z+1	; 0x01
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	93 81       	ldd	r25, Z+3	; 0x03
    2420:	0c 5f       	subi	r16, 0xFC	; 252
    2422:	1f 4f       	sbci	r17, 0xFF	; 255
    2424:	07 c0       	rjmp	.+14     	; 0x2434 <vfprintf+0x2a6>
    2426:	f8 01       	movw	r30, r16
    2428:	60 81       	ld	r22, Z
    242a:	71 81       	ldd	r23, Z+1	; 0x01
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	0e 5f       	subi	r16, 0xFE	; 254
    2432:	1f 4f       	sbci	r17, 0xFF	; 255
    2434:	a2 01       	movw	r20, r4
    2436:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__ultoa_invert>
    243a:	78 2e       	mov	r7, r24
    243c:	74 18       	sub	r7, r4
    243e:	ff e7       	ldi	r31, 0x7F	; 127
    2440:	bf 22       	and	r11, r31
    2442:	b6 fe       	sbrs	r11, 6
    2444:	0b c0       	rjmp	.+22     	; 0x245c <vfprintf+0x2ce>
    2446:	2e ef       	ldi	r18, 0xFE	; 254
    2448:	b2 22       	and	r11, r18
    244a:	7e 14       	cp	r7, r14
    244c:	38 f4       	brcc	.+14     	; 0x245c <vfprintf+0x2ce>
    244e:	b4 fe       	sbrs	r11, 4
    2450:	07 c0       	rjmp	.+14     	; 0x2460 <vfprintf+0x2d2>
    2452:	b2 fc       	sbrc	r11, 2
    2454:	05 c0       	rjmp	.+10     	; 0x2460 <vfprintf+0x2d2>
    2456:	8f ee       	ldi	r24, 0xEF	; 239
    2458:	b8 22       	and	r11, r24
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <vfprintf+0x2d2>
    245c:	a7 2c       	mov	r10, r7
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <vfprintf+0x2d4>
    2460:	ae 2c       	mov	r10, r14
    2462:	8b 2d       	mov	r24, r11
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	b4 fe       	sbrs	r11, 4
    2468:	0d c0       	rjmp	.+26     	; 0x2484 <vfprintf+0x2f6>
    246a:	fe 01       	movw	r30, r28
    246c:	e7 0d       	add	r30, r7
    246e:	f1 1d       	adc	r31, r1
    2470:	20 81       	ld	r18, Z
    2472:	20 33       	cpi	r18, 0x30	; 48
    2474:	19 f4       	brne	.+6      	; 0x247c <vfprintf+0x2ee>
    2476:	e9 ee       	ldi	r30, 0xE9	; 233
    2478:	be 22       	and	r11, r30
    247a:	09 c0       	rjmp	.+18     	; 0x248e <vfprintf+0x300>
    247c:	a3 94       	inc	r10
    247e:	b2 fe       	sbrs	r11, 2
    2480:	06 c0       	rjmp	.+12     	; 0x248e <vfprintf+0x300>
    2482:	04 c0       	rjmp	.+8      	; 0x248c <vfprintf+0x2fe>
    2484:	86 78       	andi	r24, 0x86	; 134
    2486:	90 70       	andi	r25, 0x00	; 0
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	09 f0       	breq	.+2      	; 0x248e <vfprintf+0x300>
    248c:	a3 94       	inc	r10
    248e:	8b 2c       	mov	r8, r11
    2490:	99 24       	eor	r9, r9
    2492:	b3 fc       	sbrc	r11, 3
    2494:	14 c0       	rjmp	.+40     	; 0x24be <vfprintf+0x330>
    2496:	b0 fe       	sbrs	r11, 0
    2498:	0f c0       	rjmp	.+30     	; 0x24b8 <vfprintf+0x32a>
    249a:	af 14       	cp	r10, r15
    249c:	28 f4       	brcc	.+10     	; 0x24a8 <vfprintf+0x31a>
    249e:	e7 2c       	mov	r14, r7
    24a0:	ef 0c       	add	r14, r15
    24a2:	ea 18       	sub	r14, r10
    24a4:	af 2c       	mov	r10, r15
    24a6:	08 c0       	rjmp	.+16     	; 0x24b8 <vfprintf+0x32a>
    24a8:	e7 2c       	mov	r14, r7
    24aa:	06 c0       	rjmp	.+12     	; 0x24b8 <vfprintf+0x32a>
    24ac:	80 e2       	ldi	r24, 0x20	; 32
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	b6 01       	movw	r22, r12
    24b2:	0e 94 63 10 	call	0x20c6	; 0x20c6 <fputc>
    24b6:	a3 94       	inc	r10
    24b8:	af 14       	cp	r10, r15
    24ba:	c0 f3       	brcs	.-16     	; 0x24ac <vfprintf+0x31e>
    24bc:	04 c0       	rjmp	.+8      	; 0x24c6 <vfprintf+0x338>
    24be:	af 14       	cp	r10, r15
    24c0:	10 f4       	brcc	.+4      	; 0x24c6 <vfprintf+0x338>
    24c2:	fa 18       	sub	r15, r10
    24c4:	01 c0       	rjmp	.+2      	; 0x24c8 <vfprintf+0x33a>
    24c6:	ff 24       	eor	r15, r15
    24c8:	84 fe       	sbrs	r8, 4
    24ca:	0f c0       	rjmp	.+30     	; 0x24ea <vfprintf+0x35c>
    24cc:	80 e3       	ldi	r24, 0x30	; 48
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	b6 01       	movw	r22, r12
    24d2:	0e 94 63 10 	call	0x20c6	; 0x20c6 <fputc>
    24d6:	82 fe       	sbrs	r8, 2
    24d8:	1f c0       	rjmp	.+62     	; 0x2518 <vfprintf+0x38a>
    24da:	81 fe       	sbrs	r8, 1
    24dc:	03 c0       	rjmp	.+6      	; 0x24e4 <vfprintf+0x356>
    24de:	88 e5       	ldi	r24, 0x58	; 88
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	10 c0       	rjmp	.+32     	; 0x2504 <vfprintf+0x376>
    24e4:	88 e7       	ldi	r24, 0x78	; 120
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	0d c0       	rjmp	.+26     	; 0x2504 <vfprintf+0x376>
    24ea:	c4 01       	movw	r24, r8
    24ec:	86 78       	andi	r24, 0x86	; 134
    24ee:	90 70       	andi	r25, 0x00	; 0
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	91 f0       	breq	.+36     	; 0x2518 <vfprintf+0x38a>
    24f4:	81 fc       	sbrc	r8, 1
    24f6:	02 c0       	rjmp	.+4      	; 0x24fc <vfprintf+0x36e>
    24f8:	80 e2       	ldi	r24, 0x20	; 32
    24fa:	01 c0       	rjmp	.+2      	; 0x24fe <vfprintf+0x370>
    24fc:	8b e2       	ldi	r24, 0x2B	; 43
    24fe:	b7 fc       	sbrc	r11, 7
    2500:	8d e2       	ldi	r24, 0x2D	; 45
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	b6 01       	movw	r22, r12
    2506:	0e 94 63 10 	call	0x20c6	; 0x20c6 <fputc>
    250a:	06 c0       	rjmp	.+12     	; 0x2518 <vfprintf+0x38a>
    250c:	80 e3       	ldi	r24, 0x30	; 48
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	b6 01       	movw	r22, r12
    2512:	0e 94 63 10 	call	0x20c6	; 0x20c6 <fputc>
    2516:	ea 94       	dec	r14
    2518:	7e 14       	cp	r7, r14
    251a:	c0 f3       	brcs	.-16     	; 0x250c <vfprintf+0x37e>
    251c:	7a 94       	dec	r7
    251e:	f2 01       	movw	r30, r4
    2520:	e7 0d       	add	r30, r7
    2522:	f1 1d       	adc	r31, r1
    2524:	80 81       	ld	r24, Z
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	b6 01       	movw	r22, r12
    252a:	0e 94 63 10 	call	0x20c6	; 0x20c6 <fputc>
    252e:	77 20       	and	r7, r7
    2530:	a9 f7       	brne	.-22     	; 0x251c <vfprintf+0x38e>
    2532:	06 c0       	rjmp	.+12     	; 0x2540 <vfprintf+0x3b2>
    2534:	80 e2       	ldi	r24, 0x20	; 32
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	b6 01       	movw	r22, r12
    253a:	0e 94 63 10 	call	0x20c6	; 0x20c6 <fputc>
    253e:	fa 94       	dec	r15
    2540:	ff 20       	and	r15, r15
    2542:	c1 f7       	brne	.-16     	; 0x2534 <vfprintf+0x3a6>
    2544:	37 ce       	rjmp	.-914    	; 0x21b4 <vfprintf+0x26>
    2546:	f6 01       	movw	r30, r12
    2548:	26 81       	ldd	r18, Z+6	; 0x06
    254a:	37 81       	ldd	r19, Z+7	; 0x07
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <vfprintf+0x3c4>
    254e:	2f ef       	ldi	r18, 0xFF	; 255
    2550:	3f ef       	ldi	r19, 0xFF	; 255
    2552:	c9 01       	movw	r24, r18
    2554:	2c 96       	adiw	r28, 0x0c	; 12
    2556:	e2 e1       	ldi	r30, 0x12	; 18
    2558:	0c 94 53 13 	jmp	0x26a6	; 0x26a6 <__epilogue_restores__>

0000255c <__eerd_byte_m32>:
    255c:	e1 99       	sbic	0x1c, 1	; 28
    255e:	fe cf       	rjmp	.-4      	; 0x255c <__eerd_byte_m32>
    2560:	9f bb       	out	0x1f, r25	; 31
    2562:	8e bb       	out	0x1e, r24	; 30
    2564:	e0 9a       	sbi	0x1c, 0	; 28
    2566:	99 27       	eor	r25, r25
    2568:	8d b3       	in	r24, 0x1d	; 29
    256a:	08 95       	ret

0000256c <__eewr_byte_m32>:
    256c:	26 2f       	mov	r18, r22

0000256e <__eewr_r18_m32>:
    256e:	e1 99       	sbic	0x1c, 1	; 28
    2570:	fe cf       	rjmp	.-4      	; 0x256e <__eewr_r18_m32>
    2572:	9f bb       	out	0x1f, r25	; 31
    2574:	8e bb       	out	0x1e, r24	; 30
    2576:	2d bb       	out	0x1d, r18	; 29
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	e2 9a       	sbi	0x1c, 2	; 28
    257e:	e1 9a       	sbi	0x1c, 1	; 28
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	01 96       	adiw	r24, 0x01	; 1
    2584:	08 95       	ret

00002586 <strnlen_P>:
    2586:	fc 01       	movw	r30, r24
    2588:	05 90       	lpm	r0, Z+
    258a:	61 50       	subi	r22, 0x01	; 1
    258c:	70 40       	sbci	r23, 0x00	; 0
    258e:	01 10       	cpse	r0, r1
    2590:	d8 f7       	brcc	.-10     	; 0x2588 <strnlen_P+0x2>
    2592:	80 95       	com	r24
    2594:	90 95       	com	r25
    2596:	8e 0f       	add	r24, r30
    2598:	9f 1f       	adc	r25, r31
    259a:	08 95       	ret

0000259c <strnlen>:
    259c:	fc 01       	movw	r30, r24
    259e:	61 50       	subi	r22, 0x01	; 1
    25a0:	70 40       	sbci	r23, 0x00	; 0
    25a2:	01 90       	ld	r0, Z+
    25a4:	01 10       	cpse	r0, r1
    25a6:	d8 f7       	brcc	.-10     	; 0x259e <strnlen+0x2>
    25a8:	80 95       	com	r24
    25aa:	90 95       	com	r25
    25ac:	8e 0f       	add	r24, r30
    25ae:	9f 1f       	adc	r25, r31
    25b0:	08 95       	ret

000025b2 <__ultoa_invert>:
    25b2:	fa 01       	movw	r30, r20
    25b4:	aa 27       	eor	r26, r26
    25b6:	28 30       	cpi	r18, 0x08	; 8
    25b8:	51 f1       	breq	.+84     	; 0x260e <__ultoa_invert+0x5c>
    25ba:	20 31       	cpi	r18, 0x10	; 16
    25bc:	81 f1       	breq	.+96     	; 0x261e <__ultoa_invert+0x6c>
    25be:	e8 94       	clt
    25c0:	6f 93       	push	r22
    25c2:	6e 7f       	andi	r22, 0xFE	; 254
    25c4:	6e 5f       	subi	r22, 0xFE	; 254
    25c6:	7f 4f       	sbci	r23, 0xFF	; 255
    25c8:	8f 4f       	sbci	r24, 0xFF	; 255
    25ca:	9f 4f       	sbci	r25, 0xFF	; 255
    25cc:	af 4f       	sbci	r26, 0xFF	; 255
    25ce:	b1 e0       	ldi	r27, 0x01	; 1
    25d0:	3e d0       	rcall	.+124    	; 0x264e <__ultoa_invert+0x9c>
    25d2:	b4 e0       	ldi	r27, 0x04	; 4
    25d4:	3c d0       	rcall	.+120    	; 0x264e <__ultoa_invert+0x9c>
    25d6:	67 0f       	add	r22, r23
    25d8:	78 1f       	adc	r23, r24
    25da:	89 1f       	adc	r24, r25
    25dc:	9a 1f       	adc	r25, r26
    25de:	a1 1d       	adc	r26, r1
    25e0:	68 0f       	add	r22, r24
    25e2:	79 1f       	adc	r23, r25
    25e4:	8a 1f       	adc	r24, r26
    25e6:	91 1d       	adc	r25, r1
    25e8:	a1 1d       	adc	r26, r1
    25ea:	6a 0f       	add	r22, r26
    25ec:	71 1d       	adc	r23, r1
    25ee:	81 1d       	adc	r24, r1
    25f0:	91 1d       	adc	r25, r1
    25f2:	a1 1d       	adc	r26, r1
    25f4:	20 d0       	rcall	.+64     	; 0x2636 <__ultoa_invert+0x84>
    25f6:	09 f4       	brne	.+2      	; 0x25fa <__ultoa_invert+0x48>
    25f8:	68 94       	set
    25fa:	3f 91       	pop	r19
    25fc:	2a e0       	ldi	r18, 0x0A	; 10
    25fe:	26 9f       	mul	r18, r22
    2600:	11 24       	eor	r1, r1
    2602:	30 19       	sub	r19, r0
    2604:	30 5d       	subi	r19, 0xD0	; 208
    2606:	31 93       	st	Z+, r19
    2608:	de f6       	brtc	.-74     	; 0x25c0 <__ultoa_invert+0xe>
    260a:	cf 01       	movw	r24, r30
    260c:	08 95       	ret
    260e:	46 2f       	mov	r20, r22
    2610:	47 70       	andi	r20, 0x07	; 7
    2612:	40 5d       	subi	r20, 0xD0	; 208
    2614:	41 93       	st	Z+, r20
    2616:	b3 e0       	ldi	r27, 0x03	; 3
    2618:	0f d0       	rcall	.+30     	; 0x2638 <__ultoa_invert+0x86>
    261a:	c9 f7       	brne	.-14     	; 0x260e <__ultoa_invert+0x5c>
    261c:	f6 cf       	rjmp	.-20     	; 0x260a <__ultoa_invert+0x58>
    261e:	46 2f       	mov	r20, r22
    2620:	4f 70       	andi	r20, 0x0F	; 15
    2622:	40 5d       	subi	r20, 0xD0	; 208
    2624:	4a 33       	cpi	r20, 0x3A	; 58
    2626:	18 f0       	brcs	.+6      	; 0x262e <__ultoa_invert+0x7c>
    2628:	49 5d       	subi	r20, 0xD9	; 217
    262a:	31 fd       	sbrc	r19, 1
    262c:	40 52       	subi	r20, 0x20	; 32
    262e:	41 93       	st	Z+, r20
    2630:	02 d0       	rcall	.+4      	; 0x2636 <__ultoa_invert+0x84>
    2632:	a9 f7       	brne	.-22     	; 0x261e <__ultoa_invert+0x6c>
    2634:	ea cf       	rjmp	.-44     	; 0x260a <__ultoa_invert+0x58>
    2636:	b4 e0       	ldi	r27, 0x04	; 4
    2638:	a6 95       	lsr	r26
    263a:	97 95       	ror	r25
    263c:	87 95       	ror	r24
    263e:	77 95       	ror	r23
    2640:	67 95       	ror	r22
    2642:	ba 95       	dec	r27
    2644:	c9 f7       	brne	.-14     	; 0x2638 <__ultoa_invert+0x86>
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	61 05       	cpc	r22, r1
    264a:	71 05       	cpc	r23, r1
    264c:	08 95       	ret
    264e:	9b 01       	movw	r18, r22
    2650:	ac 01       	movw	r20, r24
    2652:	0a 2e       	mov	r0, r26
    2654:	06 94       	lsr	r0
    2656:	57 95       	ror	r21
    2658:	47 95       	ror	r20
    265a:	37 95       	ror	r19
    265c:	27 95       	ror	r18
    265e:	ba 95       	dec	r27
    2660:	c9 f7       	brne	.-14     	; 0x2654 <__ultoa_invert+0xa2>
    2662:	62 0f       	add	r22, r18
    2664:	73 1f       	adc	r23, r19
    2666:	84 1f       	adc	r24, r20
    2668:	95 1f       	adc	r25, r21
    266a:	a0 1d       	adc	r26, r0
    266c:	08 95       	ret

0000266e <__prologue_saves__>:
    266e:	2f 92       	push	r2
    2670:	3f 92       	push	r3
    2672:	4f 92       	push	r4
    2674:	5f 92       	push	r5
    2676:	6f 92       	push	r6
    2678:	7f 92       	push	r7
    267a:	8f 92       	push	r8
    267c:	9f 92       	push	r9
    267e:	af 92       	push	r10
    2680:	bf 92       	push	r11
    2682:	cf 92       	push	r12
    2684:	df 92       	push	r13
    2686:	ef 92       	push	r14
    2688:	ff 92       	push	r15
    268a:	0f 93       	push	r16
    268c:	1f 93       	push	r17
    268e:	cf 93       	push	r28
    2690:	df 93       	push	r29
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	ca 1b       	sub	r28, r26
    2698:	db 0b       	sbc	r29, r27
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
    26a4:	09 94       	ijmp

000026a6 <__epilogue_restores__>:
    26a6:	2a 88       	ldd	r2, Y+18	; 0x12
    26a8:	39 88       	ldd	r3, Y+17	; 0x11
    26aa:	48 88       	ldd	r4, Y+16	; 0x10
    26ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    26ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    26b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    26b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    26b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    26b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    26b8:	b9 84       	ldd	r11, Y+9	; 0x09
    26ba:	c8 84       	ldd	r12, Y+8	; 0x08
    26bc:	df 80       	ldd	r13, Y+7	; 0x07
    26be:	ee 80       	ldd	r14, Y+6	; 0x06
    26c0:	fd 80       	ldd	r15, Y+5	; 0x05
    26c2:	0c 81       	ldd	r16, Y+4	; 0x04
    26c4:	1b 81       	ldd	r17, Y+3	; 0x03
    26c6:	aa 81       	ldd	r26, Y+2	; 0x02
    26c8:	b9 81       	ldd	r27, Y+1	; 0x01
    26ca:	ce 0f       	add	r28, r30
    26cc:	d1 1d       	adc	r29, r1
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	ed 01       	movw	r28, r26
    26da:	08 95       	ret

000026dc <_exit>:
    26dc:	f8 94       	cli

000026de <__stop_program>:
    26de:	ff cf       	rjmp	.-2      	; 0x26de <__stop_program>
